{"ast":null,"code":"import _typeof from 'babel-runtime/helpers/typeof';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport RcTable from 'rc-table';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Pagination from '../pagination';\nimport Icon from '../icon';\nimport Spin from '../spin';\nimport warning from '../_util/warning';\nimport FilterDropdown from './filterDropdown';\nimport createStore from './createStore';\nimport SelectionBox from './SelectionBox';\nimport SelectionCheckboxAll from './SelectionCheckboxAll';\nimport Column from './Column';\nimport ColumnGroup from './ColumnGroup';\nimport { flatArray, treeMap, flatFilter, normalizeColumns } from './util';\n\nfunction noop() {}\n\nfunction stopPropagation(e) {\n  e.stopPropagation();\n\n  if (e.nativeEvent.stopImmediatePropagation) {\n    e.nativeEvent.stopImmediatePropagation();\n  }\n}\n\nvar defaultLocale = {\n  filterTitle: '筛选',\n  filterConfirm: '确定',\n  filterReset: '重置',\n  emptyText: React.createElement('span', null, React.createElement(Icon, {\n    type: 'frown-o'\n  }), \"\\u6682\\u65E0\\u6570\\u636E\"),\n  selectAll: '全选当页',\n  selectInvert: '反选当页'\n};\nvar defaultPagination = {\n  onChange: noop,\n  onShowSizeChange: noop\n};\n/**\n * Avoid creating new object, so that parent component's shouldComponentUpdate\n * can works appropriately。\n */\n\nvar emptyObject = {};\n\nvar Table = function (_React$Component) {\n  _inherits(Table, _React$Component);\n\n  function Table(props) {\n    _classCallCheck(this, Table);\n\n    var _this = _possibleConstructorReturn(this, (Table.__proto__ || Object.getPrototypeOf(Table)).call(this, props));\n\n    _this.getCheckboxPropsByItem = function (item, index) {\n      var _this$props$rowSelect = _this.props.rowSelection,\n          rowSelection = _this$props$rowSelect === undefined ? {} : _this$props$rowSelect;\n\n      if (!rowSelection.getCheckboxProps) {\n        return {};\n      }\n\n      var key = _this.getRecordKey(item, index); // Cache checkboxProps\n\n\n      if (!_this.CheckboxPropsCache[key]) {\n        _this.CheckboxPropsCache[key] = rowSelection.getCheckboxProps(item);\n      }\n\n      return _this.CheckboxPropsCache[key];\n    };\n\n    _this.handleFilter = function (column, nextFilters) {\n      var props = _this.props;\n\n      var pagination = _extends({}, _this.state.pagination);\n\n      var filters = _extends({}, _this.state.filters, _defineProperty({}, _this.getColumnKey(column), nextFilters)); // Remove filters not in current columns\n\n\n      var currentColumnKeys = [];\n      treeMap(_this.columns, function (c) {\n        if (!c.children) {\n          currentColumnKeys.push(_this.getColumnKey(c));\n        }\n      });\n      Object.keys(filters).forEach(function (columnKey) {\n        if (currentColumnKeys.indexOf(columnKey) < 0) {\n          delete filters[columnKey];\n        }\n      });\n\n      if (props.pagination) {\n        // Reset current prop\n        pagination.current = 1;\n        pagination.onChange(pagination.current);\n      }\n\n      var newState = {\n        pagination: pagination,\n        filters: {}\n      };\n\n      var filtersToSetState = _extends({}, filters); // Remove filters which is controlled\n\n\n      _this.getFilteredValueColumns().forEach(function (col) {\n        var columnKey = _this.getColumnKey(col);\n\n        if (columnKey) {\n          delete filtersToSetState[columnKey];\n        }\n      });\n\n      if (Object.keys(filtersToSetState).length > 0) {\n        newState.filters = filtersToSetState;\n      } // Controlled current prop will not respond user interaction\n\n\n      if (_typeof(props.pagination) === 'object' && 'current' in props.pagination) {\n        newState.pagination = _extends({}, pagination, {\n          current: _this.state.pagination.current\n        });\n      }\n\n      _this.setState(newState, function () {\n        _this.store.setState({\n          selectionDirty: false\n        });\n\n        var onChange = _this.props.onChange;\n\n        if (onChange) {\n          onChange.apply(null, _this.prepareParamsArguments(_extends({}, _this.state, {\n            selectionDirty: false,\n            filters: filters,\n            pagination: pagination\n          })));\n        }\n      });\n    };\n\n    _this.handleSelect = function (record, rowIndex, e) {\n      var checked = e.target.checked;\n      var defaultSelection = _this.store.getState().selectionDirty ? [] : _this.getDefaultSelection();\n\n      var selectedRowKeys = _this.store.getState().selectedRowKeys.concat(defaultSelection);\n\n      var key = _this.getRecordKey(record, rowIndex);\n\n      if (checked) {\n        selectedRowKeys.push(_this.getRecordKey(record, rowIndex));\n      } else {\n        selectedRowKeys = selectedRowKeys.filter(function (i) {\n          return key !== i;\n        });\n      }\n\n      _this.store.setState({\n        selectionDirty: true\n      });\n\n      _this.setSelectedRowKeys(selectedRowKeys, {\n        selectWay: 'onSelect',\n        record: record,\n        checked: checked\n      });\n    };\n\n    _this.handleRadioSelect = function (record, rowIndex, e) {\n      var checked = e.target.checked;\n      var defaultSelection = _this.store.getState().selectionDirty ? [] : _this.getDefaultSelection();\n\n      var selectedRowKeys = _this.store.getState().selectedRowKeys.concat(defaultSelection);\n\n      var key = _this.getRecordKey(record, rowIndex);\n\n      selectedRowKeys = [key];\n\n      _this.store.setState({\n        selectionDirty: true\n      });\n\n      _this.setSelectedRowKeys(selectedRowKeys, {\n        selectWay: 'onSelect',\n        record: record,\n        checked: checked\n      });\n    };\n\n    _this.handleSelectRow = function (selectionKey, index, onSelectFunc) {\n      var data = _this.getFlatCurrentPageData();\n\n      var defaultSelection = _this.store.getState().selectionDirty ? [] : _this.getDefaultSelection();\n\n      var selectedRowKeys = _this.store.getState().selectedRowKeys.concat(defaultSelection);\n\n      var changeableRowKeys = data.filter(function (item, i) {\n        return !_this.getCheckboxPropsByItem(item, i).disabled;\n      }).map(function (item, i) {\n        return _this.getRecordKey(item, i);\n      });\n      var changeRowKeys = [];\n      var selectWay = '';\n      var checked = void 0; // handle default selection\n\n      switch (selectionKey) {\n        case 'all':\n          changeableRowKeys.forEach(function (key) {\n            if (selectedRowKeys.indexOf(key) < 0) {\n              selectedRowKeys.push(key);\n              changeRowKeys.push(key);\n            }\n          });\n          selectWay = 'onSelectAll';\n          checked = true;\n          break;\n\n        case 'removeAll':\n          changeableRowKeys.forEach(function (key) {\n            if (selectedRowKeys.indexOf(key) >= 0) {\n              selectedRowKeys.splice(selectedRowKeys.indexOf(key), 1);\n              changeRowKeys.push(key);\n            }\n          });\n          selectWay = 'onSelectAll';\n          checked = false;\n          break;\n\n        case 'invert':\n          changeableRowKeys.forEach(function (key) {\n            if (selectedRowKeys.indexOf(key) < 0) {\n              selectedRowKeys.push(key);\n            } else {\n              selectedRowKeys.splice(selectedRowKeys.indexOf(key), 1);\n            }\n\n            changeRowKeys.push(key);\n            selectWay = 'onSelectInvert';\n          });\n          break;\n\n        default:\n          break;\n      }\n\n      _this.store.setState({\n        selectionDirty: true\n      }); // when select custom selection, callback selections[n].onSelect\n\n\n      var rowSelection = _this.props.rowSelection;\n      var customSelectionStartIndex = 2;\n\n      if (rowSelection && rowSelection.hideDefaultSelections) {\n        customSelectionStartIndex = 0;\n      }\n\n      if (index >= customSelectionStartIndex && typeof onSelectFunc === 'function') {\n        return onSelectFunc(changeableRowKeys);\n      }\n\n      _this.setSelectedRowKeys(selectedRowKeys, {\n        selectWay: selectWay,\n        checked: checked,\n        changeRowKeys: changeRowKeys\n      });\n    };\n\n    _this.handlePageChange = function (current) {\n      for (var _len = arguments.length, otherArguments = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        otherArguments[_key - 1] = arguments[_key];\n      }\n\n      var props = _this.props;\n\n      var pagination = _extends({}, _this.state.pagination);\n\n      if (current) {\n        pagination.current = current;\n      } else {\n        pagination.current = pagination.current || 1;\n      }\n\n      pagination.onChange.apply(pagination, [pagination.current].concat(otherArguments));\n      var newState = {\n        pagination: pagination\n      }; // Controlled current prop will not respond user interaction\n\n      if (props.pagination && _typeof(props.pagination) === 'object' && 'current' in props.pagination) {\n        newState.pagination = _extends({}, pagination, {\n          current: _this.state.pagination.current\n        });\n      }\n\n      _this.setState(newState);\n\n      _this.store.setState({\n        selectionDirty: false\n      });\n\n      var onChange = _this.props.onChange;\n\n      if (onChange) {\n        onChange.apply(null, _this.prepareParamsArguments(_extends({}, _this.state, {\n          selectionDirty: false,\n          pagination: pagination\n        })));\n      }\n    };\n\n    _this.renderSelectionBox = function (type) {\n      return function (_, record, index) {\n        var rowIndex = _this.getRecordKey(record, index); // 从 1 开始\n\n\n        var props = _this.getCheckboxPropsByItem(record, index);\n\n        var handleChange = function handleChange(e) {\n          type === 'radio' ? _this.handleRadioSelect(record, rowIndex, e) : _this.handleSelect(record, rowIndex, e);\n        };\n\n        return React.createElement('span', {\n          onClick: stopPropagation\n        }, React.createElement(SelectionBox, {\n          type: type,\n          store: _this.store,\n          rowIndex: rowIndex,\n          disabled: props.disabled,\n          onChange: handleChange,\n          defaultSelection: _this.getDefaultSelection()\n        }));\n      };\n    };\n\n    _this.getRecordKey = function (record, index) {\n      var rowKey = _this.props.rowKey;\n      var recordKey = typeof rowKey === 'function' ? rowKey(record, index) : record[rowKey];\n      warning(recordKey !== undefined, 'Each record in dataSource of table should have a unique `key` prop, or set `rowKey` to an unique primary key,' + 'see https://u.ant.design/table-row-key');\n      return recordKey === undefined ? index : recordKey;\n    };\n\n    _this.getPopupContainer = function () {\n      return findDOMNode(_this);\n    };\n\n    _this.handleShowSizeChange = function (current, pageSize) {\n      var pagination = _this.state.pagination;\n      pagination.onShowSizeChange(current, pageSize);\n\n      var nextPagination = _extends({}, pagination, {\n        pageSize: pageSize,\n        current: current\n      });\n\n      _this.setState({\n        pagination: nextPagination\n      });\n\n      var onChange = _this.props.onChange;\n\n      if (onChange) {\n        onChange.apply(null, _this.prepareParamsArguments(_extends({}, _this.state, {\n          pagination: nextPagination\n        })));\n      }\n    };\n\n    warning(!('columnsPageRange' in props || 'columnsPageSize' in props), '`columnsPageRange` and `columnsPageSize` are removed, please use ' + 'fixed columns instead, see: https://u.ant.design/fixed-columns.');\n    _this.columns = props.columns || normalizeColumns(props.children);\n    _this.state = _extends({}, _this.getSortStateFromColumns(), {\n      // 减少状态\n      filters: _this.getFiltersFromColumns(),\n      pagination: _this.getDefaultPagination(props)\n    });\n    _this.CheckboxPropsCache = {};\n    _this.store = createStore({\n      selectedRowKeys: (props.rowSelection || {}).selectedRowKeys || [],\n      selectionDirty: false\n    });\n    return _this;\n  }\n\n  _createClass(Table, [{\n    key: 'getDefaultSelection',\n    value: function getDefaultSelection() {\n      var _this2 = this;\n\n      var _props$rowSelection = this.props.rowSelection,\n          rowSelection = _props$rowSelection === undefined ? {} : _props$rowSelection;\n\n      if (!rowSelection.getCheckboxProps) {\n        return [];\n      }\n\n      return this.getFlatData().filter(function (item, rowIndex) {\n        return _this2.getCheckboxPropsByItem(item, rowIndex).defaultChecked;\n      }).map(function (record, rowIndex) {\n        return _this2.getRecordKey(record, rowIndex);\n      });\n    }\n  }, {\n    key: 'getDefaultPagination',\n    value: function getDefaultPagination(props) {\n      var pagination = props.pagination || {};\n      return this.hasPagination(props) ? _extends({}, defaultPagination, pagination, {\n        current: pagination.defaultCurrent || pagination.current || 1,\n        pageSize: pagination.defaultPageSize || pagination.pageSize || 10\n      }) : {};\n    }\n  }, {\n    key: 'getLocale',\n    value: function getLocale() {\n      var locale = {};\n\n      if (this.context.antLocale && this.context.antLocale.Table) {\n        locale = this.context.antLocale.Table;\n      }\n\n      return _extends({}, defaultLocale, locale, this.props.locale);\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      this.columns = nextProps.columns || normalizeColumns(nextProps.children);\n\n      if ('pagination' in nextProps || 'pagination' in this.props) {\n        this.setState(function (previousState) {\n          var newPagination = _extends({}, defaultPagination, previousState.pagination, nextProps.pagination);\n\n          newPagination.current = newPagination.current || 1;\n          newPagination.pageSize = newPagination.pageSize || 10;\n          return {\n            pagination: nextProps.pagination !== false ? newPagination : emptyObject\n          };\n        });\n      }\n\n      if (nextProps.rowSelection && 'selectedRowKeys' in nextProps.rowSelection) {\n        this.store.setState({\n          selectedRowKeys: nextProps.rowSelection.selectedRowKeys || []\n        });\n        var rowSelection = this.props.rowSelection;\n\n        if (rowSelection && nextProps.rowSelection.getCheckboxProps !== rowSelection.getCheckboxProps) {\n          this.CheckboxPropsCache = {};\n        }\n      }\n\n      if ('dataSource' in nextProps && nextProps.dataSource !== this.props.dataSource) {\n        this.store.setState({\n          selectionDirty: false\n        });\n        this.CheckboxPropsCache = {};\n      }\n\n      if (this.getSortOrderColumns(this.columns).length > 0) {\n        var sortState = this.getSortStateFromColumns(this.columns);\n\n        if (sortState.sortColumn !== this.state.sortColumn || sortState.sortOrder !== this.state.sortOrder) {\n          this.setState(sortState);\n        }\n      }\n\n      var filteredValueColumns = this.getFilteredValueColumns(this.columns);\n\n      if (filteredValueColumns.length > 0) {\n        var filtersFromColumns = this.getFiltersFromColumns(this.columns);\n\n        var newFilters = _extends({}, this.state.filters);\n\n        Object.keys(filtersFromColumns).forEach(function (key) {\n          newFilters[key] = filtersFromColumns[key];\n        });\n\n        if (this.isFiltersChanged(newFilters)) {\n          this.setState({\n            filters: newFilters\n          });\n        }\n      }\n    }\n  }, {\n    key: 'setSelectedRowKeys',\n    value: function setSelectedRowKeys(selectedRowKeys, _ref) {\n      var _this3 = this;\n\n      var selectWay = _ref.selectWay,\n          record = _ref.record,\n          checked = _ref.checked,\n          changeRowKeys = _ref.changeRowKeys;\n      var _props$rowSelection2 = this.props.rowSelection,\n          rowSelection = _props$rowSelection2 === undefined ? {} : _props$rowSelection2;\n\n      if (rowSelection && !('selectedRowKeys' in rowSelection)) {\n        this.store.setState({\n          selectedRowKeys: selectedRowKeys\n        });\n      }\n\n      var data = this.getFlatData();\n\n      if (!rowSelection.onChange && !rowSelection[selectWay]) {\n        return;\n      }\n\n      var selectedRows = data.filter(function (row, i) {\n        return selectedRowKeys.indexOf(_this3.getRecordKey(row, i)) >= 0;\n      });\n\n      if (rowSelection.onChange) {\n        rowSelection.onChange(selectedRowKeys, selectedRows);\n      }\n\n      if (selectWay === 'onSelect' && rowSelection.onSelect) {\n        rowSelection.onSelect(record, checked, selectedRows);\n      } else if (selectWay === 'onSelectAll' && rowSelection.onSelectAll) {\n        var changeRows = data.filter(function (row, i) {\n          return changeRowKeys.indexOf(_this3.getRecordKey(row, i)) >= 0;\n        });\n        rowSelection.onSelectAll(checked, selectedRows, changeRows);\n      } else if (selectWay === 'onSelectInvert' && rowSelection.onSelectInvert) {\n        rowSelection.onSelectInvert(selectedRowKeys);\n      }\n    }\n  }, {\n    key: 'hasPagination',\n    value: function hasPagination(props) {\n      return (props || this.props).pagination !== false;\n    }\n  }, {\n    key: 'isFiltersChanged',\n    value: function isFiltersChanged(filters) {\n      var _this4 = this;\n\n      var filtersChanged = false;\n\n      if (Object.keys(filters).length !== Object.keys(this.state.filters).length) {\n        filtersChanged = true;\n      } else {\n        Object.keys(filters).forEach(function (columnKey) {\n          if (filters[columnKey] !== _this4.state.filters[columnKey]) {\n            filtersChanged = true;\n          }\n        });\n      }\n\n      return filtersChanged;\n    }\n  }, {\n    key: 'getSortOrderColumns',\n    value: function getSortOrderColumns(columns) {\n      return flatFilter(columns || this.columns || [], function (column) {\n        return 'sortOrder' in column;\n      });\n    }\n  }, {\n    key: 'getFilteredValueColumns',\n    value: function getFilteredValueColumns(columns) {\n      return flatFilter(columns || this.columns || [], function (column) {\n        return typeof column.filteredValue !== 'undefined';\n      });\n    }\n  }, {\n    key: 'getFiltersFromColumns',\n    value: function getFiltersFromColumns(columns) {\n      var _this5 = this;\n\n      var filters = {};\n      this.getFilteredValueColumns(columns).forEach(function (col) {\n        filters[_this5.getColumnKey(col)] = col.filteredValue;\n      });\n      return filters;\n    }\n  }, {\n    key: 'getSortStateFromColumns',\n    value: function getSortStateFromColumns(columns) {\n      // return fisrt column which sortOrder is not falsy\n      var sortedColumn = this.getSortOrderColumns(columns).filter(function (col) {\n        return col.sortOrder;\n      })[0];\n\n      if (sortedColumn) {\n        return {\n          sortColumn: sortedColumn,\n          sortOrder: sortedColumn.sortOrder\n        };\n      }\n\n      return {\n        sortColumn: null,\n        sortOrder: null\n      };\n    }\n  }, {\n    key: 'getSorterFn',\n    value: function getSorterFn() {\n      var _state = this.state,\n          sortOrder = _state.sortOrder,\n          sortColumn = _state.sortColumn;\n\n      if (!sortOrder || !sortColumn || typeof sortColumn.sorter !== 'function') {\n        return;\n      }\n\n      return function (a, b) {\n        var result = sortColumn.sorter(a, b);\n\n        if (result !== 0) {\n          return sortOrder === 'descend' ? -result : result;\n        }\n\n        return 0;\n      };\n    }\n  }, {\n    key: 'toggleSortOrder',\n    value: function toggleSortOrder(order, column) {\n      var _state2 = this.state,\n          sortColumn = _state2.sortColumn,\n          sortOrder = _state2.sortOrder; // 只同时允许一列进行排序，否则会导致排序顺序的逻辑问题\n\n      var isSortColumn = this.isSortColumn(column);\n\n      if (!isSortColumn) {\n        sortOrder = order;\n        sortColumn = column;\n      } else {\n        if (sortOrder === order) {\n          sortOrder = '';\n          sortColumn = null;\n        } else {\n          sortOrder = order;\n        }\n      }\n\n      var newState = {\n        sortOrder: sortOrder,\n        sortColumn: sortColumn\n      }; // Controlled\n\n      if (this.getSortOrderColumns().length === 0) {\n        this.setState(newState);\n      }\n\n      var onChange = this.props.onChange;\n\n      if (onChange) {\n        onChange.apply(null, this.prepareParamsArguments(_extends({}, this.state, newState)));\n      }\n    }\n  }, {\n    key: 'renderRowSelection',\n    value: function renderRowSelection() {\n      var _this6 = this;\n\n      var _props = this.props,\n          prefixCls = _props.prefixCls,\n          rowSelection = _props.rowSelection;\n      var columns = this.columns.concat();\n\n      if (rowSelection) {\n        var data = this.getFlatCurrentPageData().filter(function (item, index) {\n          if (rowSelection.getCheckboxProps) {\n            return !_this6.getCheckboxPropsByItem(item, index).disabled;\n          }\n\n          return true;\n        });\n        var selectionColumnClass = classNames(prefixCls + '-selection-column', _defineProperty({}, prefixCls + '-selection-column-custom', rowSelection.selections));\n        var selectionColumn = {\n          key: 'selection-column',\n          render: this.renderSelectionBox(rowSelection.type),\n          className: selectionColumnClass\n        };\n\n        if (rowSelection.type !== 'radio') {\n          var checkboxAllDisabled = data.every(function (item, index) {\n            return _this6.getCheckboxPropsByItem(item, index).disabled;\n          });\n          selectionColumn.title = React.createElement(SelectionCheckboxAll, {\n            store: this.store,\n            locale: this.getLocale(),\n            data: data,\n            getCheckboxPropsByItem: this.getCheckboxPropsByItem,\n            getRecordKey: this.getRecordKey,\n            disabled: checkboxAllDisabled,\n            prefixCls: prefixCls,\n            onSelect: this.handleSelectRow,\n            selections: rowSelection.selections,\n            hideDefaultSelections: rowSelection.hideDefaultSelections,\n            getPopupContainer: this.getPopupContainer\n          });\n        }\n\n        if (columns.some(function (column) {\n          return column.fixed === 'left' || column.fixed === true;\n        })) {\n          selectionColumn.fixed = 'left';\n        }\n\n        if (columns[0] && columns[0].key === 'selection-column') {\n          columns[0] = selectionColumn;\n        } else {\n          columns.unshift(selectionColumn);\n        }\n      }\n\n      return columns;\n    }\n  }, {\n    key: 'getColumnKey',\n    value: function getColumnKey(column, index) {\n      return column.key || column.dataIndex || index;\n    }\n  }, {\n    key: 'getMaxCurrent',\n    value: function getMaxCurrent(total) {\n      var _state$pagination = this.state.pagination,\n          current = _state$pagination.current,\n          pageSize = _state$pagination.pageSize;\n\n      if ((current - 1) * pageSize >= total) {\n        return Math.floor((total - 1) / pageSize) + 1;\n      }\n\n      return current;\n    }\n  }, {\n    key: 'isSortColumn',\n    value: function isSortColumn(column) {\n      var sortColumn = this.state.sortColumn;\n\n      if (!column || !sortColumn) {\n        return false;\n      }\n\n      return this.getColumnKey(sortColumn) === this.getColumnKey(column);\n    }\n  }, {\n    key: 'renderColumnsDropdown',\n    value: function renderColumnsDropdown(columns) {\n      var _this7 = this;\n\n      var _props2 = this.props,\n          prefixCls = _props2.prefixCls,\n          dropdownPrefixCls = _props2.dropdownPrefixCls;\n      var sortOrder = this.state.sortOrder;\n      var locale = this.getLocale();\n      return treeMap(columns, function (originColumn, i) {\n        var column = _extends({}, originColumn);\n\n        var key = _this7.getColumnKey(column, i);\n\n        var filterDropdown = void 0;\n        var sortButton = void 0;\n\n        if (column.filters && column.filters.length > 0 || column.filterDropdown) {\n          var colFilters = _this7.state.filters[key] || [];\n          filterDropdown = React.createElement(FilterDropdown, {\n            locale: locale,\n            column: column,\n            selectedKeys: colFilters,\n            confirmFilter: _this7.handleFilter,\n            prefixCls: prefixCls + '-filter',\n            dropdownPrefixCls: dropdownPrefixCls || 'ant-dropdown',\n            getPopupContainer: _this7.getPopupContainer\n          });\n        }\n\n        if (column.sorter) {\n          var isSortColumn = _this7.isSortColumn(column);\n\n          if (isSortColumn) {\n            column.className = column.className || '';\n\n            if (sortOrder) {\n              column.className += ' ' + prefixCls + '-column-sort';\n            }\n          }\n\n          var isAscend = isSortColumn && sortOrder === 'ascend';\n          var isDescend = isSortColumn && sortOrder === 'descend';\n          sortButton = React.createElement('div', {\n            className: prefixCls + '-column-sorter'\n          }, React.createElement('span', {\n            className: prefixCls + '-column-sorter-up ' + (isAscend ? 'on' : 'off'),\n            title: \"\\u2191\",\n            onClick: function onClick() {\n              return _this7.toggleSortOrder('ascend', column);\n            }\n          }, React.createElement(Icon, {\n            type: 'caret-up'\n          })), React.createElement('span', {\n            className: prefixCls + '-column-sorter-down ' + (isDescend ? 'on' : 'off'),\n            title: \"\\u2193\",\n            onClick: function onClick() {\n              return _this7.toggleSortOrder('descend', column);\n            }\n          }, React.createElement(Icon, {\n            type: 'caret-down'\n          })));\n        }\n\n        column.title = React.createElement('span', null, column.title, sortButton, filterDropdown);\n        return column;\n      });\n    }\n  }, {\n    key: 'renderPagination',\n    value: function renderPagination() {\n      // 强制不需要分页\n      if (!this.hasPagination()) {\n        return null;\n      }\n\n      var size = 'default';\n      var pagination = this.state.pagination;\n\n      if (pagination.size) {\n        size = pagination.size;\n      } else if (this.props.size === 'middle' || this.props.size === 'small') {\n        size = 'small';\n      }\n\n      var total = pagination.total || this.getLocalData().length;\n      return total > 0 ? React.createElement(Pagination, _extends({\n        key: 'pagination'\n      }, pagination, {\n        className: classNames(pagination.className, this.props.prefixCls + '-pagination'),\n        onChange: this.handlePageChange,\n        total: total,\n        size: size,\n        current: this.getMaxCurrent(total),\n        onShowSizeChange: this.handleShowSizeChange\n      })) : null;\n    } // Get pagination, filters, sorter\n\n  }, {\n    key: 'prepareParamsArguments',\n    value: function prepareParamsArguments(state) {\n      var pagination = _extends({}, state.pagination); // remove useless handle function in Table.onChange\n\n\n      delete pagination.onChange;\n      delete pagination.onShowSizeChange;\n      var filters = state.filters;\n      var sorter = {};\n\n      if (state.sortColumn && state.sortOrder) {\n        sorter.column = state.sortColumn;\n        sorter.order = state.sortOrder;\n        sorter.field = state.sortColumn.dataIndex;\n        sorter.columnKey = this.getColumnKey(state.sortColumn);\n      }\n\n      return [pagination, filters, sorter];\n    }\n  }, {\n    key: 'findColumn',\n    value: function findColumn(myKey) {\n      var _this8 = this;\n\n      var column = void 0;\n      treeMap(this.columns, function (c) {\n        if (_this8.getColumnKey(c) === myKey) {\n          column = c;\n        }\n      });\n      return column;\n    }\n  }, {\n    key: 'getCurrentPageData',\n    value: function getCurrentPageData() {\n      var data = this.getLocalData();\n      var current = void 0;\n      var pageSize = void 0;\n      var state = this.state; // 如果没有分页的话，默认全部展示\n\n      if (!this.hasPagination()) {\n        pageSize = Number.MAX_VALUE;\n        current = 1;\n      } else {\n        pageSize = state.pagination.pageSize;\n        current = this.getMaxCurrent(state.pagination.total || data.length);\n      } // 分页\n      // ---\n      // 当数据量少于等于每页数量时，直接设置数据\n      // 否则进行读取分页数据\n\n\n      if (data.length > pageSize || pageSize === Number.MAX_VALUE) {\n        data = data.filter(function (_, i) {\n          return i >= (current - 1) * pageSize && i < current * pageSize;\n        });\n      }\n\n      return data;\n    }\n  }, {\n    key: 'getFlatData',\n    value: function getFlatData() {\n      return flatArray(this.getLocalData());\n    }\n  }, {\n    key: 'getFlatCurrentPageData',\n    value: function getFlatCurrentPageData() {\n      return flatArray(this.getCurrentPageData());\n    }\n  }, {\n    key: 'recursiveSort',\n    value: function recursiveSort(data, sorterFn) {\n      var _this9 = this;\n\n      var _props$childrenColumn = this.props.childrenColumnName,\n          childrenColumnName = _props$childrenColumn === undefined ? 'children' : _props$childrenColumn;\n      return data.sort(sorterFn).map(function (item) {\n        return item[childrenColumnName] ? _extends({}, item, _defineProperty({}, childrenColumnName, _this9.recursiveSort(item[childrenColumnName], sorterFn))) : item;\n      });\n    }\n  }, {\n    key: 'getLocalData',\n    value: function getLocalData() {\n      var _this10 = this;\n\n      var state = this.state;\n      var dataSource = this.props.dataSource;\n      var data = dataSource || []; // 优化本地排序\n\n      data = data.slice(0);\n      var sorterFn = this.getSorterFn();\n\n      if (sorterFn) {\n        data = this.recursiveSort(data, sorterFn);\n      } // 筛选\n\n\n      if (state.filters) {\n        Object.keys(state.filters).forEach(function (columnKey) {\n          var col = _this10.findColumn(columnKey);\n\n          if (!col) {\n            return;\n          }\n\n          var values = state.filters[columnKey] || [];\n\n          if (values.length === 0) {\n            return;\n          }\n\n          var onFilter = col.onFilter;\n          data = onFilter ? data.filter(function (record) {\n            return values.some(function (v) {\n              return onFilter(v, record);\n            });\n          }) : data;\n        });\n      }\n\n      return data;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _classNames2,\n          _this11 = this;\n\n      var _a = this.props,\n          style = _a.style,\n          className = _a.className,\n          prefixCls = _a.prefixCls,\n          showHeader = _a.showHeader,\n          restProps = __rest(_a, [\"style\", \"className\", \"prefixCls\", \"showHeader\"]);\n\n      var data = this.getCurrentPageData();\n      var columns = this.renderRowSelection();\n      var expandIconAsCell = this.props.expandedRowRender && this.props.expandIconAsCell !== false;\n      var locale = this.getLocale();\n      var classString = classNames((_classNames2 = {}, _defineProperty(_classNames2, prefixCls + '-' + this.props.size, true), _defineProperty(_classNames2, prefixCls + '-bordered', this.props.bordered), _defineProperty(_classNames2, prefixCls + '-empty', !data.length), _defineProperty(_classNames2, prefixCls + '-without-column-header', !showHeader), _classNames2));\n      columns = this.renderColumnsDropdown(columns);\n      columns = columns.map(function (column, i) {\n        var newColumn = _extends({}, column);\n\n        newColumn.key = _this11.getColumnKey(newColumn, i);\n        return newColumn;\n      });\n      var expandIconColumnIndex = columns[0] && columns[0].key === 'selection-column' ? 1 : 0;\n\n      if ('expandIconColumnIndex' in restProps) {\n        expandIconColumnIndex = restProps.expandIconColumnIndex;\n      }\n\n      var table = React.createElement(RcTable, _extends({\n        key: 'table'\n      }, restProps, {\n        prefixCls: prefixCls,\n        data: data,\n        columns: columns,\n        showHeader: showHeader,\n        className: classString,\n        expandIconColumnIndex: expandIconColumnIndex,\n        expandIconAsCell: expandIconAsCell,\n        emptyText: function emptyText() {\n          return locale.emptyText;\n        }\n      })); // if there is no pagination or no data,\n      // the height of spin should decrease by half of pagination\n\n      var paginationPatchClass = this.hasPagination() && data && data.length !== 0 ? prefixCls + '-with-pagination' : prefixCls + '-without-pagination';\n      var loading = this.props.loading;\n\n      if (typeof loading === 'boolean') {\n        loading = {\n          spinning: loading\n        };\n      }\n\n      return React.createElement('div', {\n        className: classNames(prefixCls + '-wrapper', className),\n        style: style\n      }, React.createElement(Spin, _extends({}, loading, {\n        className: loading ? paginationPatchClass + ' ' + prefixCls + '-spin-holder' : ''\n      }), table, this.renderPagination()));\n    }\n  }]);\n\n  return Table;\n}(React.Component);\n\nexport default Table;\nTable.Column = Column;\nTable.ColumnGroup = ColumnGroup;\nTable.propTypes = {\n  dataSource: PropTypes.array,\n  columns: PropTypes.array,\n  prefixCls: PropTypes.string,\n  useFixedHeader: PropTypes.bool,\n  rowSelection: PropTypes.object,\n  className: PropTypes.string,\n  size: PropTypes.string,\n  loading: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  bordered: PropTypes.bool,\n  onChange: PropTypes.func,\n  locale: PropTypes.object,\n  dropdownPrefixCls: PropTypes.string\n};\nTable.defaultProps = {\n  dataSource: [],\n  prefixCls: 'ant-table',\n  useFixedHeader: false,\n  rowSelection: null,\n  className: '',\n  size: 'large',\n  loading: false,\n  bordered: false,\n  indentSize: 20,\n  locale: {},\n  rowKey: 'key',\n  showHeader: true\n};\nTable.contextTypes = {\n  antLocale: PropTypes.object\n};","map":null,"metadata":{},"sourceType":"module"}