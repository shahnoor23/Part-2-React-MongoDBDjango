{"ast":null,"code":"import _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport set from 'lodash/set';\nimport { flatFieldNames, getErrorStrs, getNameIfNested, getVirtualPaths } from './utils';\nvar atom = {};\n\nvar FieldsStore = function () {\n  function FieldsStore(fields) {\n    _classCallCheck(this, FieldsStore);\n\n    _initialiseProps.call(this);\n\n    this.fields = fields;\n    this.fieldsMeta = {};\n  }\n\n  _createClass(FieldsStore, [{\n    key: 'updateFields',\n    value: function updateFields(fields) {\n      _extends(this.fields, fields);\n    }\n  }, {\n    key: 'setFields',\n    value: function setFields(fields) {\n      var _this = this;\n\n      var fieldsMeta = this.fieldsMeta;\n\n      var nowFields = _extends({}, this.fields, fields);\n\n      var nowValues = {};\n      Object.keys(fieldsMeta).forEach(function (f) {\n        var _getNameIfNested = getNameIfNested(f),\n            name = _getNameIfNested.name,\n            isNested = _getNameIfNested.isNested;\n\n        if (isNested && fieldsMeta[name].exclusive) {\n          return;\n        }\n\n        nowValues[f] = _this.getValueFromFields(f, nowFields);\n      });\n      Object.keys(nowValues).forEach(function (f) {\n        var value = nowValues[f];\n        var fieldMeta = fieldsMeta[f];\n\n        if (fieldMeta && fieldMeta.normalize) {\n          var nowValue = fieldMeta.normalize(value, _this.getValueFromFields(f, _this.fields), nowValues);\n\n          if (nowValue !== value) {\n            nowFields[f] = _extends({}, nowFields[f], {\n              value: nowValue\n            });\n          }\n        }\n      });\n      this.fields = nowFields;\n    }\n  }, {\n    key: 'resetFields',\n    value: function resetFields(ns) {\n      var newFields = {};\n      var fields = this.fields;\n      var names = ns || Object.keys(fields);\n      names.forEach(function (name) {\n        var field = fields[name];\n\n        if (field && 'value' in field) {\n          newFields[name] = {};\n        }\n      });\n      return newFields;\n    }\n  }, {\n    key: 'getValueFromFieldsInternal',\n    value: function getValueFromFieldsInternal(name, fields) {\n      var field = fields[name];\n\n      if (field && 'value' in field) {\n        return field.value;\n      }\n\n      var fieldMeta = this.fieldsMeta[name];\n      return fieldMeta && fieldMeta.initialValue;\n    }\n  }, {\n    key: 'getValueFromFields',\n    value: function getValueFromFields(name, fields) {\n      var _this2 = this;\n\n      var fieldsMeta = this.fieldsMeta;\n\n      if (fieldsMeta[name] && fieldsMeta[name].virtual) {\n        var ret = {};\n        Object.keys(fieldsMeta).forEach(function (fieldKey) {\n          var nameIfNested = getNameIfNested(fieldKey);\n\n          if (nameIfNested.name === name && nameIfNested.isNested) {\n            set(ret, fieldKey, _this2.getValueFromFieldsInternal(fieldKey, fields));\n          }\n        });\n        return ret[name];\n      }\n\n      return this.getValueFromFieldsInternal(name, fields);\n    }\n  }, {\n    key: 'getValidFieldsName',\n    value: function getValidFieldsName() {\n      var fieldsMeta = this.fieldsMeta;\n      return fieldsMeta ? Object.keys(fieldsMeta).filter(function (name) {\n        return !fieldsMeta[name].hidden;\n      }) : [];\n    }\n  }, {\n    key: 'getFieldValuePropValue',\n    value: function getFieldValuePropValue(fieldMeta) {\n      var exclusive = fieldMeta.exclusive,\n          leadingName = fieldMeta.leadingName,\n          name = fieldMeta.name,\n          getValueProps = fieldMeta.getValueProps,\n          valuePropName = fieldMeta.valuePropName;\n      var fieldsMeta = this.fieldsMeta;\n      var field = exclusive ? this.getField(leadingName) : this.getField(name);\n      var fieldValue = atom;\n\n      if (field && 'value' in field) {\n        fieldValue = field.value;\n      }\n\n      if (fieldValue === atom) {\n        fieldValue = exclusive ? fieldsMeta[leadingName].initialValue : fieldMeta.initialValue;\n      }\n\n      if (getValueProps) {\n        return getValueProps(fieldValue);\n      }\n\n      return _defineProperty({}, valuePropName, fieldValue);\n    }\n  }, {\n    key: 'getField',\n    value: function getField(name) {\n      return _extends({}, this.fields[name], {\n        name: name\n      });\n    }\n  }, {\n    key: 'getFieldMember',\n    value: function getFieldMember(name, member) {\n      return this.getField(name)[member];\n    }\n  }, {\n    key: 'getFieldMeta',\n    value: function getFieldMeta(name) {\n      if (!this.fieldsMeta[name]) {\n        this.fieldsMeta[name] = {};\n      }\n\n      return this.fieldsMeta[name];\n    }\n  }, {\n    key: 'setFieldMeta',\n    value: function setFieldMeta(name, meta) {\n      this.fieldsMeta[name] = meta;\n    }\n  }, {\n    key: 'clearField',\n    value: function clearField(name) {\n      delete this.fields[name];\n      delete this.fieldsMeta[name];\n    }\n  }]);\n\n  return FieldsStore;\n}();\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this3 = this;\n\n  this.getFieldsValue = function (names) {\n    var fields = names || flatFieldNames(_this3.getValidFieldsName());\n    var allValues = {};\n    fields.forEach(function (f) {\n      set(allValues, f, _this3.getFieldValue(f));\n    });\n    return allValues;\n  };\n\n  this.getFieldValue = function (name) {\n    var fields = _this3.fields;\n    return _this3.getValueFromFields(name, fields);\n  };\n\n  this.getFieldsError = function (names) {\n    var fields = names || flatFieldNames(_this3.getValidFieldsName());\n    var allErrors = {};\n    fields.forEach(function (f) {\n      set(allErrors, f, _this3.getFieldError(f));\n    });\n    return allErrors;\n  };\n\n  this.getFieldError = function (name) {\n    return getErrorStrs(_this3.getFieldMember(name, 'errors'));\n  };\n\n  this.setFieldsInitialValue = function (initialValues) {\n    var fieldsMeta = _this3.fieldsMeta;\n    var virtualPaths = getVirtualPaths(fieldsMeta);\n    Object.keys(initialValues).forEach(function (name) {\n      if (fieldsMeta[name] && fieldsMeta[name].virtual) {\n        for (var i = 0, len = virtualPaths[name].length; i < len; i++) {\n          var path = virtualPaths[name][i];\n\n          if (has(initialValues, path)) {\n            fieldsMeta[path] = _extends({}, fieldsMeta[path], {\n              initialValue: get(initialValues, path)\n            });\n          }\n        }\n      } else if (fieldsMeta[name]) {\n        fieldsMeta[name] = _extends({}, fieldsMeta[name], {\n          initialValue: initialValues[name]\n        });\n      }\n    });\n  };\n\n  this.isFieldValidating = function (name) {\n    return _this3.getFieldMember(name, 'validating');\n  };\n\n  this.isFieldsValidating = function (ns) {\n    var names = ns || _this3.getValidFieldsName();\n\n    return names.some(function (n) {\n      return _this3.isFieldValidating(n);\n    });\n  };\n\n  this.isFieldTouched = function (name) {\n    return _this3.getFieldMember(name, 'touched');\n  };\n\n  this.isFieldsTouched = function (ns) {\n    var names = ns || _this3.getValidFieldsName();\n\n    return names.some(function (n) {\n      return _this3.isFieldTouched(n);\n    });\n  };\n};\n\nexport default function createFieldsStore(fields) {\n  return new FieldsStore(fields);\n}","map":null,"metadata":{},"sourceType":"module"}