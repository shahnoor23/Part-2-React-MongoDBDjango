{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { changeConfirmLocale } from '../modal/locale';\n\nvar LocaleProvider = function (_React$Component) {\n  _inherits(LocaleProvider, _React$Component);\n\n  function LocaleProvider() {\n    _classCallCheck(this, LocaleProvider);\n\n    return _possibleConstructorReturn(this, (LocaleProvider.__proto__ || Object.getPrototypeOf(LocaleProvider)).apply(this, arguments));\n  }\n\n  _createClass(LocaleProvider, [{\n    key: 'getChildContext',\n    value: function getChildContext() {\n      return {\n        antLocale: _extends({}, this.props.locale, {\n          exist: true\n        })\n      };\n    }\n  }, {\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this.componentDidUpdate();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      var locale = this.props.locale;\n      changeConfirmLocale(locale && locale.Modal);\n    }\n  }, {\n    key: 'componentWillUnMount',\n    value: function componentWillUnMount() {\n      changeConfirmLocale();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return React.Children.only(this.props.children);\n    }\n  }]);\n\n  return LocaleProvider;\n}(React.Component);\n\nexport default LocaleProvider;\nLocaleProvider.propTypes = {\n  locale: PropTypes.object\n};\nLocaleProvider.childContextTypes = {\n  antLocale: PropTypes.object\n};","map":null,"metadata":{},"sourceType":"module"}