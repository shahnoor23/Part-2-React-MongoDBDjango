{"ast":null,"code":"import axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport jwt from \"jwt-decode\";\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS } from \"./types\"; //check token and load user\n\nexport var loaduser = function loaduser() {\n  return function (dispatch, getState) {\n    //user loading\n    dispatch({\n      type: USER_LOADING\n    });\n    axios.get(\"http://127.0.0.1:8000/api/auth/user\", tokenConfig(getState)).then(function (res) {\n      var token = res.data.token;\n      var user = jwt(token); // decode your token here\n\n      localStorage.setItem(\"token\", token);\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      console.log(err);\n      dispatch({\n        type: AUTH_ERROR\n      });\n    });\n  };\n}; //loging user\n\nexport var login = function login(username, password, email) {\n  return function (dispatch) {\n    //Headers\n    var config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }; //request body\n\n    var body = JSON.stringify({\n      username: username,\n      password: password,\n      email: email\n    });\n    axios.post(\"http://localhost:8000/api/auth/login/\", body, config).then(function (res) {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      console.log(err);\n      dispatch({\n        type: LOGIN_FAIL\n      });\n    });\n  };\n}; //logout user\n\nexport var logout = function logout() {\n  return function (dispatch, getState) {\n    axios.post(\"http://127.0.0.1:8000/api/auth/logout/\", null, tokenConfig(getState)).then(function (res) {\n      dispatch({\n        type: LOGOUT_SUCCESS // payload: res.data\n\n      });\n    }).catch(function (err) {\n      console.log(err);\n    });\n  };\n}; //setup config with token --helper function\n\nexport var tokenConfig = function tokenConfig(getState) {\n  //gt token from state\n  var token = getState().auth.token; //Headers\n\n  var config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; //if token add to headers config\n\n  if (token) {\n    config.headers[\"Authorization\"] = \"Token \".concat(token);\n  }\n\n  return config;\n};","map":{"version":3,"sources":["C:/Users/Shahnoor Khalidi/Desktop/test/test/src/actions/auth.js"],"names":["axios","jwt_decode","jwt","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","loaduser","dispatch","getState","type","get","tokenConfig","then","res","token","data","user","localStorage","setItem","payload","catch","err","console","log","login","username","password","email","config","headers","body","JSON","stringify","post","logout","auth"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport jwt from \"jwt-decode\";\r\nimport {\r\n  USER_LOADED,\r\n  USER_LOADING,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT_SUCCESS\r\n} from \"./types\";\r\n\r\n//check token and load user\r\nexport const loaduser = () => (dispatch, getState) => {\r\n  //user loading\r\n  dispatch({ type: USER_LOADING });\r\n\r\n  axios\r\n    .get(\"http://127.0.0.1:8000/api/auth/user\", tokenConfig(getState))\r\n    .then(res => {\r\n      const token = res.data.token;\r\n      const user = jwt(token); // decode your token here\r\n      localStorage.setItem(\"token\", token);\r\n      dispatch({\r\n        type: USER_LOADED,\r\n        payload: res.data\r\n      });\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n      dispatch({\r\n        type: AUTH_ERROR\r\n      });\r\n    });\r\n};\r\n\r\n//loging user\r\nexport const login = (username, password, email) => dispatch => {\r\n  //Headers\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  };\r\n\r\n  //request body\r\n\r\n  const body = JSON.stringify({ username, password, email });\r\n  axios\r\n    .post(\"http://localhost:8000/api/auth/login/\", body, config)\r\n    .then(res => {\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: res.data\r\n      });\r\n    })\r\n\r\n    .catch(err => {\r\n      console.log(err);\r\n      dispatch({\r\n        type: LOGIN_FAIL\r\n      });\r\n    });\r\n};\r\n\r\n//logout user\r\n\r\nexport const logout = () => (dispatch, getState) => {\r\n  axios\r\n    .post(\"http://127.0.0.1:8000/api/auth/logout/\", null, tokenConfig(getState))\r\n    .then(res => {\r\n      dispatch({\r\n        type: LOGOUT_SUCCESS\r\n        // payload: res.data\r\n      });\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n    });\r\n};\r\n\r\n//setup config with token --helper function\r\nexport const tokenConfig = getState => {\r\n  //gt token from state\r\n\r\n  const token = getState().auth.token;\r\n\r\n  //Headers\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  };\r\n  //if token add to headers config\r\n  if (token) {\r\n    config.headers[\"Authorization\"] = `Token ${token}`;\r\n  }\r\n  return config;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}