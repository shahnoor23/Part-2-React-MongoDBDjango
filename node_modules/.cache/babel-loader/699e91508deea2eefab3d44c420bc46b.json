{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Shahnoor Khalidi\\\\Desktop\\\\test\\\\test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\Shahnoor Khalidi\\\\Desktop\\\\test\\\\test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Shahnoor Khalidi\\\\Desktop\\\\test\\\\test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Shahnoor Khalidi\\\\Desktop\\\\test\\\\test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Shahnoor Khalidi\\\\Desktop\\\\test\\\\test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Shahnoor Khalidi\\\\Desktop\\\\test\\\\test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Shahnoor Khalidi\\\\Desktop\\\\test\\\\test\\\\src\\\\component\\\\Chairman_Framework\\\\clo\\\\POSTCLO.js\";\nimport React, { Component } from \"react\";\nimport Select from \"react-select\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { addClos } from \"../../../actions/clos\";\nimport { getPlos } from \"../../../actions/plos\";\nimport { getCongitive } from \"../../../actions/chairman_framework_actions/cognitive\";\nimport { getAffective } from \"../../../actions/chairman_framework_actions/affectives\";\nexport var POSTCLO =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(POSTCLO, _Component);\n\n  function POSTCLO() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, POSTCLO);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(POSTCLO)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      code: \"\",\n      description: \"\",\n      plos: null,\n      cognitives: null,\n      affectives: null\n    };\n\n    _this.onChangeplos = function (selected) {\n      console.log(selected);\n\n      _this.setState({\n        plos: selected\n      });\n    };\n\n    _this.onChangecognitives = function (selected) {\n      console.log(selected);\n\n      _this.setState({\n        cognitives: selected\n      });\n    };\n\n    _this.onChangeaffectives = function (selected) {\n      console.log(selected);\n\n      _this.setState({\n        affectives: selected\n      });\n    };\n\n    _this.onChange = function (e) {\n      return _this.setState(_defineProperty({}, e.target.name, e.target.value));\n    };\n\n    _this.onSubmit = function (e) {\n      e.preventDefault();\n      var _this$state = _this.state,\n          code = _this$state.code,\n          description = _this$state.description,\n          plos = _this$state.plos,\n          cognitives = _this$state.cognitives,\n          affectives = _this$state.affectives;\n      var clo = {\n        code: code,\n        description: description,\n        plos: plos,\n        cognitives: cognitives,\n        affectives: affectives\n      };\n      clo.plos = [];\n      clo.cognitives = [];\n      clo.affectives = [];\n\n      for (var i in plos) {\n        clo.plos.push(plos[i].value);\n      }\n\n      for (var _i in plos) {\n        clo.cognitives.push(cognitives[_i].value);\n      }\n\n      for (var _i2 in plos) {\n        clo.affectives.push(affectives[_i2].value);\n      }\n\n      _this.props.addClos(clo);\n    };\n\n    return _this;\n  }\n\n  _createClass(POSTCLO, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getPlos();\n      this.props.getCongitive();\n      this.props.getAffective();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          code = _this$state2.code,\n          description = _this$state2.description,\n          plos = _this$state2.plos,\n          cognitives = _this$state2.cognitives,\n          affectives = _this$state2.affectives;\n      var opt = [];\n      console.log(this.props.plos.length);\n\n      if (this.props.plos.length > 0) {\n        for (var i in this.props.plos) {\n          opt.push({\n            value: this.props.plos[i].id,\n            label: this.props.plos[i].code\n          });\n        }\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Add CLO\"), React.createElement(\"form\", {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"code\"), React.createElement(\"input\", {\n        className: \"form-control\",\n        type: \"text\",\n        name: \"code\",\n        onChange: this.onChange,\n        value: code,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"Description\"), React.createElement(\"input\", {\n        className: \"form-control\",\n        type: \"text\",\n        name: \"description\",\n        onChange: this.onChange,\n        value: description,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"Select PLO\"), React.createElement(Select, {\n        value: plos,\n        onChange: this.onChangeplos,\n        options: opt,\n        isMulti: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Submit\"))));\n    }\n  }]);\n\n  return POSTCLO;\n}(Component);\nPOSTCLO.propTypes = {\n  plos: PropTypes.func.isRequired,\n  getPlos: PropTypes.func.isRequired,\n  getCongitive: PropTypes.func.isRequired,\n  getAffective: PropTypes.func.isRequired,\n  addClo: PropTypes.func.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    plos: state.plos.plos,\n    cognitives: state.cognitives.cognitives,\n    affectives: state.affectives.affectives\n  };\n};\n\nexport default connect(mapStateToProps, {\n  addClos: addClos,\n  getPlos: getPlos,\n  getCongitive: getCongitive,\n  getAffective: getAffective\n})(POSTCLO);","map":{"version":3,"sources":["C:/Users/Shahnoor Khalidi/Desktop/test/test/src/component/Chairman_Framework/clo/POSTCLO.js"],"names":["React","Component","Select","connect","PropTypes","addClos","getPlos","getCongitive","getAffective","POSTCLO","state","code","description","plos","cognitives","affectives","onChangeplos","selected","console","log","setState","onChangecognitives","onChangeaffectives","onChange","e","target","name","value","onSubmit","preventDefault","clo","i","push","props","opt","length","id","label","propTypes","func","isRequired","addClo","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Select from \"react-select\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { addClos } from \"../../../actions/clos\";\r\nimport { getPlos } from \"../../../actions/plos\";\r\nimport { getCongitive } from \"../../../actions/chairman_framework_actions/cognitive\";\r\nimport { getAffective } from \"../../../actions/chairman_framework_actions/affectives\";\r\n\r\nexport class POSTCLO extends Component {\r\n  state = {\r\n    code: \"\",\r\n    description: \"\",\r\n    plos: null,\r\n    cognitives: null,\r\n    affectives: null\r\n  };\r\n  static propTypes = {\r\n    plos: PropTypes.func.isRequired,\r\n    getPlos: PropTypes.func.isRequired,\r\n    getCongitive: PropTypes.func.isRequired,\r\n    getAffective: PropTypes.func.isRequired,\r\n    addClo: PropTypes.func.isRequired\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.getPlos();\r\n    this.props.getCongitive();\r\n    this.props.getAffective();\r\n  }\r\n  onChangeplos = selected => {\r\n    console.log(selected);\r\n    this.setState({\r\n      plos: selected\r\n    });\r\n  };\r\n  onChangecognitives = selected => {\r\n    console.log(selected);\r\n    this.setState({\r\n      cognitives: selected\r\n    });\r\n  };\r\n  onChangeaffectives = selected => {\r\n    console.log(selected);\r\n    this.setState({\r\n      affectives: selected\r\n    });\r\n  };\r\n  onChange = e =>\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    const { code, description, plos, cognitives, affectives } = this.state;\r\n    const clo = {\r\n      code,\r\n      description,\r\n      plos,\r\n      cognitives,\r\n      affectives\r\n    };\r\n    clo.plos = [];\r\n    clo.cognitives = [];\r\n    clo.affectives = [];\r\n    for (let i in plos) {\r\n      clo.plos.push(plos[i].value);\r\n    }\r\n    for (let i in plos) {\r\n      clo.cognitives.push(cognitives[i].value);\r\n    }\r\n    for (let i in plos) {\r\n      clo.affectives.push(affectives[i].value);\r\n    }\r\n    this.props.addClos(clo);\r\n  };\r\n  render() {\r\n    const { code, description, plos, cognitives, affectives } = this.state;\r\n    let opt = [];\r\n    console.log(this.props.plos.length);\r\n\r\n    if (this.props.plos.length > 0) {\r\n      for (let i in this.props.plos) {\r\n        opt.push({\r\n          value: this.props.plos[i].id,\r\n          label: this.props.plos[i].code\r\n        });\r\n      }\r\n    }\r\n    return (\r\n      <div>\r\n        <h1>Add CLO</h1>\r\n        <form onSubmit={this.onSubmit}>\r\n          <div className=\"form-group\">\r\n            <label>code</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              name=\"code\"\r\n              onChange={this.onChange}\r\n              value={code}\r\n            ></input>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>Description</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              name=\"description\"\r\n              onChange={this.onChange}\r\n              value={description}\r\n            ></input>\r\n            <label>Select PLO</label>\r\n            <Select\r\n              value={plos}\r\n              onChange={this.onChangeplos}\r\n              options={opt}\r\n              isMulti\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <button type=\"submit\" className=\"btn btn-primary\">\r\n              Submit\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  plos: state.plos.plos,\r\n  cognitives: state.cognitives.cognitives,\r\n  affectives: state.affectives.affectives\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  addClos,\r\n  getPlos,\r\n  getCongitive,\r\n  getAffective\r\n})(POSTCLO);\r\n"]},"metadata":{},"sourceType":"module"}