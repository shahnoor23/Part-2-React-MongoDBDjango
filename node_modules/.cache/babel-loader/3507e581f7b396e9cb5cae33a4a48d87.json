{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport Tooltip from '../tooltip';\nimport Icon from '../icon';\nimport Button from '../button';\nimport injectLocale from '../locale-provider/injectLocale';\n\nvar Popconfirm = function (_React$Component) {\n  _inherits(Popconfirm, _React$Component);\n\n  function Popconfirm(props) {\n    _classCallCheck(this, Popconfirm);\n\n    var _this = _possibleConstructorReturn(this, (Popconfirm.__proto__ || Object.getPrototypeOf(Popconfirm)).call(this, props));\n\n    _this.onConfirm = function (e) {\n      _this.setVisible(false);\n\n      var onConfirm = _this.props.onConfirm;\n\n      if (onConfirm) {\n        onConfirm.call(_this, e);\n      }\n    };\n\n    _this.onCancel = function (e) {\n      _this.setVisible(false);\n\n      var onCancel = _this.props.onCancel;\n\n      if (onCancel) {\n        onCancel.call(_this, e);\n      }\n    };\n\n    _this.onVisibleChange = function (visible) {\n      _this.setVisible(visible);\n    };\n\n    _this.state = {\n      visible: props.visible\n    };\n    return _this;\n  }\n\n  _createClass(Popconfirm, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if ('visible' in nextProps) {\n        this.setState({\n          visible: nextProps.visible\n        });\n      }\n    }\n  }, {\n    key: 'getPopupDomNode',\n    value: function getPopupDomNode() {\n      return this.refs.tooltip.getPopupDomNode();\n    }\n  }, {\n    key: 'setVisible',\n    value: function setVisible(visible) {\n      var props = this.props;\n\n      if (!('visible' in props)) {\n        this.setState({\n          visible: visible\n        });\n      }\n\n      var onVisibleChange = props.onVisibleChange;\n\n      if (onVisibleChange) {\n        onVisibleChange(visible);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _a = this.props,\n          prefixCls = _a.prefixCls,\n          title = _a.title,\n          placement = _a.placement,\n          okText = _a.okText,\n          okType = _a.okType,\n          cancelText = _a.cancelText,\n          restProps = __rest(_a, [\"prefixCls\", \"title\", \"placement\", \"okText\", \"okType\", \"cancelText\"]);\n\n      var popconfirmLocale = this.getLocale();\n      var overlay = React.createElement('div', null, React.createElement('div', {\n        className: prefixCls + '-inner-content'\n      }, React.createElement('div', {\n        className: prefixCls + '-message'\n      }, React.createElement(Icon, {\n        type: 'exclamation-circle'\n      }), React.createElement('div', {\n        className: prefixCls + '-message-title'\n      }, title)), React.createElement('div', {\n        className: prefixCls + '-buttons'\n      }, React.createElement(Button, {\n        onClick: this.onCancel,\n        size: 'small'\n      }, cancelText || popconfirmLocale.cancelText), React.createElement(Button, {\n        onClick: this.onConfirm,\n        type: okType,\n        size: 'small'\n      }, okText || popconfirmLocale.okText))));\n      return React.createElement(Tooltip, _extends({}, restProps, {\n        prefixCls: prefixCls,\n        placement: placement,\n        onVisibleChange: this.onVisibleChange,\n        visible: this.state.visible,\n        overlay: overlay,\n        ref: 'tooltip'\n      }));\n    }\n  }]);\n\n  return Popconfirm;\n}(React.Component);\n\nPopconfirm.defaultProps = {\n  prefixCls: 'ant-popover',\n  transitionName: 'zoom-big',\n  placement: 'top',\n  trigger: 'click',\n  okType: 'primary'\n};\nvar injectPopconfirmLocale = injectLocale('Popconfirm', {\n  cancelText: '取消',\n  okText: '确定'\n});\nexport default injectPopconfirmLocale(Popconfirm);","map":null,"metadata":{},"sourceType":"module"}