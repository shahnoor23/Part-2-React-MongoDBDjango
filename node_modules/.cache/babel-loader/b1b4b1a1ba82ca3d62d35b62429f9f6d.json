{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _createReactClass = require('create-react-class');\n\nvar _createReactClass2 = _interopRequireDefault(_createReactClass);\n\nvar _SubPopupMenu = require('./SubPopupMenu');\n\nvar _SubPopupMenu2 = _interopRequireDefault(_SubPopupMenu);\n\nvar _KeyCode = require('rc-util/lib/KeyCode');\n\nvar _KeyCode2 = _interopRequireDefault(_KeyCode);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _util = require('./util');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar guid = 0;\n/* eslint react/no-is-mounted:0 */\n\nvar SubMenu = (0, _createReactClass2[\"default\"])({\n  displayName: 'SubMenu',\n  propTypes: {\n    parentMenu: _propTypes2[\"default\"].object,\n    title: _propTypes2[\"default\"].node,\n    children: _propTypes2[\"default\"].any,\n    selectedKeys: _propTypes2[\"default\"].array,\n    openKeys: _propTypes2[\"default\"].array,\n    onClick: _propTypes2[\"default\"].func,\n    onOpenChange: _propTypes2[\"default\"].func,\n    rootPrefixCls: _propTypes2[\"default\"].string,\n    eventKey: _propTypes2[\"default\"].string,\n    multiple: _propTypes2[\"default\"].bool,\n    active: _propTypes2[\"default\"].bool,\n    onSelect: _propTypes2[\"default\"].func,\n    closeSubMenuOnMouseLeave: _propTypes2[\"default\"].bool,\n    openSubMenuOnMouseEnter: _propTypes2[\"default\"].bool,\n    onDeselect: _propTypes2[\"default\"].func,\n    onDestroy: _propTypes2[\"default\"].func,\n    onItemHover: _propTypes2[\"default\"].func,\n    onMouseEnter: _propTypes2[\"default\"].func,\n    onMouseLeave: _propTypes2[\"default\"].func,\n    onTitleMouseEnter: _propTypes2[\"default\"].func,\n    onTitleMouseLeave: _propTypes2[\"default\"].func,\n    onTitleClick: _propTypes2[\"default\"].func\n  },\n  mixins: [require('./SubMenuStateMixin')],\n  getDefaultProps: function getDefaultProps() {\n    return {\n      onMouseEnter: _util.noop,\n      onMouseLeave: _util.noop,\n      onTitleMouseEnter: _util.noop,\n      onTitleMouseLeave: _util.noop,\n      onTitleClick: _util.noop,\n      title: ''\n    };\n  },\n  getInitialState: function getInitialState() {\n    this.isSubMenu = 1;\n    return {\n      defaultActiveFirst: false\n    };\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    var _props = this.props,\n        onDestroy = _props.onDestroy,\n        eventKey = _props.eventKey,\n        parentMenu = _props.parentMenu;\n\n    if (onDestroy) {\n      onDestroy(eventKey);\n    }\n\n    if (parentMenu.subMenuInstance === this) {\n      this.clearSubMenuTimers();\n    }\n  },\n  onDestroy: function onDestroy(key) {\n    this.props.onDestroy(key);\n  },\n  onKeyDown: function onKeyDown(e) {\n    var keyCode = e.keyCode;\n    var menu = this.menuInstance;\n    var isOpen = this.isOpen();\n\n    if (keyCode === _KeyCode2[\"default\"].ENTER) {\n      this.onTitleClick(e);\n      this.setState({\n        defaultActiveFirst: true\n      });\n      return true;\n    }\n\n    if (keyCode === _KeyCode2[\"default\"].RIGHT) {\n      if (isOpen) {\n        menu.onKeyDown(e);\n      } else {\n        this.triggerOpenChange(true);\n        this.setState({\n          defaultActiveFirst: true\n        });\n      }\n\n      return true;\n    }\n\n    if (keyCode === _KeyCode2[\"default\"].LEFT) {\n      var handled = void 0;\n\n      if (isOpen) {\n        handled = menu.onKeyDown(e);\n      } else {\n        return undefined;\n      }\n\n      if (!handled) {\n        this.triggerOpenChange(false);\n        handled = true;\n      }\n\n      return handled;\n    }\n\n    if (isOpen && (keyCode === _KeyCode2[\"default\"].UP || keyCode === _KeyCode2[\"default\"].DOWN)) {\n      return menu.onKeyDown(e);\n    }\n  },\n  onOpenChange: function onOpenChange(e) {\n    this.props.onOpenChange(e);\n  },\n  onMouseEnter: function onMouseEnter(e) {\n    var props = this.props;\n    this.clearSubMenuLeaveTimer(props.parentMenu.subMenuInstance !== this);\n    props.onMouseEnter({\n      key: props.eventKey,\n      domEvent: e\n    });\n  },\n  onTitleMouseEnter: function onTitleMouseEnter(domEvent) {\n    var props = this.props;\n    var parentMenu = props.parentMenu,\n        key = props.eventKey;\n    var item = this;\n    this.clearSubMenuTitleLeaveTimer(parentMenu.subMenuInstance !== item);\n\n    if (parentMenu.menuItemInstance) {\n      parentMenu.menuItemInstance.clearMenuItemMouseLeaveTimer(true);\n    }\n\n    var openChanges = [];\n\n    if (props.openSubMenuOnMouseEnter) {\n      openChanges.push({\n        key: key,\n        item: item,\n        trigger: 'mouseenter',\n        open: true\n      });\n    }\n\n    props.onItemHover({\n      key: key,\n      item: item,\n      hover: true,\n      trigger: 'mouseenter',\n      openChanges: openChanges\n    });\n    this.setState({\n      defaultActiveFirst: false\n    });\n    props.onTitleMouseEnter({\n      key: key,\n      domEvent: domEvent\n    });\n  },\n  onTitleMouseLeave: function onTitleMouseLeave(e) {\n    var _this = this;\n\n    var props = this.props;\n    var parentMenu = props.parentMenu,\n        eventKey = props.eventKey;\n    parentMenu.subMenuInstance = this;\n\n    parentMenu.subMenuTitleLeaveFn = function () {\n      // leave whole sub tree\n      // still active\n      if (props.mode === 'inline' && props.active) {\n        props.onItemHover({\n          key: eventKey,\n          item: _this,\n          hover: false,\n          trigger: 'mouseleave'\n        });\n      }\n\n      props.onTitleMouseLeave({\n        key: props.eventKey,\n        domEvent: e\n      });\n    };\n\n    parentMenu.subMenuTitleLeaveTimer = setTimeout(parentMenu.subMenuTitleLeaveFn, 100);\n  },\n  onMouseLeave: function onMouseLeave(e) {\n    var _this2 = this;\n\n    var props = this.props;\n    var parentMenu = props.parentMenu,\n        eventKey = props.eventKey;\n    parentMenu.subMenuInstance = this;\n\n    parentMenu.subMenuLeaveFn = function () {\n      // leave whole sub tree\n      // still active\n      if (props.mode !== 'inline') {\n        var isOpen = _this2.isOpen();\n\n        if (isOpen && props.closeSubMenuOnMouseLeave && props.active) {\n          props.onItemHover({\n            key: eventKey,\n            item: _this2,\n            hover: false,\n            trigger: 'mouseleave',\n            openChanges: [{\n              key: eventKey,\n              item: _this2,\n              trigger: 'mouseleave',\n              open: false\n            }]\n          });\n        } else {\n          if (props.active) {\n            props.onItemHover({\n              key: eventKey,\n              item: _this2,\n              hover: false,\n              trigger: 'mouseleave'\n            });\n          }\n\n          if (isOpen && props.closeSubMenuOnMouseLeave) {\n            _this2.triggerOpenChange(false);\n          }\n        }\n      } // trigger mouseleave\n\n\n      props.onMouseLeave({\n        key: eventKey,\n        domEvent: e\n      });\n    }; // prevent popup menu and submenu gap\n\n\n    parentMenu.subMenuLeaveTimer = setTimeout(parentMenu.subMenuLeaveFn, 100);\n  },\n  onTitleClick: function onTitleClick(e) {\n    var props = this.props;\n    props.onTitleClick({\n      key: props.eventKey,\n      domEvent: e\n    });\n\n    if (props.openSubMenuOnMouseEnter) {\n      return;\n    }\n\n    this.triggerOpenChange(!this.isOpen(), 'click');\n    this.setState({\n      defaultActiveFirst: false\n    });\n  },\n  onSubMenuClick: function onSubMenuClick(info) {\n    this.props.onClick(this.addKeyPath(info));\n  },\n  onSelect: function onSelect(info) {\n    this.props.onSelect(info);\n  },\n  onDeselect: function onDeselect(info) {\n    this.props.onDeselect(info);\n  },\n  getPrefixCls: function getPrefixCls() {\n    return this.props.rootPrefixCls + '-submenu';\n  },\n  getActiveClassName: function getActiveClassName() {\n    return this.getPrefixCls() + '-active';\n  },\n  getDisabledClassName: function getDisabledClassName() {\n    return this.getPrefixCls() + '-disabled';\n  },\n  getSelectedClassName: function getSelectedClassName() {\n    return this.getPrefixCls() + '-selected';\n  },\n  getOpenClassName: function getOpenClassName() {\n    return this.props.rootPrefixCls + '-submenu-open';\n  },\n  saveMenuInstance: function saveMenuInstance(c) {\n    this.menuInstance = c;\n  },\n  addKeyPath: function addKeyPath(info) {\n    return (0, _extends3[\"default\"])({}, info, {\n      keyPath: (info.keyPath || []).concat(this.props.eventKey)\n    });\n  },\n  triggerOpenChange: function triggerOpenChange(open, type) {\n    var key = this.props.eventKey;\n    this.onOpenChange({\n      key: key,\n      item: this,\n      trigger: type,\n      open: open\n    });\n  },\n  clearSubMenuTimers: function clearSubMenuTimers() {\n    var callFn = void 0;\n    this.clearSubMenuLeaveTimer(callFn);\n    this.clearSubMenuTitleLeaveTimer(callFn);\n  },\n  clearSubMenuTitleLeaveTimer: function clearSubMenuTitleLeaveTimer() {\n    var callFn = void 0;\n    var parentMenu = this.props.parentMenu;\n\n    if (parentMenu.subMenuTitleLeaveTimer) {\n      clearTimeout(parentMenu.subMenuTitleLeaveTimer);\n      parentMenu.subMenuTitleLeaveTimer = null;\n\n      if (callFn && parentMenu.subMenuTitleLeaveFn) {\n        parentMenu.subMenuTitleLeaveFn();\n      }\n\n      parentMenu.subMenuTitleLeaveFn = null;\n    }\n  },\n  clearSubMenuLeaveTimer: function clearSubMenuLeaveTimer() {\n    var callFn = void 0;\n    var parentMenu = this.props.parentMenu;\n\n    if (parentMenu.subMenuLeaveTimer) {\n      clearTimeout(parentMenu.subMenuLeaveTimer);\n      parentMenu.subMenuLeaveTimer = null;\n\n      if (callFn && parentMenu.subMenuLeaveFn) {\n        parentMenu.subMenuLeaveFn();\n      }\n\n      parentMenu.subMenuLeaveFn = null;\n    }\n  },\n  isChildrenSelected: function isChildrenSelected() {\n    var ret = {\n      find: false\n    };\n    (0, _util.loopMenuItemRecusively)(this.props.children, this.props.selectedKeys, ret);\n    return ret.find;\n  },\n  isOpen: function isOpen() {\n    return this.props.openKeys.indexOf(this.props.eventKey) !== -1;\n  },\n  renderChildren: function renderChildren(children) {\n    var props = this.props;\n    var baseProps = {\n      mode: props.mode === 'horizontal' ? 'vertical' : props.mode,\n      visible: this.isOpen(),\n      level: props.level + 1,\n      inlineIndent: props.inlineIndent,\n      focusable: false,\n      onClick: this.onSubMenuClick,\n      onSelect: this.onSelect,\n      onDeselect: this.onDeselect,\n      onDestroy: this.onDestroy,\n      selectedKeys: props.selectedKeys,\n      eventKey: props.eventKey + '-menu-',\n      openKeys: props.openKeys,\n      openTransitionName: props.openTransitionName,\n      openAnimation: props.openAnimation,\n      onOpenChange: this.onOpenChange,\n      closeSubMenuOnMouseLeave: props.closeSubMenuOnMouseLeave,\n      defaultActiveFirst: this.state.defaultActiveFirst,\n      multiple: props.multiple,\n      prefixCls: props.rootPrefixCls,\n      id: this._menuId,\n      ref: this.saveMenuInstance\n    };\n    return _react2[\"default\"].createElement(_SubPopupMenu2[\"default\"], baseProps, children);\n  },\n  render: function render() {\n    var _classes;\n\n    var isOpen = this.isOpen();\n    this.haveOpen = this.haveOpen || isOpen;\n    var props = this.props;\n    var prefixCls = this.getPrefixCls();\n    var classes = (_classes = {}, (0, _defineProperty3[\"default\"])(_classes, props.className, !!props.className), (0, _defineProperty3[\"default\"])(_classes, prefixCls + '-' + props.mode, 1), _classes);\n    classes[this.getOpenClassName()] = isOpen;\n    classes[this.getActiveClassName()] = props.active;\n    classes[this.getDisabledClassName()] = props.disabled;\n    classes[this.getSelectedClassName()] = this.isChildrenSelected();\n\n    if (!this._menuId) {\n      if (props.eventKey) {\n        this._menuId = props.eventKey + '$Menu';\n      } else {\n        this._menuId = '$__$' + ++guid + '$Menu';\n      }\n    }\n\n    classes[prefixCls] = true;\n    classes[prefixCls + '-' + props.mode] = 1;\n    var titleClickEvents = {};\n    var mouseEvents = {};\n    var titleMouseEvents = {};\n\n    if (!props.disabled) {\n      titleClickEvents = {\n        onClick: this.onTitleClick\n      };\n      mouseEvents = {\n        onMouseLeave: this.onMouseLeave,\n        onMouseEnter: this.onMouseEnter\n      }; // only works in title, not outer li\n\n      titleMouseEvents = {\n        onMouseEnter: this.onTitleMouseEnter,\n        onMouseLeave: this.onTitleMouseLeave\n      };\n    }\n\n    var style = {};\n\n    if (props.mode === 'inline') {\n      style.paddingLeft = props.inlineIndent * props.level;\n    }\n\n    return _react2[\"default\"].createElement('li', (0, _extends3[\"default\"])({\n      className: (0, _classnames2[\"default\"])(classes)\n    }, mouseEvents), _react2[\"default\"].createElement('div', (0, _extends3[\"default\"])({\n      style: style,\n      className: prefixCls + '-title'\n    }, titleMouseEvents, titleClickEvents, {\n      'aria-expanded': isOpen,\n      'aria-owns': this._menuId,\n      'aria-haspopup': 'true',\n      title: typeof props.title === 'string' ? props.title : undefined\n    }), props.title), this.renderChildren(props.children));\n  }\n});\nSubMenu.isSubMenu = 1;\nexports[\"default\"] = SubMenu;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}