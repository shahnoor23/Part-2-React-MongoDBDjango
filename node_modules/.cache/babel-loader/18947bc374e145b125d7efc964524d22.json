{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAllNoChildrenNodes = getAllNoChildrenNodes;\nexports.findNode = findNode;\nexports.getPositionTop = getPositionTop;\nexports.getPositionLeft = getPositionLeft;\n/**\n * get all children from array that each obj has property children\n * @param nodes\n * @returns {Array}\n */\n\nfunction getAllNoChildrenNodes(nodes) {\n  var resultNodes = [];\n\n  if (!(nodes instanceof Array)) {\n    throw new TypeError('param is not valid array type');\n  }\n\n  (function addChildren(nodes) {\n    for (var i = 0; i < nodes.length; i++) {\n      var obj = nodes[i];\n\n      if (!obj) {\n        continue;\n      }\n\n      if (obj.children) {\n        addChildren(obj.children);\n      } else {\n        resultNodes.push(obj);\n      }\n    }\n  })(nodes);\n\n  return resultNodes;\n}\n/**\n * find node from array that has property children and property objProperty\n * @param nodes\n * @param nodeValue\n * @param objProperty\n * @returns {*}\n */\n\n\nfunction findNode(nodes, nodeValue, objProperty) {\n  var result = null;\n\n  if (!(nodes instanceof Array) || !(typeof nodeValue === \"string\" || typeof nodeValue === \"number\") || !(typeof objProperty === \"string\")) {\n    throw new TypeError('params that is not valid type');\n  }\n\n  (function find(nodes, nodeValue) {\n    for (var i = 0; i < nodes.length; i++) {\n      if (result) {\n        break;\n      }\n\n      var obj = nodes[i];\n\n      if (!obj) {\n        continue;\n      }\n\n      if (obj[objProperty].toString() === nodeValue.toString()) {\n        result = obj;\n        break;\n      } else {\n        if (obj.children) {\n          find(obj.children, nodeValue);\n        } else {\n          continue;\n        }\n      }\n    }\n  })(nodes, nodeValue);\n\n  return result;\n}\n\nfunction getPositionTop(divElement) {\n  var actualTop = 0;\n\n  if (divElement) {\n    actualTop = divElement.offsetTop || 0;\n    divElement.paddingTop && (actualTop -= divElement.paddingTop);\n    var current = divElement.offsetParent;\n\n    while (current !== null && current !== undefined) {\n      current.offsetTop && (actualTop += current.offsetTop);\n      current.paddingTop && (actualTop -= current.paddingTop);\n      current = current.offsetParent;\n    }\n  }\n\n  return actualTop;\n}\n\nfunction getPositionLeft(divElement) {\n  var actualLeft = 0;\n\n  if (divElement) {\n    actualLeft = divElement.offsetLeft || 0;\n    divElement.paddingLeft && (actualLeft -= divElement.paddingLeft);\n    var current = divElement.offsetParent;\n\n    while (current !== null && current !== undefined) {\n      current.offsetLeft && (actualLeft += current.offsetLeft);\n      current.paddingLeft && (actualLeft -= current.paddingLeft);\n      current = current.offsetParent;\n    }\n  }\n\n  return actualLeft;\n}","map":null,"metadata":{},"sourceType":"script"}