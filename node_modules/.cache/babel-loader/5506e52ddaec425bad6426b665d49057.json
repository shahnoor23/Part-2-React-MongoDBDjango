{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nvar classNames = require('classnames');\n\nfunction noop() {}\n\nvar Switch = function (_Component) {\n  _inherits(Switch, _Component);\n\n  function Switch(props) {\n    _classCallCheck(this, Switch);\n\n    var _this = _possibleConstructorReturn(this, (Switch.__proto__ || Object.getPrototypeOf(Switch)).call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var checked = false;\n\n    if ('checked' in props) {\n      checked = !!props.checked;\n    } else {\n      checked = !!props.defaultChecked;\n    }\n\n    _this.state = {\n      checked: checked\n    };\n    return _this;\n  }\n\n  _createClass(Switch, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if ('checked' in nextProps) {\n        this.setState({\n          checked: !!nextProps.checked\n        });\n      }\n    }\n  }, {\n    key: 'setChecked',\n    value: function setChecked(checked) {\n      if (this.props.disabled) {\n        return;\n      }\n\n      if (!('checked' in this.props)) {\n        this.setState({\n          checked: checked\n        });\n      }\n\n      this.props.onChange(checked);\n    } // Handle auto focus when click switch in Chrome\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _classNames;\n\n      var _props = this.props,\n          className = _props.className,\n          prefixCls = _props.prefixCls,\n          disabled = _props.disabled,\n          checkedChildren = _props.checkedChildren,\n          tabIndex = _props.tabIndex,\n          unCheckedChildren = _props.unCheckedChildren,\n          restProps = _objectWithoutProperties(_props, ['className', 'prefixCls', 'disabled', 'checkedChildren', 'tabIndex', 'unCheckedChildren']);\n\n      var checked = this.state.checked;\n      var switchTabIndex = disabled ? -1 : tabIndex || 0;\n      var switchClassName = classNames((_classNames = {}, _defineProperty(_classNames, className, !!className), _defineProperty(_classNames, prefixCls, true), _defineProperty(_classNames, prefixCls + '-checked', checked), _defineProperty(_classNames, prefixCls + '-disabled', disabled), _classNames));\n      return React.createElement('span', _extends({}, restProps, {\n        className: switchClassName,\n        tabIndex: switchTabIndex,\n        ref: this.saveNode,\n        onKeyDown: this.handleKeyDown,\n        onClick: this.toggle,\n        onMouseUp: this.handleMouseUp\n      }), React.createElement('span', {\n        className: prefixCls + '-inner'\n      }, checked ? checkedChildren : unCheckedChildren));\n    }\n  }]);\n\n  return Switch;\n}(Component);\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this.toggle = function () {\n    var onClick = _this2.props.onClick;\n    var checked = !_this2.state.checked;\n\n    _this2.setChecked(checked);\n\n    onClick(checked);\n  };\n\n  this.handleKeyDown = function (e) {\n    if (e.keyCode === 37) {\n      // Left\n      _this2.setChecked(false);\n    } else if (e.keyCode === 39) {\n      // Right\n      _this2.setChecked(true);\n    } else if (e.keyCode === 32 || e.keyCode === 13) {\n      // Space, Enter\n      _this2.toggle();\n    }\n  };\n\n  this.handleMouseUp = function (e) {\n    if (_this2.node) {\n      _this2.node.blur();\n    }\n\n    if (_this2.props.onMouseUp) {\n      _this2.props.onMouseUp(e);\n    }\n  };\n\n  this.saveNode = function (node) {\n    _this2.node = node;\n  };\n};\n\nSwitch.propTypes = {\n  className: PropTypes.string,\n  prefixCls: PropTypes.string,\n  disabled: PropTypes.bool,\n  checkedChildren: PropTypes.any,\n  unCheckedChildren: PropTypes.any,\n  onChange: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  onClick: PropTypes.func,\n  tabIndex: PropTypes.number,\n  checked: PropTypes.bool,\n  defaultChecked: PropTypes.bool\n};\nSwitch.defaultProps = {\n  prefixCls: 'rc-switch',\n  checkedChildren: null,\n  unCheckedChildren: null,\n  className: '',\n  defaultChecked: false,\n  onChange: noop,\n  onClick: noop\n};\nexport default Switch;","map":null,"metadata":{},"sourceType":"module"}