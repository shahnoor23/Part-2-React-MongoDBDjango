{"ast":null,"code":"import _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // matchMedia polyfill for\n// https://github.com/WickyNilliams/enquire.js/issues/82\n\n\nif (typeof window !== 'undefined') {\n  var matchMediaPolyfill = function matchMediaPolyfill(mediaQuery) {\n    return {\n      media: mediaQuery,\n      matches: false,\n      addListener: function addListener() {},\n      removeListener: function removeListener() {}\n    };\n  };\n\n  window.matchMedia = window.matchMedia || matchMediaPolyfill;\n}\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport PropTypes from 'prop-types';\nimport Icon from '../icon';\nvar dimensionMap = {\n  xs: '480px',\n  sm: '768px',\n  md: '992px',\n  lg: '1200px',\n  xl: '1600px'\n};\n\nvar generateId = function () {\n  var i = 0;\n  return function () {\n    var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    i += 1;\n    return '' + prefix + i;\n  };\n}();\n\nvar Sider = function (_React$Component) {\n  _inherits(Sider, _React$Component);\n\n  function Sider(props) {\n    _classCallCheck(this, Sider);\n\n    var _this = _possibleConstructorReturn(this, (Sider.__proto__ || Object.getPrototypeOf(Sider)).call(this, props));\n\n    _this.responsiveHandler = function (mql) {\n      _this.setState({\n        below: mql.matches\n      });\n\n      if (_this.state.collapsed !== mql.matches) {\n        _this.setCollapsed(mql.matches, 'responsive');\n      }\n    };\n\n    _this.setCollapsed = function (collapsed, type) {\n      if (!('collapsed' in _this.props)) {\n        _this.setState({\n          collapsed: collapsed\n        });\n      }\n\n      var onCollapse = _this.props.onCollapse;\n\n      if (onCollapse) {\n        onCollapse(collapsed, type);\n      }\n    };\n\n    _this.toggle = function () {\n      var collapsed = !_this.state.collapsed;\n\n      _this.setCollapsed(collapsed, 'clickTrigger');\n    };\n\n    _this.belowShowChange = function () {\n      _this.setState({\n        belowShow: !_this.state.belowShow\n      });\n    };\n\n    _this.uniqueId = generateId('ant-sider-');\n    var matchMedia = void 0;\n\n    if (typeof window !== 'undefined') {\n      matchMedia = window.matchMedia;\n    }\n\n    if (matchMedia && props.breakpoint && props.breakpoint in dimensionMap) {\n      _this.mql = matchMedia('(max-width: ' + dimensionMap[props.breakpoint] + ')');\n    }\n\n    var collapsed = void 0;\n\n    if ('collapsed' in props) {\n      collapsed = props.collapsed;\n    } else {\n      collapsed = props.defaultCollapsed;\n    }\n\n    _this.state = {\n      collapsed: collapsed,\n      below: false\n    };\n    return _this;\n  }\n\n  _createClass(Sider, [{\n    key: 'getChildContext',\n    value: function getChildContext() {\n      return {\n        siderCollapsed: this.state.collapsed\n      };\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if ('collapsed' in nextProps) {\n        this.setState({\n          collapsed: nextProps.collapsed\n        });\n      }\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (this.mql) {\n        this.mql.addListener(this.responsiveHandler);\n        this.responsiveHandler(this.mql);\n      }\n\n      if (this.context.siderHook) {\n        this.context.siderHook.addSider(this.uniqueId);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.mql) {\n        this.mql.removeListener(this.responsiveHandler);\n      }\n\n      if (this.context.siderHook) {\n        this.context.siderHook.removeSider(this.uniqueId);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _classNames;\n\n      var _a = this.props,\n          prefixCls = _a.prefixCls,\n          className = _a.className,\n          collapsible = _a.collapsible,\n          reverseArrow = _a.reverseArrow,\n          trigger = _a.trigger,\n          style = _a.style,\n          width = _a.width,\n          collapsedWidth = _a.collapsedWidth,\n          others = __rest(_a, [\"prefixCls\", \"className\", \"collapsible\", \"reverseArrow\", \"trigger\", \"style\", \"width\", \"collapsedWidth\"]);\n\n      var divProps = omit(others, ['collapsed', 'defaultCollapsed', 'onCollapse', 'breakpoint']);\n      var siderWidth = this.state.collapsed ? collapsedWidth : width; // special trigger when collapsedWidth == 0\n\n      var zeroWidthTrigger = collapsedWidth === 0 || collapsedWidth === '0' ? React.createElement('span', {\n        onClick: this.toggle,\n        className: prefixCls + '-zero-width-trigger'\n      }, React.createElement(Icon, {\n        type: 'bars'\n      })) : null;\n      var iconObj = {\n        'expanded': reverseArrow ? React.createElement(Icon, {\n          type: 'right'\n        }) : React.createElement(Icon, {\n          type: 'left'\n        }),\n        'collapsed': reverseArrow ? React.createElement(Icon, {\n          type: 'left'\n        }) : React.createElement(Icon, {\n          type: 'right'\n        })\n      };\n      var status = this.state.collapsed ? 'collapsed' : 'expanded';\n      var defaultTrigger = iconObj[status];\n      var triggerDom = trigger !== null ? zeroWidthTrigger || React.createElement('div', {\n        className: prefixCls + '-trigger',\n        onClick: this.toggle,\n        style: {\n          width: siderWidth\n        }\n      }, trigger || defaultTrigger) : null;\n\n      var divStyle = _extends({}, style, {\n        flex: '0 0 ' + siderWidth + 'px',\n        maxWidth: siderWidth + 'px',\n        minWidth: siderWidth + 'px',\n        width: siderWidth + 'px'\n      });\n\n      var siderCls = classNames(className, prefixCls, (_classNames = {}, _defineProperty(_classNames, prefixCls + '-collapsed', !!this.state.collapsed), _defineProperty(_classNames, prefixCls + '-has-trigger', !!trigger), _defineProperty(_classNames, prefixCls + '-below', !!this.state.below), _defineProperty(_classNames, prefixCls + '-zero-width', siderWidth === 0 || siderWidth === '0'), _classNames));\n      return React.createElement('div', _extends({\n        className: siderCls\n      }, divProps, {\n        style: divStyle\n      }), React.createElement('div', {\n        className: prefixCls + '-children'\n      }, this.props.children), collapsible || this.state.below && zeroWidthTrigger ? triggerDom : null);\n    }\n  }]);\n\n  return Sider;\n}(React.Component);\n\nexport default Sider;\nSider.__ANT_LAYOUT_SIDER = true;\nSider.defaultProps = {\n  prefixCls: 'ant-layout-sider',\n  collapsible: false,\n  defaultCollapsed: false,\n  reverseArrow: false,\n  width: 200,\n  collapsedWidth: 64,\n  style: {}\n};\nSider.childContextTypes = {\n  siderCollapsed: PropTypes.bool\n};\nSider.contextTypes = {\n  siderHook: PropTypes.object\n};","map":null,"metadata":{},"sourceType":"module"}