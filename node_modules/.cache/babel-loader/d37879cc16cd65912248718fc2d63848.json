{"ast":null,"code":"import _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _extends from 'babel-runtime/helpers/extends';\nimport React, { cloneElement } from 'react';\nimport classnames from 'classnames';\nimport warning from 'warning';\nimport { getDataAttr } from './utils';\nexport default {\n  getDefaultProps: function getDefaultProps() {\n    return {\n      styles: {}\n    };\n  },\n  onTabClick: function onTabClick(key) {\n    this.props.onTabClick(key);\n  },\n  getTabs: function getTabs() {\n    var _this = this;\n\n    var _props = this.props,\n        children = _props.panels,\n        activeKey = _props.activeKey,\n        prefixCls = _props.prefixCls;\n    var rst = [];\n    React.Children.forEach(children, function (child) {\n      if (!child) {\n        return;\n      }\n\n      var key = child.key;\n      var cls = activeKey === key ? prefixCls + '-tab-active' : '';\n      cls += ' ' + prefixCls + '-tab';\n      var events = {};\n\n      if (child.props.disabled) {\n        cls += ' ' + prefixCls + '-tab-disabled';\n      } else {\n        events = {\n          onClick: _this.onTabClick.bind(_this, key)\n        };\n      }\n\n      var ref = {};\n\n      if (activeKey === key) {\n        ref.ref = _this.saveRef('activeTab');\n      }\n\n      warning('tab' in child.props, 'There must be `tab` property on children of Tabs.');\n      rst.push(React.createElement('div', _extends({\n        role: 'tab',\n        'aria-disabled': child.props.disabled ? 'true' : 'false',\n        'aria-selected': activeKey === key ? 'true' : 'false'\n      }, events, {\n        className: cls,\n        key: key\n      }, ref), child.props.tab));\n    });\n    return rst;\n  },\n  getRootNode: function getRootNode(contents) {\n    var _props2 = this.props,\n        prefixCls = _props2.prefixCls,\n        onKeyDown = _props2.onKeyDown,\n        className = _props2.className,\n        extraContent = _props2.extraContent,\n        style = _props2.style,\n        tabBarPosition = _props2.tabBarPosition,\n        restProps = _objectWithoutProperties(_props2, ['prefixCls', 'onKeyDown', 'className', 'extraContent', 'style', 'tabBarPosition']);\n\n    var cls = classnames(prefixCls + '-bar', _defineProperty({}, className, !!className));\n    var topOrBottom = tabBarPosition === 'top' || tabBarPosition === 'bottom';\n    var tabBarExtraContentStyle = topOrBottom ? {\n      float: 'right'\n    } : {};\n    var extraContentStyle = extraContent && extraContent.props ? extraContent.props.style : {};\n    var children = contents;\n\n    if (extraContent) {\n      children = [cloneElement(extraContent, {\n        key: 'extra',\n        style: _extends({}, tabBarExtraContentStyle, extraContentStyle)\n      }), cloneElement(contents, {\n        key: 'content'\n      })];\n      children = topOrBottom ? children : children.reverse();\n    }\n\n    return React.createElement('div', _extends({\n      role: 'tablist',\n      className: cls,\n      tabIndex: '0',\n      ref: this.saveRef('root'),\n      onKeyDown: onKeyDown,\n      style: style\n    }, getDataAttr(restProps)), children);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}