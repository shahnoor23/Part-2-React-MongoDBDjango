{"ast":null,"code":"import _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport RcUpload from 'rc-upload';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport UploadList from './UploadList';\nimport { T, fileToObject, genPercentAdd, getFileItem, removeFileItem } from './utils';\nvar defaultLocale = {\n  uploading: '文件上传中',\n  removeFile: '删除文件',\n  uploadError: '上传错误',\n  previewFile: '预览文件'\n};\n\nvar Upload = function (_React$Component) {\n  _inherits(Upload, _React$Component);\n\n  function Upload(props) {\n    _classCallCheck(this, Upload);\n\n    var _this = _possibleConstructorReturn(this, (Upload.__proto__ || Object.getPrototypeOf(Upload)).call(this, props));\n\n    _this.onStart = function (file) {\n      var targetItem = void 0;\n\n      var nextFileList = _this.state.fileList.concat();\n\n      if (file.length > 0) {\n        targetItem = file.map(function (f) {\n          var fileObject = fileToObject(f);\n          fileObject.status = 'uploading';\n          return fileObject;\n        });\n        nextFileList = nextFileList.concat(targetItem);\n      } else {\n        targetItem = fileToObject(file);\n        targetItem.status = 'uploading';\n        nextFileList.push(targetItem);\n      }\n\n      _this.onChange({\n        file: targetItem,\n        fileList: nextFileList\n      }); // fix ie progress\n\n\n      if (!window.FormData) {\n        _this.autoUpdateProgress(0, targetItem);\n      }\n    };\n\n    _this.onSuccess = function (response, file) {\n      _this.clearProgressTimer();\n\n      try {\n        if (typeof response === 'string') {\n          response = JSON.parse(response);\n        }\n      } catch (e) {}\n\n      var fileList = _this.state.fileList;\n      var targetItem = getFileItem(file, fileList); // removed\n\n      if (!targetItem) {\n        return;\n      }\n\n      targetItem.status = 'done';\n      targetItem.response = response;\n\n      _this.onChange({\n        file: _extends({}, targetItem),\n        fileList: fileList\n      });\n    };\n\n    _this.onProgress = function (e, file) {\n      var fileList = _this.state.fileList;\n      var targetItem = getFileItem(file, fileList); // removed\n\n      if (!targetItem) {\n        return;\n      }\n\n      targetItem.percent = e.percent;\n\n      _this.onChange({\n        event: e,\n        file: _extends({}, targetItem),\n        fileList: _this.state.fileList\n      });\n    };\n\n    _this.onError = function (error, response, file) {\n      _this.clearProgressTimer();\n\n      var fileList = _this.state.fileList;\n      var targetItem = getFileItem(file, fileList); // removed\n\n      if (!targetItem) {\n        return;\n      }\n\n      targetItem.error = error;\n      targetItem.response = response;\n      targetItem.status = 'error';\n\n      _this.onChange({\n        file: _extends({}, targetItem),\n        fileList: fileList\n      });\n    };\n\n    _this.handleManualRemove = function (file) {\n      _this.refs.upload.abort(file);\n\n      file.status = 'removed'; // eslint-disable-line\n\n      _this.handleRemove(file);\n    };\n\n    _this.onChange = function (info) {\n      var updateState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (!('fileList' in _this.props) && updateState) {\n        _this.setState({\n          fileList: info.fileList\n        });\n      }\n\n      var onChange = _this.props.onChange;\n\n      if (onChange) {\n        onChange(info);\n      }\n    };\n\n    _this.onFileDrop = function (e) {\n      _this.setState({\n        dragState: e.type\n      });\n    };\n\n    _this.beforeUpload = function (file, fileList) {\n      if (!_this.props.beforeUpload) {\n        return true;\n      }\n\n      var result = _this.props.beforeUpload(file, fileList);\n\n      if (result === false) {\n        _this.onChange({\n          file: file,\n          fileList: fileList\n        }, false);\n\n        return false;\n      } else if (result && result.then) {\n        return result;\n      }\n\n      return true;\n    };\n\n    _this.state = {\n      fileList: props.fileList || props.defaultFileList || [],\n      dragState: 'drop'\n    };\n    return _this;\n  }\n\n  _createClass(Upload, [{\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.clearProgressTimer();\n    }\n  }, {\n    key: 'getLocale',\n    value: function getLocale() {\n      var locale = {};\n\n      if (this.context.antLocale && this.context.antLocale.Upload) {\n        locale = this.context.antLocale.Upload;\n      }\n\n      return _extends({}, defaultLocale, locale, this.props.locale);\n    }\n  }, {\n    key: 'autoUpdateProgress',\n    value: function autoUpdateProgress(_, file) {\n      var _this2 = this;\n\n      var getPercent = genPercentAdd();\n      var curPercent = 0;\n      this.clearProgressTimer();\n      this.progressTimer = setInterval(function () {\n        curPercent = getPercent(curPercent);\n\n        _this2.onProgress({\n          percent: curPercent\n        }, file);\n      }, 200);\n    }\n  }, {\n    key: 'handleRemove',\n    value: function handleRemove(file) {\n      var _this3 = this;\n\n      var onRemove = this.props.onRemove;\n      Promise.resolve(typeof onRemove === 'function' ? onRemove(file) : onRemove).then(function (ret) {\n        // Prevent removing file\n        if (ret === false) {\n          return;\n        }\n\n        var removedFileList = removeFileItem(file, _this3.state.fileList);\n\n        if (removedFileList) {\n          _this3.onChange({\n            file: file,\n            fileList: removedFileList\n          });\n        }\n      });\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if ('fileList' in nextProps) {\n        this.setState({\n          fileList: nextProps.fileList || []\n        });\n      }\n    }\n  }, {\n    key: 'clearProgressTimer',\n    value: function clearProgressTimer() {\n      clearInterval(this.progressTimer);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _classNames2;\n\n      var _props = this.props,\n          _props$prefixCls = _props.prefixCls,\n          prefixCls = _props$prefixCls === undefined ? '' : _props$prefixCls,\n          showUploadList = _props.showUploadList,\n          listType = _props.listType,\n          onPreview = _props.onPreview,\n          type = _props.type,\n          disabled = _props.disabled,\n          children = _props.children,\n          className = _props.className;\n\n      var rcUploadProps = _extends({\n        onStart: this.onStart,\n        onError: this.onError,\n        onProgress: this.onProgress,\n        onSuccess: this.onSuccess\n      }, this.props, {\n        beforeUpload: this.beforeUpload\n      });\n\n      delete rcUploadProps.className;\n      var showRemoveIcon = showUploadList.showRemoveIcon,\n          showPreviewIcon = showUploadList.showPreviewIcon;\n      var uploadList = showUploadList ? React.createElement(UploadList, {\n        listType: listType,\n        items: this.state.fileList,\n        onPreview: onPreview,\n        onRemove: this.handleManualRemove,\n        showRemoveIcon: showRemoveIcon,\n        showPreviewIcon: showPreviewIcon,\n        locale: this.getLocale()\n      }) : null;\n\n      if (type === 'drag') {\n        var _classNames;\n\n        var dragCls = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, prefixCls + '-drag', true), _defineProperty(_classNames, prefixCls + '-drag-uploading', this.state.fileList.some(function (file) {\n          return file.status === 'uploading';\n        })), _defineProperty(_classNames, prefixCls + '-drag-hover', this.state.dragState === 'dragover'), _defineProperty(_classNames, prefixCls + '-disabled', disabled), _classNames));\n        return React.createElement('span', {\n          className: className\n        }, React.createElement('div', {\n          className: dragCls,\n          onDrop: this.onFileDrop,\n          onDragOver: this.onFileDrop,\n          onDragLeave: this.onFileDrop\n        }, React.createElement(RcUpload, _extends({}, rcUploadProps, {\n          ref: 'upload',\n          className: prefixCls + '-btn'\n        }), React.createElement('div', {\n          className: prefixCls + '-drag-container'\n        }, children))), uploadList);\n      }\n\n      var uploadButtonCls = classNames(prefixCls, (_classNames2 = {}, _defineProperty(_classNames2, prefixCls + '-select', true), _defineProperty(_classNames2, prefixCls + '-select-' + listType, true), _defineProperty(_classNames2, prefixCls + '-disabled', disabled), _classNames2));\n      var uploadButton = React.createElement('div', {\n        className: uploadButtonCls,\n        style: {\n          display: children ? '' : 'none'\n        }\n      }, React.createElement(RcUpload, _extends({}, rcUploadProps, {\n        ref: 'upload'\n      })));\n\n      if (listType === 'picture-card') {\n        return React.createElement('span', {\n          className: className\n        }, uploadList, uploadButton);\n      }\n\n      return React.createElement('span', {\n        className: className\n      }, uploadButton, uploadList);\n    }\n  }]);\n\n  return Upload;\n}(React.Component);\n\nexport default Upload;\nUpload.defaultProps = {\n  prefixCls: 'ant-upload',\n  type: 'select',\n  multiple: false,\n  action: '',\n  data: {},\n  accept: '',\n  beforeUpload: T,\n  showUploadList: true,\n  listType: 'text',\n  className: '',\n  disabled: false,\n  supportServerRender: true\n};\nUpload.contextTypes = {\n  antLocale: PropTypes.object\n};","map":null,"metadata":{},"sourceType":"module"}