{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport DropDownBase from '../common/DropDownBase';\nimport { guid, classNames, FloatingLabel, Keys } from '@progress/kendo-react-common';\nimport { areSame, itemIndexStartsWith, getItemIndexByText, getItemValue, isPresent, suggestValue } from '../common/utils';\nimport SearchBar from '../common/SearchBar';\nimport ListContainer from '../common/ListContainer';\nimport List from '../common/List';\nvar VALIDATION_MESSAGE = 'Please enter a valid value!';\n/**\n * Represents the [KendoReact ComboBox component]({% slug overview_combobox %}).\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *    combobox = null;\n *    render() {\n *       return (\n *          <div>\n *              <ComboBox\n *                  data={[ \"Albania\", \"Andorra\", \"Austria\", \"Belarus\" ]}\n *                  ref={component => this.combobox = component}\n *              />\n *              <button onClick={() => alert(this.combobox.value)}>alert value</button>\n *          </div>\n *       );\n *    }\n * }\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nvar ComboBox =\n/** @class */\nfunction (_super) {\n  __extends(ComboBox, _super);\n\n  function ComboBox() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * @hidden\n     */\n\n\n    _this.state = {};\n    _this.base = new DropDownBase(_this);\n    _this._inputId = guid();\n    _this._suggested = '';\n    /**\n     * @hidden\n     */\n\n    _this.handleItemSelect = function (index, state) {\n      var _a = _this.props,\n          _b = _a.data,\n          data = _b === void 0 ? [] : _b,\n          virtual = _a.virtual,\n          dataItemKey = _a.dataItemKey;\n      var skip = virtual ? virtual.skip : 0;\n      var item = data[index - skip];\n      var newSelected = !areSame(item, _this.value, dataItemKey);\n\n      _this.triggerOnChange(item, state);\n\n      if (_this.state.text !== undefined) {\n        state.data.text = undefined;\n      }\n\n      if (newSelected) {\n        _this.base.triggerPageChangeCornerItems(item, state);\n      }\n    };\n\n    _this.toggleBtnClick = function (event) {\n      var state = _this.base.initState();\n\n      state.syntheticEvent = event;\n\n      _this.base.togglePopup(state);\n\n      _this.applyState(state);\n    };\n\n    _this.handleItemClick = function (index, event) {\n      _this.base.handleItemClick(index, event);\n\n      _this._valueDuringOnChange = undefined;\n    };\n\n    _this.handleBlur = function (event) {\n      if (_this.state.focused) {\n        var state = _this.base.initState();\n\n        state.data.focused = false;\n        state.events.push({\n          type: 'onBlur'\n        });\n        state.syntheticEvent = event;\n\n        _this.applyValueOnRejectSuggestions(event.currentTarget.value, state);\n      }\n    };\n\n    _this.onInputKeyDown = function (event) {\n      var keyCode = event.keyCode;\n      var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;\n\n      var state = _this.base.initState();\n\n      state.syntheticEvent = event;\n\n      if (!event.altKey && (keyCode === Keys.up || keyCode === Keys.down)) {\n        event.preventDefault();\n\n        _this.onNavigate(state, keyCode);\n\n        _this.applyState(state);\n\n        return;\n      }\n\n      var togglePopup = function togglePopup() {\n        event.preventDefault();\n\n        _this.base.togglePopup(state);\n\n        _this.applyState(state);\n      };\n\n      if (opened) {\n        if (event.altKey && keyCode === Keys.up) {\n          togglePopup();\n        } else if (keyCode === Keys.enter) {\n          event.preventDefault();\n\n          _this.applyValueOnEnter(event.currentTarget.value, state);\n        } else if (keyCode === Keys.esc) {\n          _this.applyValueOnRejectSuggestions(event.currentTarget.value, state);\n        }\n      } else if (event.altKey && keyCode === Keys.down) {\n        togglePopup();\n      }\n    };\n\n    _this.inputOnChange = function (event) {\n      var state = _this.base.initState();\n\n      state.syntheticEvent = event;\n      var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;\n      var input = event.currentTarget;\n      var value = input.value;\n\n      if (_this.props.suggest) {\n        var selectionAtEnd = input.selectionEnd === value.length;\n        var prevText = _this.props.filter !== undefined ? _this.props.filter : _this.state.text;\n\n        if (!isPresent(prevText)) {\n          prevText = getItemValue(_this.value, _this.props.textField) || '';\n        }\n\n        var deletedSuggestion = prevText && prevText === value;\n        var deleting = prevText && prevText.length > value.length;\n\n        if (deletedSuggestion || deleting || !selectionAtEnd) {\n          _this._suggested = '';\n        } else {\n          _this.suggestValue(value);\n        }\n      }\n\n      if (_this.props.filter === undefined) {\n        state.data.text = value;\n      }\n\n      if (_this.state.focusedItem !== undefined) {\n        state.data.focusedItem = undefined;\n      }\n\n      if (!opened) {\n        _this.base.togglePopup(state);\n      }\n\n      _this.base.filterChanged(value, state);\n\n      _this.applyState(state);\n    };\n\n    _this.clearButtonClick = function (event) {\n      var state = _this.base.initState();\n\n      state.syntheticEvent = event;\n      event.stopPropagation();\n      _this._suggested = '';\n\n      _this.base.filterChanged('', state);\n\n      if (_this.props.filter === undefined && _this.state.text !== undefined) {\n        state.data.text = undefined;\n      }\n\n      _this.triggerOnChange(null, state);\n\n      var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;\n\n      if (opened) {\n        _this.base.togglePopup(state);\n      }\n\n      _this.applyState(state);\n    };\n\n    _this.setValidity = function () {\n      if (_this._input && _this._input.setCustomValidity) {\n        _this._input.setCustomValidity(_this.validity.valid ? '' : _this.props.validationMessage || VALIDATION_MESSAGE);\n      }\n    };\n\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  ComboBox.prototype.focus = function () {\n    if (this._input) {\n      this._input.focus();\n    }\n  };\n\n  Object.defineProperty(ComboBox.prototype, \"element\", {\n    /**\n     * @hidden\n     */\n    get: function get() {\n      return this._element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ComboBox.prototype, \"value\", {\n    /**\n     * The value of the ComboBox.\n     */\n    get: function get() {\n      if (this._valueDuringOnChange !== undefined) {\n        return this._valueDuringOnChange;\n      } else if (this.props.value !== undefined) {\n        return this.props.value;\n      } else if (this.state.value !== undefined) {\n        return this.state.value;\n      } else if (this.props.defaultValue !== undefined) {\n        return this.props.defaultValue;\n      }\n\n      return undefined;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ComboBox.prototype, \"index\", {\n    /**\n     * The index of the selected item.\n     */\n    get: function get() {\n      var _a = this.props,\n          _b = _a.data,\n          data = _b === void 0 ? [] : _b,\n          dataItemKey = _a.dataItemKey;\n      var value = this.value; // TO DO: deprecate it!\n\n      return data.findIndex(function (i) {\n        return areSame(i, value, dataItemKey);\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ComboBox.prototype, \"name\", {\n    /**\n     * Gets the `name` property of the ComboBox.\n     */\n    get: function get() {\n      return this.props.name;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ComboBox.prototype, \"validity\", {\n    /**\n     * Represents the validity state into which the component is set.\n     */\n    get: function get() {\n      // remove the undefined check when this is fixed:\n      // https://github.com/telerik/kendo-react-private/issues/252\n      var customError = this.props.validationMessage !== undefined;\n      var isValid = !this.required || this.value !== null && this.value !== '' && this.value !== undefined;\n      var valid = this.props.valid !== undefined ? this.props.valid : isValid;\n      return {\n        customError: customError,\n        valid: valid,\n        valueMissing: this.value === null\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ComboBox.prototype, \"validityStyles\", {\n    get: function get() {\n      return this.props.validityStyles !== undefined ? this.props.validityStyles : ComboBox.defaultProps.validityStyles;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ComboBox.prototype, \"required\", {\n    /**\n     * @hidden\n     */\n    get: function get() {\n      return this.props.required !== undefined ? this.props.required : ComboBox.defaultProps.required;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  ComboBox.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var _a = this.props,\n        _b = _a.data,\n        data = _b === void 0 ? [] : _b,\n        dataItemKey = _a.dataItemKey,\n        virtual = _a.virtual;\n    var prevTotal = prevProps.virtual ? prevProps.virtual.total : 0;\n    var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;\n    var prevOpened = prevProps.opened !== undefined ? prevProps.opened : prevState.opened;\n    var opening = !prevOpened && opened;\n    var selectedItem = this.value;\n    this._valueOnDidUpdate = selectedItem;\n\n    if (virtual && virtual.total !== prevTotal) {\n      this.base.vs.calcScrollElementHeight();\n      this.base.vs.reset();\n    } else {\n      var prevSelectedItem = prevProps.value !== undefined ? prevProps.value : prevState.value;\n      var selectedItemIndex = data.findIndex(function (i) {\n        return areSame(i, selectedItem, dataItemKey);\n      });\n      var selectedItemChanged = !areSame(prevSelectedItem, selectedItem, dataItemKey);\n\n      if (opening && virtual) {\n        this.base.scrollToVirtualItem(virtual, selectedItemIndex);\n      } else if (opening && !virtual) {\n        this.base.scrollToItem(selectedItemIndex);\n      } else if (opened && prevOpened && selectedItem && selectedItemChanged) {\n        this.base.scrollToItem(selectedItemIndex);\n      }\n    }\n\n    if (opening && this._input) {\n      this._input.focus();\n    }\n\n    this.setValidity();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ComboBox.prototype.componentDidMount = function () {\n    this.base.didMount();\n    this.setValidity();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ComboBox.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        dir = _a.dir,\n        disabled = _a.disabled,\n        _b = _a.clearButton,\n        clearButton = _b === void 0 ? ComboBox.defaultProps.clearButton : _b,\n        label = _a.label,\n        textField = _a.textField,\n        className = _a.className,\n        style = _a.style,\n        loading = _a.loading,\n        iconClassName = _a.iconClassName,\n        virtual = _a.virtual;\n    var focused = this.state.focused;\n    var isValid = !this.validityStyles || this.validity.valid;\n    var text = this.props.filter !== undefined ? this.props.filter : this.state.text;\n    var selectedItemText = getItemValue(this.value, textField);\n    var inputText = isPresent(text) ? text : selectedItemText;\n    var renderClearButton = clearButton && (!!inputText || isPresent(this.value));\n    var base = this.base;\n    var vs = base.vs;\n    vs.enabled = virtual !== undefined;\n\n    if (virtual !== undefined) {\n      vs.skip = virtual.skip;\n      vs.total = virtual.total;\n      vs.pageSize = virtual.pageSize;\n    }\n\n    var combobox = React.createElement(\"span\", {\n      className: classNames('k-widget k-combobox k-header', {\n        'k-combobox-clearable': clearButton,\n        'k-state-invalid': !isValid\n      }, className),\n      ref: function ref(element) {\n        return _this._element = element;\n      },\n      style: !label ? style : __assign({}, style, {\n        width: undefined\n      }),\n      dir: dir\n    }, React.createElement(\"span\", {\n      ref: function ref(wrapper) {\n        return base.wrapper = wrapper;\n      },\n      className: classNames('k-dropdown-wrap', {\n        'k-state-default': !disabled,\n        'k-state-disabled': disabled,\n        'k-state-focused': focused && !disabled\n      })\n    }, this.renderSearchBar(renderClearButton, inputText || '', this._inputId), React.createElement(\"span\", {\n      className: \"k-select\",\n      onClick: this.toggleBtnClick,\n      onMouseDown: function onMouseDown(e) {\n        return e.preventDefault();\n      }\n    }, React.createElement(\"span\", {\n      className: classNames('k-icon', iconClassName, {\n        'k-i-arrow-s': !loading && !iconClassName,\n        'k-i-loading': loading && !iconClassName\n      })\n    }))), this.renderListContainer());\n    return label ? React.createElement(FloatingLabel, {\n      label: label,\n      value: inputText,\n      style: {\n        width: style ? style.width : undefined\n      },\n      valid: isValid,\n      id: this._inputId,\n      children: combobox\n    }) : combobox;\n  };\n  /**\n   * @hidden\n   */\n\n\n  ComboBox.prototype.onNavigate = function (state, keyCode) {\n    var _a = this.props,\n        _b = _a.data,\n        data = _b === void 0 ? [] : _b,\n        _c = _a.virtual,\n        virtual = _c === void 0 ? {\n      skip: 0\n    } : _c;\n    var text = this.props.filter ? this.props.filter : this.state.text;\n    var focusedIndex = this.getFocusedIndex();\n    var vs = this.base.vs;\n    var value = this.value;\n    this._suggested = '';\n\n    if (focusedIndex !== -1 && !isPresent(value)) {\n      this.handleItemSelect(focusedIndex, state);\n    } else if (text === '') {\n      this.handleItemSelect(0, state);\n    } else {\n      var currentIndex = virtual.skip + focusedIndex;\n      var newIndex = this.base.navigation.navigate({\n        keyCode: keyCode,\n        current: currentIndex,\n        max: (vs.enabled ? vs.total : data.length) - 1,\n        min: 0\n      });\n\n      if (newIndex !== undefined) {\n        this.handleItemSelect(newIndex, state);\n      }\n    }\n  };\n\n  ComboBox.prototype.applyValueOnEnter = function (value, state) {\n    var _a;\n\n    var _b = this.props,\n        _c = _b.data,\n        data = _c === void 0 ? [] : _c,\n        textField = _b.textField,\n        allowCustom = _b.allowCustom;\n    var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;\n    var currentValueText = getItemValue(this.value, textField);\n    var valueIndex = currentValueText === value ? this.index : getItemIndexByText(data, value, textField);\n    var itemSelected = valueIndex !== -1;\n    var newSelected = undefined;\n    this._suggested = '';\n\n    if (itemSelected) {\n      // typed text match item from list\n      newSelected = data[valueIndex];\n    } else {\n      if (allowCustom) {\n        // any custom text not in list\n        newSelected = textField !== undefined ? (_a = {}, _a[textField] = value, _a) : value;\n      } else {\n        return this.selectFocusedItem(value, state);\n      }\n    }\n\n    this.triggerOnChange(newSelected, state);\n\n    if (opened) {\n      this.base.togglePopup(state);\n    }\n\n    if (this.props.filter === undefined && this.state.text !== undefined) {\n      state.data.text = undefined;\n    }\n\n    this.applyState(state);\n  };\n\n  ComboBox.prototype.applyValueOnRejectSuggestions = function (text, state) {\n    var _a;\n\n    var _b = this.props,\n        _c = _b.data,\n        data = _c === void 0 ? [] : _c,\n        textField = _b.textField,\n        allowCustom = _b.allowCustom;\n    var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;\n    var valueItemText = getItemValue(this.value, textField);\n    this._suggested = '';\n\n    if (text === valueItemText || text === '' && !isPresent(valueItemText)) {\n      if (opened) {\n        this.base.togglePopup(state);\n      }\n\n      return this.applyState(state);\n    }\n\n    var valueIndex = getItemIndexByText(data, text, textField, true);\n    var itemSelected = valueIndex !== -1;\n    var newSelected = null;\n\n    if (itemSelected) {\n      newSelected = data[valueIndex];\n    } else if (allowCustom) {\n      newSelected = text ? textField ? (_a = {}, _a[textField] = text, _a) : text : null;\n    }\n\n    this.triggerOnChange(newSelected, state);\n\n    if (this.state.text !== undefined) {\n      state.data.text = undefined;\n      this.base.filterChanged('', state);\n    }\n\n    if (opened) {\n      this.base.togglePopup(state);\n    }\n\n    this.applyState(state);\n  };\n\n  ComboBox.prototype.selectFocusedItem = function (text, state) {\n    var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;\n    var _a = this.props,\n        _b = _a.data,\n        data = _b === void 0 ? [] : _b,\n        textField = _a.textField,\n        _c = _a.virtual,\n        virtual = _c === void 0 ? {\n      skip: 0\n    } : _c,\n        _d = _a.focusedItemIndex,\n        focusedItemIndex = _d === void 0 ? itemIndexStartsWith : _d;\n    var skip = virtual.skip;\n    var focusedIndex = text === '' && skip === 0 ? 0 : focusedItemIndex(data, text, textField);\n\n    if (focusedIndex !== -1) {\n      this.handleItemSelect(focusedIndex + skip, state);\n    } else {\n      this.triggerOnChange(null, state);\n\n      if (this.state.text !== undefined) {\n        state.data.text = undefined;\n      }\n    }\n\n    if (opened) {\n      this.base.togglePopup(state);\n    }\n\n    return this.applyState(state);\n  };\n\n  ComboBox.prototype.renderListContainer = function () {\n    var base = this.base;\n    var _a = this.props,\n        dir = _a.dir,\n        header = _a.header,\n        footer = _a.footer;\n    var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;\n    var popupSettings = base.getPopupSettings();\n    var popupWidth = popupSettings.width !== undefined ? popupSettings.width : base.popupWidth;\n    return React.createElement(ListContainer, {\n      onMouseDown: function onMouseDown(e) {\n        return e.preventDefault();\n      },\n      width: popupWidth,\n      popupSettings: {\n        animate: popupSettings.animate,\n        anchor: this.element || undefined,\n        show: opened,\n        className: classNames('k-list-container k-reset', popupSettings.className)\n      },\n      dir: dir !== undefined ? dir : this.base.dirCalculated\n    }, header, base.renderScrollWrapper([this.renderList(), base.renderScrollElement()]), footer);\n  };\n\n  ComboBox.prototype.renderList = function () {\n    var _this = this;\n\n    var base = this.base;\n    var _a = this.props,\n        textField = _a.textField,\n        dataItemKey = _a.dataItemKey,\n        listNoDataRender = _a.listNoDataRender,\n        itemRender = _a.itemRender,\n        _b = _a.data,\n        data = _b === void 0 ? [] : _b,\n        _c = _a.virtual,\n        virtual = _c === void 0 ? {\n      skip: 0\n    } : _c;\n    var popupSettings = base.getPopupSettings();\n    var vs = base.vs;\n    var skip = virtual.skip;\n    var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;\n    var translate = \"translateY(\" + vs.translate + \"px)\";\n    var focusedIndex = opened ? this.getFocusedIndex() : undefined;\n    var text = this.props.filter !== undefined ? this.props.filter : this.state.text;\n    var selectedItemText = getItemValue(this.value, textField);\n    var value = isPresent(text) && text !== selectedItemText ? null : this.value;\n    return React.createElement(List, {\n      id: base.listBoxId,\n      show: opened,\n      data: data,\n      focusedIndex: focusedIndex,\n      value: value,\n      textField: textField,\n      valueField: dataItemKey,\n      optionsGuid: base.guid,\n      listRef: function listRef(list) {\n        return vs.list = _this.base.list = list;\n      },\n      wrapperStyle: !vs.enabled ? {\n        maxHeight: popupSettings.height\n      } : {\n        float: 'left',\n        width: '100%'\n      },\n      wrapperCssClass: !vs.enabled ? 'k-list-scroller' : undefined,\n      listStyle: vs.enabled ? {\n        transform: translate\n      } : undefined,\n      key: \"listkey\",\n      skip: skip,\n      onClick: this.handleItemClick,\n      itemRender: itemRender,\n      noDataRender: listNoDataRender\n    });\n  };\n\n  ComboBox.prototype.renderSearchBar = function (clearButton, text, id) {\n    var _this = this;\n\n    var _a = this.props,\n        placeholder = _a.placeholder,\n        tabIndex = _a.tabIndex,\n        disabled = _a.disabled,\n        _b = _a.data,\n        data = _b === void 0 ? [] : _b,\n        dataItemKey = _a.dataItemKey,\n        _c = _a.virtual,\n        virtual = _c === void 0 ? {\n      skip: 0\n    } : _c;\n    var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;\n    var value = this.value;\n    var selectedIndex = Math.max(0, data.findIndex(function (i) {\n      return areSame(i, value, dataItemKey);\n    }));\n\n    if (this._suggested && !areSame(this._valueOnDidUpdate, value, dataItemKey)) {\n      this._suggested = '';\n    }\n\n    return React.createElement(SearchBar, {\n      id: id,\n      placeholder: placeholder,\n      tabIndex: tabIndex || undefined,\n      accessKey: this.props.accessKey,\n      value: text + this._suggested,\n      suggestedText: this._suggested,\n      ref: function ref(el) {\n        return _this._input = el && el.input;\n      },\n      onKeyDown: this.onInputKeyDown,\n      onChange: this.inputOnChange,\n      onFocus: this.base.handleFocus,\n      onBlur: this.handleBlur,\n      disabled: disabled,\n      expanded: opened,\n      owns: this.base.listBoxId,\n      activedescendant: this.base.guid + '-' + (selectedIndex + virtual.skip),\n      clearButton: clearButton,\n      clearButtonClick: this.clearButtonClick\n    });\n  };\n\n  ComboBox.prototype.triggerOnChange = function (item, state) {\n    var value = this.value;\n\n    if (!isPresent(value) && !isPresent(item) || areSame(value, item, this.props.dataItemKey)) {\n      return;\n    }\n\n    if (this.props.value === undefined) {\n      state.data.value = item;\n    }\n\n    this._valueDuringOnChange = item;\n    state.events.push({\n      type: 'onChange'\n    });\n  };\n\n  ComboBox.prototype.getFocusedIndex = function () {\n    var value = this.value;\n    var _a = this.props,\n        _b = _a.data,\n        data = _b === void 0 ? [] : _b,\n        textField = _a.textField,\n        dataItemKey = _a.dataItemKey,\n        _c = _a.virtual,\n        virtual = _c === void 0 ? {\n      skip: 0\n    } : _c,\n        _d = _a.focusedItemIndex,\n        focusedItemIndex = _d === void 0 ? itemIndexStartsWith : _d;\n    var text = this.props.filter ? this.props.filter : this.state.text;\n\n    if (isPresent(value) && text === undefined) {\n      return data.findIndex(function (i) {\n        return areSame(i, value, dataItemKey);\n      });\n    } else if (text) {\n      return focusedItemIndex(data, text, textField);\n    } else {\n      return virtual.skip === 0 ? 0 : -1;\n    }\n  };\n\n  ComboBox.prototype.suggestValue = function (value) {\n    var _a = this.props,\n        data = _a.data,\n        textField = _a.textField;\n    this._suggested = suggestValue(value, data, textField);\n  };\n\n  ComboBox.prototype.applyState = function (state) {\n    this.base.applyState(state);\n    this._valueDuringOnChange = undefined;\n  };\n  /**\n   * @hidden\n   */\n\n\n  ComboBox.propTypes = __assign({}, DropDownBase.propTypes, {\n    dataItemKey: PropTypes.string,\n    suggest: PropTypes.bool,\n    placeholder: PropTypes.string,\n    allowCustom: PropTypes.bool,\n    clearButton: PropTypes.bool,\n    iconClassName: PropTypes.string,\n    validationMessage: PropTypes.string,\n    required: PropTypes.bool\n  });\n  /**\n   * @hidden\n   */\n\n  ComboBox.defaultProps = __assign({}, DropDownBase.defaultProps, {\n    allowCustom: false,\n    clearButton: true,\n    required: false\n  });\n  return ComboBox;\n}(React.Component);\n\nexport default ComboBox;","map":null,"metadata":{},"sourceType":"module"}