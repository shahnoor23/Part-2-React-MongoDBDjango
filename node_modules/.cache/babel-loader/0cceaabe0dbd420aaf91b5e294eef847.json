{"ast":null,"code":"'use strict'; // setup jQuery\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar $;\n\nif (typeof window !== 'undefined' && window && window.jQuery) {\n  $ = window.jQuery;\n} else {\n  $ = require('jquery');\n  window.jQuery = $;\n}\n\nvar BS = require('bootstrap');\n\nvar React = require('react');\n\nvar objectAssign = require('object-assign');\n\nvar getOptions = require('./get-options.js');\n\nvar bsMultiselect = require('./bootstrap-multiselect.js');\n\nvar bsDropdown; // make it play nice when we already have bootstrap dropdown loaded.\n\nif (typeof BS === 'undefined' || typeof BS.dropdown === 'undefined') {\n  bsDropdown = require('./bootstrap-dropdown.js');\n} else {\n  bsDropdown = BS.dropdown;\n}\n\n$ = bsDropdown.init($);\n$ = bsMultiselect.init($);\n/* this is our exported React class */\n\nvar MultiSelect = function (_React$Component) {\n  _inherits(MultiSelect, _React$Component);\n\n  function MultiSelect(props) {\n    _classCallCheck(this, MultiSelect);\n\n    var _this = _possibleConstructorReturn(this, (MultiSelect.__proto__ || Object.getPrototypeOf(MultiSelect)).call(this, props));\n\n    _this.$multiselect = null;\n    _this.options = getOptions();\n    return _this;\n  }\n\n  _createClass(MultiSelect, [{\n    key: 'syncData',\n    value: function syncData() {\n      // this function is meant to be called from parent component\n      // in case selected values are changed outside of this component\n      // and need to be synced\n      // this function can not be called every time on this.render, because\n      // dropdown would close after selecting first item\n      if (this.$multiselect !== null) {\n        this.$multiselect.multiselect('dataprovider', this.props.data || []);\n      }\n    }\n  }, {\n    key: 'getOptionsFromProps',\n    value: function getOptionsFromProps() {\n      var currentOptions = {},\n          $this = this;\n      $this.options.forEach(function (option) {\n        if ($this.props.hasOwnProperty(option)) {\n          currentOptions[option] = $this.props[option];\n        }\n      });\n      return currentOptions;\n    }\n  }, {\n    key: 'setOptionsFromProps',\n    value: function setOptionsFromProps() {\n      var currentOptions = this.getOptionsFromProps();\n\n      if (this.$multiselect) {\n        if (Object.keys(currentOptions).length) {\n          this.$multiselect.multiselect('setOptions', currentOptions);\n          this.$multiselect.multiselect('buildDropdown');\n        }\n      }\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var $this = this; // initialize\n\n      $this.$multiselect = $($this.selectRef);\n      $this.$multiselect.multiselect($this.getOptionsFromProps());\n      $this.setOptionsFromProps();\n      $this.$multiselect.multiselect('dataprovider', $this.props.data || []);\n\n      if ($this.props.disabled) {\n        $this.$multiselect.multiselect('disable');\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.$multiselect) {\n        this.$multiselect.multiselect('destroy');\n      }\n\n      this.$multiselect = null;\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.options !== this.props.options) {\n        this.setOptionsFromProps();\n      }\n\n      if (nextProps.data !== this.props.data) {\n        this.$multiselect.multiselect('dataprovider', nextProps.data || []);\n      }\n\n      if (nextProps.disabled) {\n        this.$multiselect.multiselect('disable');\n      } else {\n        this.$multiselect.multiselect('enable');\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this; //this.setOptionsFromProps();\n\n\n      var options = getOptions();\n      var props = {};\n\n      for (var key in this.props) {\n        if (this.props.hasOwnProperty(key) && options.indexOf(key) === -1) {\n          props[key] = this.props[key];\n        }\n      }\n\n      return React.createElement('select', objectAssign({}, props, {\n        ref: function ref(select) {\n          return _this2.selectRef = select;\n        }\n      }));\n    }\n  }]);\n\n  return MultiSelect;\n}(React.Component);\n\nMultiSelect.displayName = 'MultiSelect';\nmodule.exports = MultiSelect;","map":null,"metadata":{},"sourceType":"script"}