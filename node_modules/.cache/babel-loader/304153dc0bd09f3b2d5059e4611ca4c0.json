{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport warning from 'warning';\nimport { traverseTreeNodes, updateCheckState, getOffset, getCheck, getStrictlyValue, isPositionPrefix } from './util';\n\nfunction noop() {}\n\nexport var contextTypes = {\n  rcTree: PropTypes.shape({\n    selectable: PropTypes.bool\n  })\n};\n\nvar Tree = function (_React$Component) {\n  _inherits(Tree, _React$Component);\n\n  function Tree(props) {\n    _classCallCheck(this, Tree);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var checkedKeys = _this.calcCheckedKeys(props);\n\n    _this.state = {\n      expandedKeys: _this.calcExpandedKeys(props),\n      checkedKeys: checkedKeys.checkedKeys,\n      halfCheckedKeys: checkedKeys.halfCheckedKeys,\n      selectedKeys: _this.calcSelectedKeys(props),\n      dragNodesKeys: '',\n      dragOverNodeKey: '',\n      dropNodeKey: ''\n    };\n    return _this;\n  }\n\n  Tree.prototype.getChildContext = function getChildContext() {\n    var selectable = this.props.selectable;\n    return {\n      rcTree: {\n        selectable: selectable\n      }\n    };\n  };\n\n  Tree.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var props = this.props;\n    var newState = {};\n    var expandedKeys = nextProps.expandedKeys !== props.expandedKeys ? this.calcExpandedKeys(nextProps, true) : undefined;\n\n    if (expandedKeys) {\n      newState.expandedKeys = expandedKeys;\n    }\n\n    var checkedKeys = nextProps.checkedKeys !== props.checkedKeys || props.loadData ? this.calcCheckedKeys(nextProps, true) : undefined;\n\n    if (checkedKeys) {\n      newState.checkedKeys = checkedKeys.checkedKeys;\n      newState.halfCheckedKeys = checkedKeys.halfCheckedKeys;\n    }\n\n    var selectedKeys = nextProps.selectedKeys !== props.selectedKeys ? this.calcSelectedKeys(nextProps, true) : undefined;\n\n    if (selectedKeys) {\n      newState.selectedKeys = selectedKeys;\n    }\n\n    this.setState(newState);\n  };\n\n  Tree.prototype.onDragStart = function onDragStart(e, treeNode) {\n    this.dragNode = treeNode;\n    var newState = {\n      dragNodesKeys: this.getDragNodesKeys(treeNode)\n    };\n    var expandedKeys = this.getExpandedKeys(treeNode, false);\n\n    if (expandedKeys) {\n      newState.expandedKeys = expandedKeys;\n    }\n\n    this.setState(newState);\n    this.props.onDragStart({\n      event: e,\n      node: treeNode\n    });\n  };\n\n  Tree.prototype.onDragEnter = function onDragEnter(e, treeNode) {\n    var _this2 = this;\n\n    var dropPosition = this.calcDropPosition(e, treeNode);\n    if (!this.dragNode) return;\n\n    if (this.dragNode.props.eventKey === treeNode.props.eventKey && dropPosition === 0) {\n      this.setState({\n        dragOverNodeKey: '',\n        dropPosition: null\n      });\n      return;\n    }\n\n    this.setState({\n      dragOverNodeKey: treeNode.props.eventKey,\n      dropPosition: dropPosition\n    });\n\n    if (!this.delayedDragEnterLogic) {\n      this.delayedDragEnterLogic = {};\n    }\n\n    Object.keys(this.delayedDragEnterLogic).forEach(function (key) {\n      clearTimeout(_this2.delayedDragEnterLogic[key]);\n    });\n    this.delayedDragEnterLogic[treeNode.props.pos] = setTimeout(function () {\n      var expandedKeys = _this2.getExpandedKeys(treeNode, true);\n\n      if (expandedKeys) {\n        _this2.setState({\n          expandedKeys: expandedKeys\n        });\n      }\n\n      _this2.props.onDragEnter({\n        event: e,\n        node: treeNode,\n        expandedKeys: expandedKeys && [].concat(expandedKeys) || [].concat(_this2.state.expandedKeys)\n      });\n    }, 400);\n  };\n\n  Tree.prototype.onDragOver = function onDragOver(e, treeNode) {\n    this.props.onDragOver({\n      event: e,\n      node: treeNode\n    });\n  };\n\n  Tree.prototype.onDragLeave = function onDragLeave(e, treeNode) {\n    this.props.onDragLeave({\n      event: e,\n      node: treeNode\n    });\n  };\n\n  Tree.prototype.onDrop = function onDrop(e, treeNode) {\n    var state = this.state;\n    var eventKey = treeNode.props.eventKey;\n    this.setState({\n      dragOverNodeKey: '',\n      dropNodeKey: eventKey\n    });\n\n    if (state.dragNodesKeys.indexOf(eventKey) > -1) {\n      warning(false, 'Can not drop to dragNode(include it\\'s children node)');\n      return;\n    }\n\n    var posArr = treeNode.props.pos.split('-');\n    var res = {\n      event: e,\n      node: treeNode,\n      dragNode: this.dragNode,\n      dragNodesKeys: [].concat(state.dragNodesKeys),\n      dropPosition: state.dropPosition + Number(posArr[posArr.length - 1])\n    };\n\n    if (state.dropPosition !== 0) {\n      res.dropToGap = true;\n    }\n\n    this.props.onDrop(res);\n  };\n\n  Tree.prototype.onDragEnd = function onDragEnd(e, treeNode) {\n    this.setState({\n      dragOverNodeKey: ''\n    });\n    this.props.onDragEnd({\n      event: e,\n      node: treeNode\n    });\n  };\n\n  Tree.prototype.onExpand = function onExpand(treeNode) {\n    var _this3 = this;\n\n    var props = this.props,\n        state = this.state;\n    var expanded = !treeNode.props.expanded;\n    var expandedKeys = [].concat(state.expandedKeys);\n    var eventKey = treeNode.props.eventKey;\n    var index = expandedKeys.indexOf(eventKey);\n\n    if (expanded && index === -1) {\n      expandedKeys.push(eventKey);\n    } else if (!expanded && index > -1) {\n      expandedKeys.splice(index, 1);\n    }\n\n    var controlled = 'expandedKeys' in props;\n\n    if (!controlled) {\n      this.setState({\n        expandedKeys: expandedKeys\n      });\n    }\n\n    props.onExpand(expandedKeys, {\n      node: treeNode,\n      expanded: expanded\n    }); // After data loaded, need set new expandedKeys\n\n    if (expanded && props.loadData) {\n      return props.loadData(treeNode).then(function () {\n        if (!controlled) {\n          _this3.setState({\n            expandedKeys: expandedKeys\n          });\n        }\n      });\n    }\n  };\n\n  Tree.prototype.onSelect = function onSelect(treeNode) {\n    var props = this.props,\n        state = this.state;\n    var eventKey = treeNode.props.eventKey;\n    var selected = !treeNode.props.selected;\n    var selectedKeys = [].concat(state.selectedKeys);\n\n    if (!selected) {\n      var index = selectedKeys.indexOf(eventKey);\n      selectedKeys.splice(index, 1);\n    } else if (!props.multiple) {\n      selectedKeys = [eventKey];\n    } else {\n      selectedKeys.push(eventKey);\n    } // TODO: can be optimized if we remove selectedNodes in API\n\n\n    var selectedNodes = [];\n\n    if (selectedKeys.length) {\n      traverseTreeNodes(props.children, function (item) {\n        if (selectedKeys.indexOf(item.key) !== -1) {\n          selectedNodes.push(item);\n        }\n      });\n    }\n\n    if (!('selectedKeys' in props)) {\n      this.setState({\n        selectedKeys: selectedKeys\n      });\n    }\n\n    var eventObj = {\n      event: 'select',\n      selected: selected,\n      node: treeNode,\n      selectedNodes: selectedNodes\n    };\n    props.onSelect(selectedKeys, eventObj);\n  };\n\n  Tree.prototype.onMouseEnter = function onMouseEnter(e, treeNode) {\n    this.props.onMouseEnter({\n      event: e,\n      node: treeNode\n    });\n  };\n\n  Tree.prototype.onMouseLeave = function onMouseLeave(e, treeNode) {\n    this.props.onMouseLeave({\n      event: e,\n      node: treeNode\n    });\n  };\n\n  Tree.prototype.onContextMenu = function onContextMenu(e, treeNode) {\n    if (this.props.onRightClick) {\n      e.preventDefault();\n      this.props.onRightClick({\n        event: e,\n        node: treeNode\n      });\n    }\n  }; // all keyboard events callbacks run from here at first\n\n\n  Tree.prototype.getOpenTransitionName = function getOpenTransitionName() {\n    var props = this.props;\n    var transitionName = props.openTransitionName;\n    var animationName = props.openAnimation;\n\n    if (!transitionName && typeof animationName === 'string') {\n      return props.prefixCls + '-open-' + animationName;\n    }\n\n    return transitionName;\n  };\n\n  Tree.prototype.getDragNodesKeys = function getDragNodesKeys(treeNode) {\n    var dragNodesKeys = [];\n    traverseTreeNodes(treeNode.props.children, function (item, index, pos, key) {\n      if (isPositionPrefix(treeNode.props.pos, pos)) {\n        dragNodesKeys.push(key);\n      }\n    });\n    dragNodesKeys.push(treeNode.props.eventKey || treeNode.props.pos);\n    return dragNodesKeys;\n  };\n\n  Tree.prototype.getExpandedKeys = function getExpandedKeys(treeNode, expand) {\n    var eventKey = treeNode.props.eventKey;\n    var expandedKeys = this.state.expandedKeys;\n    var expandedIndex = expandedKeys.indexOf(eventKey);\n\n    if (!expand && expandedIndex > -1) {\n      var exKeys = [].concat(expandedKeys);\n      exKeys.splice(expandedIndex, 1);\n      return exKeys;\n    }\n\n    if (expand && expandedKeys.indexOf(eventKey) === -1) {\n      return expandedKeys.concat([eventKey]);\n    }\n  };\n\n  Tree.prototype.generateTreeNodesStates = function generateTreeNodesStates(children, checkedKeys) {\n    var checkedPositions = [];\n    var treeNodesStates = {};\n    traverseTreeNodes(children, function (item, _, pos, key, childrenPos, parentPos) {\n      treeNodesStates[pos] = {\n        node: item,\n        key: key,\n        checked: false,\n        halfChecked: false,\n        disabled: item.props.disabled,\n        disableCheckbox: item.props.disableCheckbox,\n        childrenPos: childrenPos,\n        parentPos: parentPos\n      };\n\n      if (checkedKeys.indexOf(key) !== -1) {\n        treeNodesStates[pos].checked = true;\n        checkedPositions.push(pos);\n      }\n    });\n    checkedPositions.forEach(function (checkedPosition) {\n      updateCheckState(treeNodesStates, checkedPosition, true);\n    });\n    return treeNodesStates;\n  };\n\n  Tree.prototype.calcExpandedKeys = function calcExpandedKeys(props, isNotInit) {\n    var expandedKeys = props.expandedKeys || (isNotInit ? undefined : props.defaultExpandedKeys);\n\n    if (!expandedKeys) {\n      return undefined;\n    }\n\n    var expandAll = isNotInit ? false : props.defaultExpandAll;\n\n    if (!expandAll && !props.autoExpandParent) {\n      return expandedKeys;\n    }\n\n    var expandedPositionArr = [];\n\n    if (props.autoExpandParent) {\n      traverseTreeNodes(props.children, function (item, index, pos, key) {\n        if (expandedKeys.indexOf(key) > -1) {\n          expandedPositionArr.push(pos);\n        }\n      });\n    }\n\n    var filterExpandedKeysSet = {};\n    traverseTreeNodes(props.children, function (item, index, pos, key) {\n      if (expandAll) {\n        filterExpandedKeysSet[key] = true;\n      } else if (props.autoExpandParent) {\n        var isCurrentParentOfExpanded = expandedPositionArr.some(function (p) {\n          return isPositionPrefix(pos, p);\n        });\n\n        if (isCurrentParentOfExpanded) {\n          filterExpandedKeysSet[key] = true;\n        }\n      }\n    });\n    var filterExpandedKeys = Object.keys(filterExpandedKeysSet);\n    return filterExpandedKeys.length ? filterExpandedKeys : expandedKeys;\n  };\n\n  Tree.prototype.calcCheckedKeys = function calcCheckedKeys(props, isNotInit) {\n    if (!props.checkable) {\n      return {\n        checkedKeys: [],\n        halfCheckedKeys: []\n      };\n    }\n\n    var checkedKeys = props.checkedKeys || (isNotInit && !props.loadData ? undefined : props.defaultCheckedKeys);\n\n    if (!checkedKeys) {\n      return undefined;\n    }\n\n    if (Array.isArray(checkedKeys)) {\n      checkedKeys = {\n        checkedKeys: checkedKeys,\n        halfCheckedKeys: []\n      };\n    } else if (typeof checkedKeys === 'object') {\n      checkedKeys = {\n        checkedKeys: checkedKeys.checked,\n        halfCheckedKeys: checkedKeys.halfChecked\n      };\n    }\n\n    if (!props.checkStrictly) {\n      var checked = checkedKeys.checkedKeys || [];\n      var treeNodesStates = this.generateTreeNodesStates(props.children, checked);\n      return getCheck(treeNodesStates);\n    }\n\n    return checkedKeys;\n  };\n\n  Tree.prototype.calcSelectedKeys = function calcSelectedKeys(props, isNotInit) {\n    var selectedKeys = props.selectedKeys || (isNotInit ? undefined : props.defaultSelectedKeys);\n\n    if (!selectedKeys) {\n      return undefined;\n    }\n\n    if (props.multiple) {\n      return [].concat(selectedKeys);\n    }\n\n    if (selectedKeys.length) {\n      return [selectedKeys[0]];\n    }\n\n    return selectedKeys;\n  };\n\n  Tree.prototype.calcDropPosition = function calcDropPosition(e, treeNode) {\n    var offsetTop = getOffset(treeNode.selectHandle).top;\n    var offsetHeight = treeNode.selectHandle.offsetHeight;\n    var pageY = e.pageY;\n    var gapHeight = 2; // TODO: remove hard code\n\n    if (pageY > offsetTop + offsetHeight - gapHeight) {\n      return 1;\n    }\n\n    if (pageY < offsetTop + gapHeight) {\n      return -1;\n    }\n\n    return 0;\n  };\n\n  Tree.prototype.renderTreeNode = function renderTreeNode(child, index) {\n    var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var state = this.state,\n        props = this.props;\n    var pos = level + '-' + index;\n    var key = child.key || pos;\n    var childProps = {\n      root: this,\n      eventKey: key,\n      pos: pos,\n      loadData: props.loadData,\n      prefixCls: props.prefixCls,\n      showIcon: props.showIcon,\n      draggable: props.draggable,\n      dragOver: state.dragOverNodeKey === key && state.dropPosition === 0,\n      dragOverGapTop: state.dragOverNodeKey === key && state.dropPosition === -1,\n      dragOverGapBottom: state.dragOverNodeKey === key && state.dropPosition === 1,\n      expanded: state.expandedKeys.indexOf(key) !== -1,\n      selected: state.selectedKeys.indexOf(key) !== -1,\n      openTransitionName: this.getOpenTransitionName(),\n      openAnimation: props.openAnimation,\n      filterTreeNode: this.filterTreeNode\n    };\n\n    if (props.checkable) {\n      childProps.checkable = props.checkable;\n      childProps.checked = state.checkedKeys.indexOf(key) !== -1;\n      childProps.halfChecked = state.halfCheckedKeys.indexOf(key) !== -1;\n    }\n\n    return React.cloneElement(child, childProps);\n  };\n\n  Tree.prototype.render = function render() {\n    var _classNames;\n\n    var props = this.props;\n    var className = classNames(props.prefixCls, props.className, (_classNames = {}, _classNames[props.prefixCls + '-show-line'] = props.showLine, _classNames));\n    var domProps = {};\n\n    if (props.focusable) {\n      domProps.tabIndex = '0';\n      domProps.onKeyDown = this.onKeyDown;\n    }\n\n    return React.createElement('ul', _extends({}, domProps, {\n      className: className,\n      role: 'tree-node',\n      unselectable: 'on'\n    }), React.Children.map(props.children, this.renderTreeNode, this));\n  };\n\n  return Tree;\n}(React.Component);\n\nTree.propTypes = {\n  prefixCls: PropTypes.string,\n  children: PropTypes.any,\n  showLine: PropTypes.bool,\n  showIcon: PropTypes.bool,\n  selectable: PropTypes.bool,\n  multiple: PropTypes.bool,\n  checkable: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n  checkStrictly: PropTypes.bool,\n  draggable: PropTypes.bool,\n  autoExpandParent: PropTypes.bool,\n  defaultExpandAll: PropTypes.bool,\n  defaultExpandedKeys: PropTypes.arrayOf(PropTypes.string),\n  expandedKeys: PropTypes.arrayOf(PropTypes.string),\n  defaultCheckedKeys: PropTypes.arrayOf(PropTypes.string),\n  checkedKeys: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.object]),\n  defaultSelectedKeys: PropTypes.arrayOf(PropTypes.string),\n  selectedKeys: PropTypes.arrayOf(PropTypes.string),\n  onExpand: PropTypes.func,\n  onCheck: PropTypes.func,\n  onSelect: PropTypes.func,\n  loadData: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onRightClick: PropTypes.func,\n  onDragStart: PropTypes.func,\n  onDragEnter: PropTypes.func,\n  onDragOver: PropTypes.func,\n  onDragLeave: PropTypes.func,\n  onDrop: PropTypes.func,\n  onDragEnd: PropTypes.func,\n  filterTreeNode: PropTypes.func,\n  openTransitionName: PropTypes.string,\n  openAnimation: PropTypes.oneOfType([PropTypes.string, PropTypes.object])\n};\nTree.childContextTypes = contextTypes;\nTree.defaultProps = {\n  prefixCls: 'rc-tree',\n  showLine: false,\n  showIcon: true,\n  selectable: true,\n  multiple: false,\n  checkable: false,\n  checkStrictly: false,\n  draggable: false,\n  autoExpandParent: true,\n  defaultExpandAll: false,\n  defaultExpandedKeys: [],\n  defaultCheckedKeys: [],\n  defaultSelectedKeys: [],\n  onExpand: noop,\n  onCheck: noop,\n  onSelect: noop,\n  onDragStart: noop,\n  onDragEnter: noop,\n  onDragOver: noop,\n  onDragLeave: noop,\n  onDrop: noop,\n  onDragEnd: noop,\n  onMouseEnter: noop,\n  onMouseLeave: noop\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this4 = this;\n\n  this.onCheck = function (treeNode) {\n    var props = _this4.props,\n        state = _this4.state;\n    var checked = !treeNode.props.checked || treeNode.props.halfChecked;\n    var eventObj = {\n      event: 'check',\n      node: treeNode,\n      checked: checked\n    };\n\n    if (props.checkStrictly) {\n      var eventKey = treeNode.props.eventKey;\n      var checkedKeys = [].concat(state.checkedKeys);\n      var index = checkedKeys.indexOf(eventKey);\n\n      if (checked && index === -1) {\n        checkedKeys.push(eventKey);\n      }\n\n      if (!checked && index > -1) {\n        checkedKeys.splice(index, 1);\n      }\n\n      eventObj.checkedNodes = [];\n      traverseTreeNodes(props.children, function (item) {\n        if (checkedKeys.indexOf(item.key) !== -1) {\n          eventObj.checkedNodes.push(item);\n        }\n      });\n\n      if (!('checkedKeys' in props)) {\n        _this4.setState({\n          checkedKeys: checkedKeys\n        });\n      }\n\n      props.onCheck(getStrictlyValue(checkedKeys, state.halfCheckedKeys), eventObj);\n    } else {\n      var treeNodesStates = _this4.generateTreeNodesStates(props.children, state.checkedKeys);\n\n      treeNodesStates[treeNode.props.pos].checked = checked;\n      treeNodesStates[treeNode.props.pos].halfChecked = false;\n      updateCheckState(treeNodesStates, treeNode.props.pos, checked);\n      var checkKeys = getCheck(treeNodesStates);\n      eventObj.checkedNodes = checkKeys.checkedNodes;\n      eventObj.checkedNodesPositions = checkKeys.checkedNodesPositions; // TODO: not in API\n\n      eventObj.halfCheckedKeys = checkKeys.halfCheckedKeys; // TODO: not in API\n\n      if (!('checkedKeys' in props)) {\n        _this4.setState({\n          checkedKeys: checkKeys.checkedKeys,\n          halfCheckedKeys: checkKeys.halfCheckedKeys\n        });\n      }\n\n      props.onCheck(checkKeys.checkedKeys, eventObj);\n    }\n  };\n\n  this.onKeyDown = function (e) {\n    e.preventDefault();\n  };\n\n  this.filterTreeNode = function (treeNode) {\n    var filterTreeNode = _this4.props.filterTreeNode;\n\n    if (typeof filterTreeNode !== 'function' || treeNode.props.disabled) {\n      return false;\n    }\n\n    return filterTreeNode.call(_this4, treeNode);\n  };\n};\n\nexport default Tree;","map":null,"metadata":{},"sourceType":"module"}