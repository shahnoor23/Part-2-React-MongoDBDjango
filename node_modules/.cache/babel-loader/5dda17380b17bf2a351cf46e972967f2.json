{"ast":null,"code":"import _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _extends from 'babel-runtime/helpers/extends';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport createReactClass from 'create-react-class';\nimport classNames from 'classnames';\nimport mixin from './mixin';\nimport InputHandler from './InputHandler';\n\nfunction noop() {}\n\nfunction preventDefault(e) {\n  e.preventDefault();\n}\n\nvar InputNumber = createReactClass({\n  displayName: 'InputNumber',\n  propTypes: {\n    focusOnUpDown: PropTypes.bool,\n    onChange: PropTypes.func,\n    onKeyDown: PropTypes.func,\n    onKeyUp: PropTypes.func,\n    prefixCls: PropTypes.string,\n    tabIndex: PropTypes.string,\n    disabled: PropTypes.bool,\n    onFocus: PropTypes.func,\n    onBlur: PropTypes.func,\n    readOnly: PropTypes.bool,\n    max: PropTypes.number,\n    min: PropTypes.number,\n    step: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    upHandler: PropTypes.node,\n    downHandler: PropTypes.node,\n    useTouch: PropTypes.bool,\n    formatter: PropTypes.func,\n    parser: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onMouseOver: PropTypes.func,\n    onMouseOut: PropTypes.func,\n    precision: PropTypes.number\n  },\n  mixins: [mixin],\n  getDefaultProps: function getDefaultProps() {\n    return {\n      focusOnUpDown: true,\n      useTouch: false,\n      prefixCls: 'rc-input-number'\n    };\n  },\n  componentDidMount: function componentDidMount() {\n    this.componentDidUpdate();\n  },\n  componentWillUpdate: function componentWillUpdate() {\n    try {\n      this.start = this.refs.input.selectionStart;\n      this.end = this.refs.input.selectionEnd;\n    } catch (e) {// Fix error in Chrome:\n      // Failed to read the 'selectionStart' property from 'HTMLInputElement'\n      // http://stackoverflow.com/q/21177489/3040605\n    }\n  },\n  componentDidUpdate: function componentDidUpdate() {\n    if (this.props.focusOnUpDown && this.state.focused) {\n      var selectionRange = this.refs.input.setSelectionRange;\n\n      if (selectionRange && typeof selectionRange === 'function' && this.start !== undefined && this.end !== undefined && this.start !== this.end) {\n        this.refs.input.setSelectionRange(this.start, this.end);\n      } else {\n        this.focus();\n      }\n    }\n  },\n  onKeyDown: function onKeyDown(e) {\n    if (e.keyCode === 38) {\n      var ratio = this.getRatio(e);\n      this.up(e, ratio);\n      this.stop();\n    } else if (e.keyCode === 40) {\n      var _ratio = this.getRatio(e);\n\n      this.down(e, _ratio);\n      this.stop();\n    }\n\n    var onKeyDown = this.props.onKeyDown;\n\n    if (onKeyDown) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      onKeyDown.apply(undefined, [e].concat(args));\n    }\n  },\n  onKeyUp: function onKeyUp(e) {\n    this.stop();\n    var onKeyUp = this.props.onKeyUp;\n\n    if (onKeyUp) {\n      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      onKeyUp.apply(undefined, [e].concat(args));\n    }\n  },\n  getRatio: function getRatio(e) {\n    var ratio = 1;\n\n    if (e.metaKey || e.ctrlKey) {\n      ratio = 0.1;\n    } else if (e.shiftKey) {\n      ratio = 10;\n    }\n\n    return ratio;\n  },\n  getValueFromEvent: function getValueFromEvent(e) {\n    return e.target.value;\n  },\n  focus: function focus() {\n    this.refs.input.focus();\n  },\n  formatWrapper: function formatWrapper(num) {\n    if (this.props.formatter) {\n      return this.props.formatter(num);\n    }\n\n    return num;\n  },\n  render: function render() {\n    var _classNames;\n\n    var props = _extends({}, this.props);\n\n    var prefixCls = props.prefixCls,\n        disabled = props.disabled,\n        readOnly = props.readOnly,\n        useTouch = props.useTouch;\n    var classes = classNames((_classNames = {}, _defineProperty(_classNames, prefixCls, true), _defineProperty(_classNames, props.className, !!props.className), _defineProperty(_classNames, prefixCls + '-disabled', disabled), _defineProperty(_classNames, prefixCls + '-focused', this.state.focused), _classNames));\n    var upDisabledClass = '';\n    var downDisabledClass = '';\n    var value = this.state.value;\n\n    if (value) {\n      if (!isNaN(value)) {\n        var val = Number(value);\n\n        if (val >= props.max) {\n          upDisabledClass = prefixCls + '-handler-up-disabled';\n        }\n\n        if (val <= props.min) {\n          downDisabledClass = prefixCls + '-handler-down-disabled';\n        }\n      } else {\n        upDisabledClass = prefixCls + '-handler-up-disabled';\n        downDisabledClass = prefixCls + '-handler-down-disabled';\n      }\n    }\n\n    var editable = !props.readOnly && !props.disabled; // focus state, show input value\n    // unfocus state, show valid value\n\n    var inputDisplayValue = void 0;\n\n    if (this.state.focused) {\n      inputDisplayValue = this.state.inputValue;\n    } else {\n      inputDisplayValue = this.toPrecisionAsStep(this.state.value);\n    }\n\n    if (inputDisplayValue === undefined || inputDisplayValue === null) {\n      inputDisplayValue = '';\n    }\n\n    var upEvents = void 0;\n    var downEvents = void 0;\n\n    if (useTouch) {\n      upEvents = {\n        onTouchStart: editable && !upDisabledClass ? this.up : noop,\n        onTouchEnd: this.stop\n      };\n      downEvents = {\n        onTouchStart: editable && !downDisabledClass ? this.down : noop,\n        onTouchEnd: this.stop\n      };\n    } else {\n      upEvents = {\n        onMouseDown: editable && !upDisabledClass ? this.up : noop,\n        onMouseUp: this.stop,\n        onMouseLeave: this.stop\n      };\n      downEvents = {\n        onMouseDown: editable && !downDisabledClass ? this.down : noop,\n        onMouseUp: this.stop,\n        onMouseLeave: this.stop\n      };\n    }\n\n    var inputDisplayValueFormat = this.formatWrapper(inputDisplayValue);\n    var isUpDisabled = !!upDisabledClass || disabled || readOnly;\n    var isDownDisabled = !!downDisabledClass || disabled || readOnly; // ref for test\n\n    return React.createElement('div', {\n      className: classes,\n      style: props.style,\n      onMouseEnter: props.onMouseEnter,\n      onMouseLeave: props.onMouseLeave,\n      onMouseOver: props.onMouseOver,\n      onMouseOut: props.onMouseOut\n    }, React.createElement('div', {\n      className: prefixCls + '-handler-wrap'\n    }, React.createElement(InputHandler, _extends({\n      ref: 'up',\n      disabled: isUpDisabled,\n      prefixCls: prefixCls,\n      unselectable: 'unselectable'\n    }, upEvents, {\n      role: 'button',\n      'aria-label': 'Increase Value',\n      'aria-disabled': !!isUpDisabled,\n      className: prefixCls + '-handler ' + prefixCls + '-handler-up ' + upDisabledClass\n    }), this.props.upHandler || React.createElement('span', {\n      unselectable: 'unselectable',\n      className: prefixCls + '-handler-up-inner',\n      onClick: preventDefault\n    })), React.createElement(InputHandler, _extends({\n      ref: 'down',\n      disabled: isDownDisabled,\n      prefixCls: prefixCls,\n      unselectable: 'unselectable'\n    }, downEvents, {\n      role: 'button',\n      'aria-label': 'Decrease Value',\n      'aria-disabled': !!isDownDisabled,\n      className: prefixCls + '-handler ' + prefixCls + '-handler-down ' + downDisabledClass\n    }), this.props.downHandler || React.createElement('span', {\n      unselectable: 'unselectable',\n      className: prefixCls + '-handler-down-inner',\n      onClick: preventDefault\n    }))), React.createElement('div', {\n      className: prefixCls + '-input-wrap',\n      role: 'spinbutton',\n      'aria-valuemin': props.min,\n      'aria-valuemax': props.max,\n      'aria-valuenow': value\n    }, React.createElement('input', {\n      type: props.type,\n      placeholder: props.placeholder,\n      onClick: props.onClick,\n      className: prefixCls + '-input',\n      tabIndex: props.tabIndex,\n      autoComplete: 'off',\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      onKeyDown: editable ? this.onKeyDown : noop,\n      onKeyUp: editable ? this.onKeyUp : noop,\n      autoFocus: props.autoFocus,\n      maxLength: props.maxLength,\n      readOnly: props.readOnly,\n      disabled: props.disabled,\n      max: props.max,\n      min: props.min,\n      step: props.step,\n      name: props.name,\n      id: props.id,\n      onChange: this.onChange,\n      ref: 'input',\n      value: inputDisplayValueFormat\n    })));\n  }\n});\nexport default InputNumber;","map":null,"metadata":{},"sourceType":"module"}