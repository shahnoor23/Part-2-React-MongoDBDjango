{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames, Keys, FloatingLabel, guid } from '@progress/kendo-react-common';\nimport ListContainer from '../common/ListContainer';\nimport List from '../common/List';\nimport TagList from './TagList';\nimport SearchBar from '../common/SearchBar';\nimport DropDownBase from '../common/DropDownBase';\nimport { ActiveDescendant } from './../common/settings';\nimport { itemIndexStartsWith, getItemValue, areSame, matchDataCollections, removeDataItems, isPresent, preventDefaultNonInputs } from '../common/utils';\nvar VALIDATION_MESSAGE = 'Please enter a valid value!';\n\nvar preventDefault = function preventDefault(event) {\n  return event.preventDefault();\n};\n\nvar matchTags = function matchTags(tag1, tag2, key) {\n  if (!!tag1 !== !!tag2 || tag1.text !== tag2.text) {\n    return false;\n  }\n\n  return tag1 === tag2 || matchDataCollections(tag1.data, tag2.data, key);\n};\n\nvar isCustom = function isCustom(type) {\n  return type === FocusedItemType.CustomItem;\n};\n\nvar FocusedItemType;\n\n(function (FocusedItemType) {\n  FocusedItemType[FocusedItemType[\"None\"] = 0] = \"None\";\n  FocusedItemType[FocusedItemType[\"ListItem\"] = 1] = \"ListItem\";\n  FocusedItemType[FocusedItemType[\"CustomItem\"] = 2] = \"CustomItem\";\n})(FocusedItemType || (FocusedItemType = {}));\n/**\n * Represents the [KendoReact MultiSelect component]({% slug overview_multiselect %}).\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *    multiselect = null;\n *    render() {\n *       return (\n *          <div>\n *              <MultiSelect\n *                  data={[ \"Albania\", \"Andorra\", \"Austria\", \"Belarus\" ]}\n *                  ref={component => this.multiselect = component}\n *              />\n *              <button onClick={() => alert(this.multiselect.value)}>alert value</button>\n *          </div>\n *       );\n *    }\n * }\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\n\nvar MultiSelect =\n/** @class */\nfunction (_super) {\n  __extends(MultiSelect, _super);\n\n  function MultiSelect() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * @hidden\n     */\n\n\n    _this.state = {\n      activedescendant: ActiveDescendant.PopupList\n    };\n    _this._valueItemsDuringOnChange = null;\n    _this._inputId = guid();\n    _this.base = new DropDownBase(_this);\n    _this._tags = [];\n    _this._skipFocusEvent = false;\n    /**\n     * @hidden\n     */\n\n    _this.handleItemSelect = function (index, state) {\n      var _a = _this.props,\n          _b = _a.data,\n          data = _b === void 0 ? [] : _b,\n          dataItemKey = _a.dataItemKey,\n          virtual = _a.virtual;\n      var skip = virtual ? virtual.skip : 0;\n      var dataItem = data[index - skip];\n\n      var indexInValue = _this.value.findIndex(function (i) {\n        return areSame(i, dataItem, dataItemKey);\n      });\n\n      var newItems = [];\n\n      if (indexInValue !== -1) {\n        // item is already selected\n        newItems = _this.value;\n        newItems.splice(indexInValue, 1);\n      } else {\n        newItems = _this.value.concat([dataItem]);\n      }\n\n      var text = _this.props.filter !== undefined ? _this.props.filter : _this.state.text;\n\n      if (text) {\n        if (_this.state.text) {\n          state.data.text = '';\n        }\n\n        _this.base.filterChanged('', state);\n      }\n\n      if (_this.state.focusedIndex !== undefined) {\n        state.data.focusedIndex = undefined;\n      }\n\n      _this.triggerOnChange(newItems, state);\n\n      _this.base.triggerPageChangeCornerItems(dataItem, state);\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.onTagDelete = function (itemsToRemove, event) {\n      var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;\n\n      var state = _this.base.initState();\n\n      state.syntheticEvent = event;\n\n      if (opened) {\n        _this.base.togglePopup(state);\n      }\n\n      if (!_this.state.focused) {\n        state.data.focused = true;\n      }\n\n      var selected = _this.value;\n      removeDataItems(selected, itemsToRemove, _this.props.dataItemKey);\n\n      _this.triggerOnChange(selected, state);\n\n      _this.applyState(state);\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.itemFocus = function (index, state) {\n      var _a = _this.props,\n          _b = _a.data,\n          data = _b === void 0 ? [] : _b,\n          allowCustom = _a.allowCustom,\n          virtual = _a.virtual;\n      var skip = virtual ? virtual.skip : 0;\n      var text = _this.props.filter !== undefined ? _this.props.filter : _this.state.text;\n\n      var focusedIndex = _this.getFocusedState().focusedIndex;\n\n      var customItem = allowCustom && text;\n      var nextFocusedItem = data[index - skip];\n\n      if (nextFocusedItem && focusedIndex !== index) {\n        if (_this.state.focusedIndex !== index) {\n          state.data.focusedIndex = index;\n          state.data.activedescendant = ActiveDescendant.PopupList;\n        }\n      } else if (customItem && index === -1) {\n        if (_this.state.focusedIndex !== undefined) {\n          state.data.focusedIndex = undefined;\n        }\n      }\n\n      _this.base.triggerPageChangeCornerItems(nextFocusedItem, state);\n    };\n\n    _this.searchbarRef = function (searchbar) {\n      var input = _this._input = searchbar && searchbar.input;\n\n      if (input && _this.state.focused) {\n        setTimeout(function () {\n          return input.focus();\n        }, 0);\n      }\n    };\n\n    _this.onChangeHandler = function (event) {\n      var state = _this.base.initState();\n\n      var value = event.currentTarget.value;\n      var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;\n      state.syntheticEvent = event;\n\n      if (_this.props.filter === undefined) {\n        state.data.text = value;\n      }\n\n      state.data.focusedIndex = undefined;\n\n      if (!opened) {\n        _this.base.togglePopup(state);\n      }\n\n      _this.base.filterChanged(value, state);\n\n      _this.applyState(state);\n    };\n\n    _this.clearButtonClick = function (event) {\n      var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;\n\n      var state = _this.base.initState();\n\n      state.syntheticEvent = event;\n      event.stopPropagation();\n\n      if (_this.value.length > 0) {\n        _this.triggerOnChange([], state);\n      }\n\n      if (_this.state.focusedIndex !== undefined) {\n        state.data.focusedIndex = undefined;\n      }\n\n      if (opened) {\n        _this.base.togglePopup(state);\n      }\n\n      var text = _this.props.filter !== undefined ? _this.props.filter : _this.state.text;\n\n      if (isPresent(text) && text !== '') {\n        _this.base.filterChanged('', state);\n      }\n\n      if (_this.state.text) {\n        state.data.text = '';\n      }\n\n      _this.applyState(state);\n    };\n\n    _this.onInputKeyDown = function (event) {\n      var keyCode = event.keyCode;\n      var text = _this.props.filter !== undefined ? _this.props.filter : _this.state.text;\n      var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;\n\n      var focusedItem = _this.getFocusedState().focusedItem;\n\n      var state = _this.base.initState();\n\n      state.syntheticEvent = event;\n\n      if (!text && _this.value.length > 0 && (keyCode === Keys.left || keyCode === Keys.right || keyCode === Keys.home || keyCode === Keys.end || keyCode === Keys.delete || keyCode === Keys.backspace)) {\n        return _this.onTagsNavigate(event, state);\n      }\n\n      var togglePopup = function togglePopup() {\n        event.preventDefault();\n\n        _this.base.togglePopup(state);\n\n        _this.applyState(state);\n      };\n\n      if (opened) {\n        if (event.altKey && keyCode === Keys.up) {\n          togglePopup();\n        } else if (keyCode === Keys.up || keyCode === Keys.down) {\n          event.preventDefault();\n\n          _this.onNavigate(state, keyCode);\n        } else if (keyCode === Keys.enter) {\n          event.preventDefault();\n\n          if (_this.props.allowCustom && text && focusedItem === null) {\n            _this.customItemSelect(event);\n          } else {\n            _this.selectFocusedItem(event);\n          }\n        } else if (keyCode === Keys.esc) {\n          togglePopup();\n        }\n      } else if (event.altKey && keyCode === Keys.down) {\n        togglePopup();\n      }\n    };\n\n    _this.renderListContainer = function () {\n      var base = _this.base;\n      var _a = _this.props,\n          header = _a.header,\n          footer = _a.footer,\n          allowCustom = _a.allowCustom,\n          dir = _a.dir;\n\n      var popupSettings = _this.base.getPopupSettings();\n\n      var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;\n      var text = _this.props.filter !== undefined ? _this.props.filter : _this.state.text;\n      var virtual = _this.props.virtual !== undefined;\n      var popupWidth = popupSettings.width !== undefined ? popupSettings.width : base.popupWidth;\n      var listContainerProps = {\n        onMouseDown: preventDefault,\n        dir: dir !== undefined ? dir : base.dirCalculated,\n        onBlur: _this.handleBlur,\n        width: popupWidth,\n        popupSettings: {\n          className: classNames('k-list-container k-reset', popupSettings.className),\n          animate: popupSettings.animate,\n          anchor: _this.element || undefined,\n          show: opened,\n          open: _this.onPopupOpened,\n          close: _this.onPopupClosed\n        }\n      };\n\n      var focusedType = _this.getFocusedState().focusedType;\n\n      var customItem = allowCustom && text && React.createElement(\"div\", {\n        className: \"k-list\",\n        key: \"customitem\",\n        onClick: _this.customItemSelect\n      }, React.createElement(\"div\", {\n        className: classNames('k-item k-custom-item', {\n          'k-state-focused': isCustom(focusedType)\n        })\n      }, text, React.createElement(\"span\", {\n        className: \"k-icon k-i-plus\",\n        style: {\n          float: 'right'\n        }\n      })));\n      return React.createElement(ListContainer, __assign({}, listContainerProps), virtual && header, _this.base.renderScrollWrapper(!virtual ? [header, customItem, _this.renderList(), footer, _this.base.renderScrollElement()] : [customItem, _this.renderList(), _this.base.renderScrollElement()]), virtual && footer);\n    };\n\n    _this.renderList = function () {\n      var _a = _this.props,\n          _b = _a.data,\n          data = _b === void 0 ? [] : _b,\n          textField = _a.textField,\n          listNoDataRender = _a.listNoDataRender,\n          itemRender = _a.itemRender,\n          dataItemKey = _a.dataItemKey,\n          virtual = _a.virtual;\n      var vs = _this.base.vs;\n      var skip = virtual ? virtual.skip : 0;\n      var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;\n\n      var focusedIndex = _this.getFocusedState().focusedIndex;\n\n      var popupSettings = _this.base.getPopupSettings();\n\n      var translate = \"translateY(\" + vs.translate + \"px)\";\n      return React.createElement(List, {\n        id: _this.base.listBoxId,\n        show: opened,\n        data: data.slice(),\n        focusedIndex: focusedIndex - skip,\n        value: _this.value,\n        textField: textField,\n        valueField: dataItemKey,\n        optionsGuid: _this.base.guid,\n        listRef: function listRef(list) {\n          return vs.list = _this.base.list = list;\n        },\n        wrapperStyle: vs.enabled ? {\n          float: 'left',\n          width: '100%'\n        } : {\n          maxHeight: popupSettings.height\n        },\n        wrapperCssClass: vs.enabled ? undefined : 'k-list-scroller',\n        listStyle: vs.enabled ? {\n          transform: translate\n        } : undefined,\n        key: \"listKey\",\n        skip: skip,\n        onClick: _this.handleItemClick,\n        itemRender: itemRender,\n        noDataRender: listNoDataRender\n      });\n    };\n\n    _this.customItemSelect = function (event) {\n      var _a;\n\n      var itemText = _this.props.filter !== undefined ? _this.props.filter : _this.state.text;\n      var textField = _this.props.textField;\n\n      if (!itemText) {\n        return;\n      }\n\n      var state = _this.base.initState();\n\n      state.syntheticEvent = event;\n      var item = textField ? (_a = {}, _a[textField] = itemText, _a) : itemText;\n\n      if (_this.state.text !== undefined) {\n        state.data.text = '';\n      }\n\n      state.data.focusedIndex = undefined;\n\n      _this.base.filterChanged('', state);\n\n      var newItems = _this.value.concat([item]);\n\n      _this.triggerOnChange(newItems, state);\n\n      _this.base.togglePopup(state);\n\n      _this.applyState(state);\n    };\n\n    _this.handleWrapperClick = function (event) {\n      var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;\n      var input = _this._input;\n\n      if (!opened && input) {\n        _this.focusElement(input);\n      }\n\n      var state = _this.base.initState();\n\n      state.syntheticEvent = event;\n\n      if (!_this.state.focused) {\n        state.events.push({\n          type: 'onFocus'\n        });\n        state.data.focused = true;\n      }\n\n      _this.base.togglePopup(state);\n\n      _this.applyState(state);\n    };\n\n    _this.handleItemClick = function (index, event) {\n      var state = _this.base.initState();\n\n      state.syntheticEvent = event;\n\n      _this.handleItemSelect(index, state);\n\n      if (_this.props.autoClose) {\n        _this.base.togglePopup(state);\n      }\n\n      _this.applyState(state);\n    };\n\n    _this.handleBlur = function (event) {\n      if (!_this.state.focused || _this._skipFocusEvent) {\n        return;\n      }\n\n      var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;\n\n      var state = _this.base.initState();\n\n      var _a = _this.props,\n          allowCustom = _a.allowCustom,\n          filterable = _a.filterable;\n      state.syntheticEvent = event;\n      state.data.focused = false;\n      state.events.push({\n        type: 'onBlur'\n      });\n\n      if (opened) {\n        if (_this.state.opened) {\n          state.data.opened = false;\n        }\n\n        state.events.push({\n          type: 'onClose'\n        });\n      }\n\n      if (!allowCustom && !filterable && _this.state.text) {\n        state.data.text = '';\n      }\n\n      _this.applyState(state);\n    };\n\n    _this.handleFocus = function (event) {\n      if (_this._skipFocusEvent) {\n        return;\n      }\n\n      _this.base.handleFocus(event);\n    };\n\n    _this.onPopupOpened = function () {\n      if (_this._input && _this.state.focused) {\n        _this.focusElement(_this._input);\n      }\n    };\n\n    _this.onPopupClosed = function () {\n      if (_this.state.focused) {\n        setTimeout(function () {\n          if (_this.state.focused) {\n            _this.focusElement(_this._input);\n          }\n        }, 0);\n      }\n    };\n\n    _this.setValidity = function () {\n      if (_this._input && _this._input.setCustomValidity) {\n        _this._input.setCustomValidity(_this.validity.valid ? '' : _this.props.validationMessage || VALIDATION_MESSAGE);\n      }\n    };\n\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  MultiSelect.prototype.focus = function () {\n    if (this._input) {\n      this._input.focus();\n    }\n  };\n\n  Object.defineProperty(MultiSelect.prototype, \"element\", {\n    /**\n     * @hidden\n     */\n    get: function get() {\n      return this._element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MultiSelect.prototype, \"value\", {\n    /**\n     * Represents the value of the MultiSelect.\n     */\n    get: function get() {\n      var result = [];\n\n      if (this._valueItemsDuringOnChange) {\n        result.push.apply(result, this._valueItemsDuringOnChange);\n      } else if (this.props.value) {\n        result.push.apply(result, this.props.value);\n      } else if (this.state.value) {\n        result.push.apply(result, this.state.value);\n      } else if (this.props.defaultValue) {\n        result.push.apply(result, this.props.defaultValue);\n      }\n\n      return result;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MultiSelect.prototype, \"name\", {\n    /**\n     * Gets the `name` property of the MultiSelect.\n     */\n    get: function get() {\n      return this.props.name;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MultiSelect.prototype, \"validity\", {\n    /**\n     * Represents the validity state into which the MultiSelect is set.\n     */\n    get: function get() {\n      var customError = this.props.validationMessage !== undefined;\n      var isValid = !this.required || this.value !== null && this.value.length > 0 && this.value !== undefined;\n      var valid = this.props.valid !== undefined ? this.props.valid : isValid;\n      return {\n        customError: customError,\n        valid: valid,\n        valueMissing: this.value === null\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MultiSelect.prototype, \"required\", {\n    /**\n     * @hidden\n     */\n    get: function get() {\n      return this.props.required !== undefined ? this.props.required : MultiSelect.defaultProps.required;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MultiSelect.prototype, \"validityStyles\", {\n    get: function get() {\n      return this.props.validityStyles !== undefined ? this.props.validityStyles : MultiSelect.defaultProps.validityStyles;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  MultiSelect.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var _a = this.props,\n        virtual = _a.virtual,\n        data = _a.data;\n    var skip = virtual ? virtual.skip : 0;\n    var prevTotal = prevProps.virtual ? prevProps.virtual.total : 0;\n    var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;\n    var prevOpened = prevProps.opened !== undefined ? prevProps.opened : prevState.opened;\n    var opening = !prevOpened && opened;\n    var closing = prevOpened && !opened;\n    var popupSettings = this.base.getPopupSettings();\n\n    if (!popupSettings.animate && closing) {\n      this.onPopupClosed();\n    }\n\n    if (virtual && virtual.total !== prevTotal) {\n      this.base.vs.calcScrollElementHeight();\n      this.base.vs.reset();\n    } else {\n      var _b = this.getFocusedState(),\n          focusedItem = _b.focusedItem,\n          focusedIndex = _b.focusedIndex;\n\n      var focusedItemChanged = focusedIndex !== undefined && prevState.focusedIndex !== focusedIndex;\n      var prevData = prevProps.data;\n\n      if (opening && virtual) {\n        this.base.scrollToVirtualItem(virtual, focusedIndex - skip);\n      } else if (opening && !virtual) {\n        this.base.scrollToItem(focusedIndex);\n      } else if (opened && prevOpened && focusedItem && (focusedItemChanged || prevData !== data)) {\n        this.base.scrollToItem(focusedIndex - skip);\n      }\n    }\n\n    this.setValidity();\n  };\n  /**\n   * @hidden\n   */\n\n\n  MultiSelect.prototype.componentDidMount = function () {\n    this.base.didMount();\n    this.setValidity();\n  };\n  /**\n   * @hidden\n   */\n\n\n  MultiSelect.prototype.onNavigate = function (state, keyCode) {\n    var _a = this.props,\n        allowCustom = _a.allowCustom,\n        _b = _a.data,\n        data = _b === void 0 ? [] : _b;\n    var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;\n    var text = this.props.filter !== undefined ? this.props.filter : this.state.text;\n\n    var _c = this.getFocusedState(),\n        focusedType = _c.focusedType,\n        focusedIndex = _c.focusedIndex;\n\n    var customItem = allowCustom && text;\n    var customItemFocused = isCustom(focusedType);\n    var base = this.base;\n    var vs = base.vs;\n\n    if (opened && keyCode === Keys.up && customItemFocused) {\n      if (this.state.focusedIndex !== undefined) {\n        state.data.focusedIndex = undefined;\n      }\n    } else {\n      var newFocused = base.navigation.navigate({\n        keyCode: keyCode,\n        current: focusedIndex,\n        max: (vs.enabled ? vs.total : data.length) - 1,\n        min: customItem ? -1 : 0\n      });\n\n      if (newFocused !== undefined) {\n        this.itemFocus(newFocused, state);\n      }\n    }\n\n    this.applyState(state);\n  };\n  /**\n   * @hidden\n   */\n\n\n  MultiSelect.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        style = _a.style,\n        className = _a.className,\n        label = _a.label,\n        dir = _a.dir,\n        disabled = _a.disabled,\n        tags = _a.tags,\n        textField = _a.textField,\n        dataItemKey = _a.dataItemKey,\n        virtual = _a.virtual;\n    var _b = this.state,\n        focused = _b.focused,\n        text = _b.text,\n        focusedTag = _b.focusedTag;\n    var vs = this.base.vs;\n    vs.enabled = virtual !== undefined;\n\n    if (virtual !== undefined) {\n      vs.skip = virtual.skip;\n      vs.total = virtual.total;\n      vs.pageSize = virtual.pageSize;\n    }\n\n    var tagsToRender = [];\n\n    if (tags === undefined) {\n      this.value.forEach(function (item) {\n        tagsToRender.push({\n          text: getItemValue(item, textField),\n          data: [item]\n        });\n      });\n    } else {\n      tagsToRender.push.apply(tagsToRender, tags);\n    }\n\n    this.setItems(tagsToRender, this._tags);\n    var isValid = !this.validityStyles || this.validity.valid;\n    var component = React.createElement(\"span\", {\n      ref: function ref(dropdown) {\n        return _this._element = dropdown;\n      },\n      className: classNames('k-widget k-multiselect k-header', className, {\n        'k-state-focused': focused && !disabled,\n        'k-state-invalid': !isValid,\n        'k-state-disabled': disabled\n      }),\n      style: !label ? style : __assign({}, style, {\n        width: undefined\n      }),\n      dir: dir,\n      onFocus: this.handleFocus,\n      onBlur: this.handleBlur\n    }, React.createElement(\"div\", {\n      onClick: this.handleWrapperClick,\n      ref: function ref(wrapper) {\n        return _this.base.wrapper = wrapper;\n      },\n      className: \"k-multiselect-wrap k-floatwrap\",\n      onMouseDown: preventDefaultNonInputs\n    }, tagsToRender.length > 0 && React.createElement(TagList, {\n      tagRender: this.props.tagRender,\n      onTagDelete: this.onTagDelete,\n      data: tagsToRender,\n      guid: this.base.guid,\n      focused: focusedTag ? tagsToRender.find(function (t) {\n        return matchTags(t, focusedTag, dataItemKey);\n      }) : undefined\n    }), this.renderSearchbar(), this.props.loading && React.createElement(\"span\", {\n      className: \"k-icon k-i-loading\"\n    })), this.renderListContainer());\n    return label ? React.createElement(FloatingLabel, {\n      label: label,\n      value: text || getItemValue(this.value[0], textField),\n      style: {\n        width: style ? style.width : undefined\n      },\n      children: component,\n      valid: isValid,\n      id: this._inputId\n    }) : component;\n  };\n\n  MultiSelect.prototype.renderSearchbar = function () {\n    var _a = this.state,\n        activedescendant = _a.activedescendant,\n        focusedTag = _a.focusedTag;\n    var _b = this.props,\n        disabled = _b.disabled,\n        placeholder = _b.placeholder;\n    var text = (this.props.filter !== undefined ? this.props.filter : this.state.text) || '';\n    var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;\n    var focusedIndex = this.getFocusedState().focusedIndex;\n    var clearButton = !!text || this.value.length > 0;\n    var placeholderToShow = this.value.length === 0 && !text ? placeholder : undefined;\n    var ariaActivedescendant = activedescendant === ActiveDescendant.TagsList && focusedTag !== undefined ? \"tag-\" + this.base.guid + \"-\" + focusedTag.text.replace(/\\s+/g, '-') : \"option-\" + this.base.guid + \"-\" + focusedIndex;\n    return React.createElement(SearchBar, {\n      id: this._inputId,\n      size: Math.max((placeholderToShow || '').length, text.length, 1),\n      tabIndex: this.props.tabIndex,\n      accessKey: this.props.accessKey,\n      placeholder: placeholderToShow,\n      value: text,\n      onChange: this.onChangeHandler,\n      onKeyDown: this.onInputKeyDown,\n      ref: this.searchbarRef,\n      disabled: disabled,\n      expanded: opened,\n      owns: this.base.listBoxId,\n      activedescendant: ariaActivedescendant,\n      describedby: 'tagslist-' + this.base.guid,\n      clearButton: clearButton,\n      clearButtonClick: this.clearButtonClick\n    });\n  };\n\n  MultiSelect.prototype.onTagsNavigate = function (event, state) {\n    var keyCode = event.keyCode;\n    var focusedTag = this.state.focusedTag;\n    var tags = this._tags;\n    var itemsKey = this.props.dataItemKey;\n    var focusedIndex = focusedTag ? tags.findIndex(function (t) {\n      return matchTags(t, focusedTag, itemsKey);\n    }) : -1;\n    var newFocusedTag = undefined;\n    var hasFocused = focusedIndex !== -1;\n\n    if (keyCode === Keys.left) {\n      if (hasFocused) {\n        focusedIndex = Math.max(0, focusedIndex - 1);\n      } else {\n        focusedIndex = tags.length - 1;\n      }\n\n      newFocusedTag = tags[focusedIndex];\n    } else if (keyCode === Keys.right) {\n      if (focusedIndex === tags.length - 1) {\n        newFocusedTag = undefined;\n      } else if (hasFocused) {\n        focusedIndex = Math.min(tags.length - 1, focusedIndex + 1);\n        newFocusedTag = tags[focusedIndex];\n      }\n    } else if (keyCode === Keys.home) {\n      newFocusedTag = tags[0];\n    } else if (keyCode === Keys.end) {\n      newFocusedTag = tags[tags.length - 1];\n    } else if (keyCode === Keys.delete) {\n      if (hasFocused) {\n        var items = this.value;\n        removeDataItems(items, tags[focusedIndex].data, itemsKey);\n        this.triggerOnChange(items, state);\n      }\n    } else if (keyCode === Keys.backspace) {\n      var items = this.value;\n\n      if (hasFocused) {\n        removeDataItems(items, tags[focusedIndex].data, itemsKey);\n        this.triggerOnChange(items, state);\n      } else if (!hasFocused && tags.length) {\n        var removed = tags.pop();\n        removeDataItems(items, removed.data, itemsKey);\n        this.triggerOnChange(items, state);\n      }\n    }\n\n    if (newFocusedTag !== focusedTag) {\n      state.data.focusedTag = newFocusedTag;\n      state.data.activedescendant = ActiveDescendant.TagsList;\n    }\n\n    this.applyState(state);\n  };\n\n  MultiSelect.prototype.triggerOnChange = function (items, state) {\n    if (this.props.value === undefined) {\n      state.data.value = items.slice();\n    }\n\n    this._valueItemsDuringOnChange = [];\n    this.setItems(items, this._valueItemsDuringOnChange);\n    state.events.push({\n      type: 'onChange'\n    });\n  };\n\n  MultiSelect.prototype.selectFocusedItem = function (event) {\n    var _a = this.props,\n        _b = _a.data,\n        data = _b === void 0 ? [] : _b,\n        virtual = _a.virtual;\n    var focusedIndex = this.getFocusedState().focusedIndex;\n    var skip = virtual ? virtual.skip : 0;\n\n    if (data[focusedIndex - skip] !== undefined) {\n      this.handleItemClick(focusedIndex, event);\n    }\n  };\n\n  MultiSelect.prototype.setItems = function (srcItems, destItems) {\n    destItems.length = 0;\n    destItems.push.apply(destItems, srcItems);\n  };\n\n  MultiSelect.prototype.getFocusedState = function () {\n    var focusedIndex = this.state.focusedIndex;\n    var text = this.props.filter !== undefined ? this.props.filter : this.state.text;\n    var _a = this.props,\n        allowCustom = _a.allowCustom,\n        _b = _a.data,\n        data = _b === void 0 ? [] : _b,\n        dataItemKey = _a.dataItemKey,\n        virtual = _a.virtual,\n        textField = _a.textField,\n        _c = _a.focusedItemIndex,\n        focusedItemIndex = _c === void 0 ? itemIndexStartsWith : _c;\n    var skip = virtual && virtual.skip || 0;\n    var focusedInd;\n\n    if (focusedIndex !== undefined) {\n      return {\n        focusedIndex: focusedIndex,\n        focusedItem: data[focusedIndex - skip],\n        focusedType: FocusedItemType.ListItem\n      };\n    }\n\n    var selected = this.value;\n\n    if (allowCustom && text) {\n      return {\n        focusedItem: null,\n        focusedIndex: -1,\n        focusedType: FocusedItemType.CustomItem\n      };\n    } else if (text) {\n      focusedInd = focusedItemIndex(data, text, textField);\n      return {\n        focusedItem: data[focusedInd],\n        focusedIndex: focusedInd + skip,\n        focusedType: FocusedItemType.ListItem\n      };\n    } else if (selected.length) {\n      var last_1 = selected[selected.length - 1];\n      focusedInd = data.findIndex(function (i) {\n        return areSame(i, last_1, dataItemKey);\n      });\n\n      if (data[focusedInd] !== undefined) {\n        return {\n          focusedIndex: focusedInd + skip,\n          focusedItem: data[focusedInd],\n          focusedType: FocusedItemType.ListItem\n        };\n      }\n\n      return {\n        focusedType: FocusedItemType.None,\n        focusedIndex: -1\n      };\n    }\n\n    return skip === 0 ? {\n      focusedItem: data[0],\n      focusedIndex: 0,\n      focusedType: FocusedItemType.ListItem\n    } : {\n      focusedType: FocusedItemType.None,\n      focusedIndex: -1\n    };\n  };\n\n  MultiSelect.prototype.focusElement = function (element) {\n    var _this = this;\n\n    this._skipFocusEvent = true;\n    element.focus();\n    setTimeout(function () {\n      return _this._skipFocusEvent = false;\n    }, 30);\n  };\n\n  MultiSelect.prototype.applyState = function (state) {\n    this.base.applyState(state);\n    this._valueItemsDuringOnChange = null;\n  };\n  /**\n   * @hidden\n   */\n\n\n  MultiSelect.propTypes = __assign({}, DropDownBase.propTypes, {\n    autoClose: PropTypes.bool,\n    value: PropTypes.arrayOf(PropTypes.any),\n    defaultValue: PropTypes.arrayOf(PropTypes.any),\n    dataItemKey: PropTypes.string,\n    placeholder: PropTypes.string,\n    tags: PropTypes.arrayOf(PropTypes.shape({\n      text: PropTypes.string,\n      data: PropTypes.arrayOf(PropTypes.any)\n    })),\n    tagRender: PropTypes.func\n  });\n  /**\n   * @hidden\n   */\n\n  MultiSelect.defaultProps = __assign({}, DropDownBase.defaultProps, {\n    autoClose: true,\n    required: false\n  });\n  return MultiSelect;\n}(React.Component);\n\nexport default MultiSelect;","map":null,"metadata":{},"sourceType":"module"}