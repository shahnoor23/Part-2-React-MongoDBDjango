{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport TableRow from './TableRow';\nimport TableHeader from './TableHeader';\nimport { measureScrollbar, debounce, warningOnce } from './utils';\nimport shallowequal from 'shallowequal';\nimport addEventListener from 'rc-util/es/Dom/addEventListener';\nimport ColumnManager from './ColumnManager';\nimport createStore from './createStore';\nimport classes from 'component-classes';\n\nvar Table = function (_React$Component) {\n  _inherits(Table, _React$Component);\n\n  function Table(props) {\n    _classCallCheck(this, Table);\n\n    var _this = _possibleConstructorReturn(this, (Table.__proto__ || Object.getPrototypeOf(Table)).call(this, props));\n\n    _this.onExpanded = function (expanded, record, e, index) {\n      if (e) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n\n      var info = _this.findExpandedRow(record);\n\n      if (typeof info !== 'undefined' && !expanded) {\n        _this.onRowDestroy(record, index);\n      } else if (!info && expanded) {\n        var expandedRows = _this.getExpandedRows().concat();\n\n        expandedRows.push(_this.getRowKey(record, index));\n\n        _this.onExpandedRowsChange(expandedRows);\n      }\n\n      _this.props.onExpand(expanded, record);\n    };\n\n    _this.onRowDestroy = function (record, rowIndex) {\n      var expandedRows = _this.getExpandedRows().concat();\n\n      var rowKey = _this.getRowKey(record, rowIndex);\n\n      var index = -1;\n      expandedRows.forEach(function (r, i) {\n        if (r === rowKey) {\n          index = i;\n        }\n      });\n\n      if (index !== -1) {\n        expandedRows.splice(index, 1);\n      }\n\n      _this.onExpandedRowsChange(expandedRows);\n    };\n\n    _this.handleWindowResize = function () {\n      _this.syncFixedTableRowHeight();\n\n      _this.setScrollPositionClassName();\n    };\n\n    _this.syncFixedTableRowHeight = function () {\n      var tableRect = _this.tableNode.getBoundingClientRect();\n\n      if (tableRect.height !== undefined && tableRect.height <= 0) {\n        return;\n      }\n\n      var prefixCls = _this.props.prefixCls;\n      var headRows = _this.refs.headTable ? _this.refs.headTable.querySelectorAll('thead') : _this.refs.bodyTable.querySelectorAll('thead');\n      var bodyRows = _this.refs.bodyTable.querySelectorAll('.' + prefixCls + '-row') || [];\n      var fixedColumnsHeadRowsHeight = [].map.call(headRows, function (row) {\n        return row.getBoundingClientRect().height || 'auto';\n      });\n      var fixedColumnsBodyRowsHeight = [].map.call(bodyRows, function (row) {\n        return row.getBoundingClientRect().height || 'auto';\n      });\n\n      if (shallowequal(_this.state.fixedColumnsHeadRowsHeight, fixedColumnsHeadRowsHeight) && shallowequal(_this.state.fixedColumnsBodyRowsHeight, fixedColumnsBodyRowsHeight)) {\n        return;\n      }\n\n      _this.setState({\n        fixedColumnsHeadRowsHeight: fixedColumnsHeadRowsHeight,\n        fixedColumnsBodyRowsHeight: fixedColumnsBodyRowsHeight\n      });\n    };\n\n    _this.handleBodyScrollLeft = function (e) {\n      if (e.currentTarget !== e.target) {\n        return;\n      }\n\n      var target = e.target;\n      var _this$props$scroll = _this.props.scroll,\n          scroll = _this$props$scroll === undefined ? {} : _this$props$scroll;\n      var _this$refs = _this.refs,\n          headTable = _this$refs.headTable,\n          bodyTable = _this$refs.bodyTable;\n\n      if (target.scrollLeft !== _this.lastScrollLeft && scroll.x) {\n        if (target === bodyTable && headTable) {\n          headTable.scrollLeft = target.scrollLeft;\n        } else if (target === headTable && bodyTable) {\n          bodyTable.scrollLeft = target.scrollLeft;\n        }\n\n        _this.setScrollPositionClassName();\n      }\n\n      _this.lastScrollLeft = target.scrollLeft;\n    };\n\n    _this.handleBodyScrollTop = function (e) {\n      var target = e.target;\n      var _this$props$scroll2 = _this.props.scroll,\n          scroll = _this$props$scroll2 === undefined ? {} : _this$props$scroll2;\n      var _this$refs2 = _this.refs,\n          headTable = _this$refs2.headTable,\n          bodyTable = _this$refs2.bodyTable,\n          fixedColumnsBodyLeft = _this$refs2.fixedColumnsBodyLeft,\n          fixedColumnsBodyRight = _this$refs2.fixedColumnsBodyRight;\n\n      if (target.scrollTop !== _this.lastScrollTop && scroll.y && target !== headTable) {\n        var scrollTop = target.scrollTop;\n\n        if (fixedColumnsBodyLeft && target !== fixedColumnsBodyLeft) {\n          fixedColumnsBodyLeft.scrollTop = scrollTop;\n        }\n\n        if (fixedColumnsBodyRight && target !== fixedColumnsBodyRight) {\n          fixedColumnsBodyRight.scrollTop = scrollTop;\n        }\n\n        if (bodyTable && target !== bodyTable) {\n          bodyTable.scrollTop = scrollTop;\n        }\n      }\n\n      _this.lastScrollTop = target.scrollTop;\n    };\n\n    _this.handleBodyScroll = function (e) {\n      _this.handleBodyScrollLeft(e);\n\n      _this.handleBodyScrollTop(e);\n    };\n\n    _this.handleRowHover = function (isHover, key) {\n      _this.store.setState({\n        currentHoverKey: isHover ? key : null\n      });\n    };\n\n    var expandedRowKeys = [];\n    var rows = [].concat(_toConsumableArray(props.data));\n    _this.columnManager = new ColumnManager(props.columns, props.children);\n    _this.store = createStore({\n      currentHoverKey: null,\n      expandedRowsHeight: {}\n    });\n\n    _this.setScrollPosition('left');\n\n    if (props.defaultExpandAllRows) {\n      for (var i = 0; i < rows.length; i++) {\n        var row = rows[i];\n        expandedRowKeys.push(_this.getRowKey(row, i));\n        rows = rows.concat(row[props.childrenColumnName] || []);\n      }\n    } else {\n      expandedRowKeys = props.expandedRowKeys || props.defaultExpandedRowKeys;\n    }\n\n    _this.state = {\n      expandedRowKeys: expandedRowKeys,\n      currentHoverKey: null,\n      fixedColumnsHeadRowsHeight: [],\n      fixedColumnsBodyRowsHeight: []\n    };\n    return _this;\n  }\n\n  _createClass(Table, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (this.columnManager.isAnyColumnsFixed()) {\n        this.handleWindowResize();\n        this.debouncedWindowResize = debounce(this.handleWindowResize, 150);\n        this.resizeEvent = addEventListener(window, 'resize', this.debouncedWindowResize);\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if ('expandedRowKeys' in nextProps) {\n        this.setState({\n          expandedRowKeys: nextProps.expandedRowKeys\n        });\n      }\n\n      if (nextProps.columns && nextProps.columns !== this.props.columns) {\n        this.columnManager.reset(nextProps.columns);\n      } else if (nextProps.children !== this.props.children) {\n        this.columnManager.reset(null, nextProps.children);\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      if (this.columnManager.isAnyColumnsFixed()) {\n        this.handleWindowResize();\n      }\n\n      if (prevProps.data.length > 0 && this.props.data.length === 0 && this.hasScrollX()) {\n        this.resetScrollX();\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.resizeEvent) {\n        this.resizeEvent.remove();\n      }\n\n      if (this.debouncedWindowResize) {\n        this.debouncedWindowResize.cancel();\n      }\n    }\n  }, {\n    key: 'onExpandedRowsChange',\n    value: function onExpandedRowsChange(expandedRowKeys) {\n      if (!this.props.expandedRowKeys) {\n        this.setState({\n          expandedRowKeys: expandedRowKeys\n        });\n      }\n\n      this.props.onExpandedRowsChange(expandedRowKeys);\n    }\n  }, {\n    key: 'getRowKey',\n    value: function getRowKey(record, index) {\n      var rowKey = this.props.rowKey;\n      var key = typeof rowKey === 'function' ? rowKey(record, index) : record[rowKey];\n      warningOnce(key !== undefined, 'Each record in table should have a unique `key` prop,' + 'or set `rowKey` to an unique primary key.');\n      return key === undefined ? index : key;\n    }\n  }, {\n    key: 'getExpandedRows',\n    value: function getExpandedRows() {\n      return this.props.expandedRowKeys || this.state.expandedRowKeys;\n    }\n  }, {\n    key: 'getHeader',\n    value: function getHeader(columns, fixed) {\n      var _props = this.props,\n          showHeader = _props.showHeader,\n          expandIconAsCell = _props.expandIconAsCell,\n          prefixCls = _props.prefixCls;\n      var rows = this.getHeaderRows(columns);\n\n      if (expandIconAsCell && fixed !== 'right') {\n        rows[0].unshift({\n          key: 'rc-table-expandIconAsCell',\n          className: prefixCls + '-expand-icon-th',\n          title: '',\n          rowSpan: rows.length\n        });\n      }\n\n      var trStyle = fixed ? this.getHeaderRowStyle(columns, rows) : null;\n      return showHeader ? React.createElement(TableHeader, {\n        prefixCls: prefixCls,\n        rows: rows,\n        rowStyle: trStyle\n      }) : null;\n    }\n  }, {\n    key: 'getHeaderRows',\n    value: function getHeaderRows(columns) {\n      var _this2 = this;\n\n      var currentRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var rows = arguments[2];\n      rows = rows || [];\n      rows[currentRow] = rows[currentRow] || [];\n      columns.forEach(function (column) {\n        if (column.rowSpan && rows.length < column.rowSpan) {\n          while (rows.length < column.rowSpan) {\n            rows.push([]);\n          }\n        }\n\n        var cell = {\n          key: column.key,\n          className: column.className || '',\n          children: column.title\n        };\n\n        if (column.children) {\n          _this2.getHeaderRows(column.children, currentRow + 1, rows);\n        }\n\n        if ('colSpan' in column) {\n          cell.colSpan = column.colSpan;\n        }\n\n        if ('rowSpan' in column) {\n          cell.rowSpan = column.rowSpan;\n        }\n\n        if (cell.colSpan !== 0) {\n          rows[currentRow].push(cell);\n        }\n      });\n      return rows.filter(function (row) {\n        return row.length > 0;\n      });\n    }\n  }, {\n    key: 'getExpandedRow',\n    value: function getExpandedRow(key, content, visible, className, fixed) {\n      var _props2 = this.props,\n          prefixCls = _props2.prefixCls,\n          expandIconAsCell = _props2.expandIconAsCell;\n      var colCount = void 0;\n\n      if (fixed === 'left') {\n        colCount = this.columnManager.leftLeafColumns().length;\n      } else if (fixed === 'right') {\n        colCount = this.columnManager.rightLeafColumns().length;\n      } else {\n        colCount = this.columnManager.leafColumns().length;\n      }\n\n      var columns = [{\n        key: 'extra-row',\n        render: function render() {\n          return {\n            props: {\n              colSpan: colCount\n            },\n            children: fixed !== 'right' ? content : '&nbsp;'\n          };\n        }\n      }];\n\n      if (expandIconAsCell && fixed !== 'right') {\n        columns.unshift({\n          key: 'expand-icon-placeholder',\n          render: function render() {\n            return null;\n          }\n        });\n      }\n\n      return React.createElement(TableRow, {\n        columns: columns,\n        visible: visible,\n        className: className,\n        key: key + '-extra-row',\n        rowKey: key + '-extra-row',\n        prefixCls: prefixCls + '-expanded-row',\n        indent: 1,\n        expandable: false,\n        store: this.store,\n        expandedRow: true,\n        fixed: !!fixed\n      });\n    }\n  }, {\n    key: 'getRowsByData',\n    value: function getRowsByData(originalData, visible, indent, columns, fixed) {\n      var props = this.props;\n      var childrenColumnName = props.childrenColumnName,\n          expandedRowRender = props.expandedRowRender,\n          expandRowByClick = props.expandRowByClick,\n          rowClassName = props.rowClassName,\n          rowRef = props.rowRef,\n          expandedRowClassName = props.expandedRowClassName,\n          onRowClick = props.onRowClick,\n          onRowDoubleClick = props.onRowDoubleClick,\n          onRowContextMenu = props.onRowContextMenu,\n          onRowMouseEnter = props.onRowMouseEnter,\n          onRowMouseLeave = props.onRowMouseLeave;\n      var fixedColumnsBodyRowsHeight = this.state.fixedColumnsBodyRowsHeight;\n      var rst = [];\n      var needIndentSpaced = props.data.some(function (record) {\n        return record[childrenColumnName];\n      });\n      var expandIconAsCell = fixed !== 'right' ? props.expandIconAsCell : false;\n      var expandIconColumnIndex = fixed !== 'right' ? props.expandIconColumnIndex : -1;\n      var data = originalData;\n\n      for (var i = 0; i < data.length; i++) {\n        var record = data[i];\n        var key = this.getRowKey(record, i);\n        var childrenColumn = record[childrenColumnName];\n        var isRowExpanded = this.isRowExpanded(record, i);\n        var expandedRowContent = void 0;\n\n        if (expandedRowRender && isRowExpanded) {\n          expandedRowContent = expandedRowRender(record, i, indent);\n        }\n\n        var className = rowClassName(record, i, indent);\n        var onHoverProps = {};\n\n        if (this.columnManager.isAnyColumnsFixed()) {\n          onHoverProps.onHover = this.handleRowHover;\n        }\n\n        var height = fixed && fixedColumnsBodyRowsHeight[i] ? fixedColumnsBodyRowsHeight[i] : null;\n        var leafColumns = void 0;\n\n        if (fixed === 'left') {\n          leafColumns = this.columnManager.leftLeafColumns();\n        } else if (fixed === 'right') {\n          leafColumns = this.columnManager.rightLeafColumns();\n        } else {\n          leafColumns = this.columnManager.leafColumns();\n        }\n\n        rst.push(React.createElement(TableRow, _extends({\n          indent: indent,\n          indentSize: props.indentSize,\n          needIndentSpaced: needIndentSpaced,\n          className: className,\n          record: record,\n          expandIconAsCell: expandIconAsCell,\n          onDestroy: this.onRowDestroy,\n          index: i,\n          visible: visible,\n          expandRowByClick: expandRowByClick,\n          onExpand: this.onExpanded,\n          expandable: childrenColumn || expandedRowRender,\n          expanded: isRowExpanded,\n          prefixCls: props.prefixCls + '-row',\n          childrenColumnName: childrenColumnName,\n          columns: leafColumns,\n          expandIconColumnIndex: expandIconColumnIndex,\n          onRowClick: onRowClick,\n          onRowDoubleClick: onRowDoubleClick,\n          onRowContextMenu: onRowContextMenu,\n          onRowMouseEnter: onRowMouseEnter,\n          onRowMouseLeave: onRowMouseLeave,\n          height: height\n        }, onHoverProps, {\n          key: key,\n          hoverKey: key,\n          ref: rowRef(record, i, indent),\n          store: this.store\n        })));\n        var subVisible = visible && isRowExpanded;\n\n        if (expandedRowContent && isRowExpanded) {\n          rst.push(this.getExpandedRow(key, expandedRowContent, subVisible, expandedRowClassName(record, i, indent), fixed));\n        }\n\n        if (childrenColumn) {\n          rst = rst.concat(this.getRowsByData(childrenColumn, subVisible, indent + 1, columns, fixed));\n        }\n      }\n\n      return rst;\n    }\n  }, {\n    key: 'getRows',\n    value: function getRows(columns, fixed) {\n      return this.getRowsByData(this.props.data, true, 0, columns, fixed);\n    }\n  }, {\n    key: 'getColGroup',\n    value: function getColGroup(columns, fixed) {\n      var cols = [];\n\n      if (this.props.expandIconAsCell && fixed !== 'right') {\n        cols.push(React.createElement('col', {\n          className: this.props.prefixCls + '-expand-icon-col',\n          key: 'rc-table-expand-icon-col'\n        }));\n      }\n\n      var leafColumns = void 0;\n\n      if (fixed === 'left') {\n        leafColumns = this.columnManager.leftLeafColumns();\n      } else if (fixed === 'right') {\n        leafColumns = this.columnManager.rightLeafColumns();\n      } else {\n        leafColumns = this.columnManager.leafColumns();\n      }\n\n      cols = cols.concat(leafColumns.map(function (c) {\n        return React.createElement('col', {\n          key: c.key || c.dataIndex,\n          style: {\n            width: c.width,\n            minWidth: c.width\n          }\n        });\n      }));\n      return React.createElement('colgroup', null, cols);\n    }\n  }, {\n    key: 'getLeftFixedTable',\n    value: function getLeftFixedTable() {\n      return this.getTable({\n        columns: this.columnManager.leftColumns(),\n        fixed: 'left'\n      });\n    }\n  }, {\n    key: 'getRightFixedTable',\n    value: function getRightFixedTable() {\n      return this.getTable({\n        columns: this.columnManager.rightColumns(),\n        fixed: 'right'\n      });\n    }\n  }, {\n    key: 'getTable',\n    value: function getTable() {\n      var _this3 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var columns = options.columns,\n          fixed = options.fixed;\n      var _props3 = this.props,\n          prefixCls = _props3.prefixCls,\n          _props3$scroll = _props3.scroll,\n          scroll = _props3$scroll === undefined ? {} : _props3$scroll,\n          getBodyWrapper = _props3.getBodyWrapper,\n          showHeader = _props3.showHeader;\n      var useFixedHeader = this.props.useFixedHeader;\n\n      var bodyStyle = _extends({}, this.props.bodyStyle);\n\n      var headStyle = {};\n      var tableClassName = '';\n\n      if (scroll.x || fixed) {\n        tableClassName = prefixCls + '-fixed';\n        bodyStyle.overflowX = bodyStyle.overflowX || 'auto';\n        bodyStyle.WebkitTransform = 'translate3d (0, 0, 0)';\n      }\n\n      var innerBodyStyle = {};\n\n      if (scroll.y) {\n        if (fixed) {\n          innerBodyStyle.maxHeight = bodyStyle.maxHeight || scroll.y;\n          innerBodyStyle.overflowY = bodyStyle.overflowY || 'scroll';\n        } else {\n          bodyStyle.maxHeight = bodyStyle.maxHeight || scroll.y;\n        }\n\n        bodyStyle.overflowY = bodyStyle.overflowY || 'scroll';\n        useFixedHeader = true;\n        var scrollbarWidth = measureScrollbar();\n\n        if (scrollbarWidth > 0) {\n          (fixed ? bodyStyle : headStyle).marginBottom = '-' + scrollbarWidth + 'px';\n          (fixed ? bodyStyle : headStyle).paddingBottom = '0px';\n        }\n      }\n\n      var renderTable = function renderTable() {\n        var hasHead = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var hasBody = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        var tableStyle = {};\n\n        if (!fixed && scroll.x) {\n          if (scroll.x === true) {\n            tableStyle.tableLayout = 'fixed';\n          } else {\n            tableStyle.width = scroll.x;\n          }\n        }\n\n        var tableBody = hasBody ? getBodyWrapper(React.createElement('tbody', {\n          className: prefixCls + '-tbody'\n        }, _this3.getRows(columns, fixed))) : null;\n        return React.createElement('table', {\n          className: tableClassName,\n          style: tableStyle,\n          key: 'table'\n        }, _this3.getColGroup(columns, fixed), hasHead ? _this3.getHeader(columns, fixed) : null, tableBody);\n      };\n\n      var headTable = void 0;\n\n      if (useFixedHeader && showHeader) {\n        headTable = React.createElement('div', {\n          key: 'headTable',\n          className: prefixCls + '-header',\n          ref: fixed ? null : 'headTable',\n          style: headStyle,\n          onScroll: this.handleBodyScrollLeft\n        }, renderTable(true, false));\n      }\n\n      var bodyTable = React.createElement('div', {\n        key: 'bodyTable',\n        className: prefixCls + '-body',\n        style: bodyStyle,\n        ref: 'bodyTable',\n        onScroll: this.handleBodyScroll\n      }, renderTable(!useFixedHeader));\n\n      if (fixed && columns.length) {\n        var refName = void 0;\n\n        if (columns[0].fixed === 'left' || columns[0].fixed === true) {\n          refName = 'fixedColumnsBodyLeft';\n        } else if (columns[0].fixed === 'right') {\n          refName = 'fixedColumnsBodyRight';\n        }\n\n        delete bodyStyle.overflowX;\n        delete bodyStyle.overflowY;\n        bodyTable = React.createElement('div', {\n          key: 'bodyTable',\n          className: prefixCls + '-body-outer',\n          style: _extends({}, bodyStyle)\n        }, React.createElement('div', {\n          className: prefixCls + '-body-inner',\n          style: innerBodyStyle,\n          ref: refName,\n          onScroll: this.handleBodyScroll\n        }, renderTable(!useFixedHeader)));\n      }\n\n      return [headTable, bodyTable];\n    }\n  }, {\n    key: 'getTitle',\n    value: function getTitle() {\n      var _props4 = this.props,\n          title = _props4.title,\n          prefixCls = _props4.prefixCls;\n      return title ? React.createElement('div', {\n        className: prefixCls + '-title',\n        key: 'title'\n      }, title(this.props.data)) : null;\n    }\n  }, {\n    key: 'getFooter',\n    value: function getFooter() {\n      var _props5 = this.props,\n          footer = _props5.footer,\n          prefixCls = _props5.prefixCls;\n      return footer ? React.createElement('div', {\n        className: prefixCls + '-footer',\n        key: 'footer'\n      }, footer(this.props.data)) : null;\n    }\n  }, {\n    key: 'getEmptyText',\n    value: function getEmptyText() {\n      var _props6 = this.props,\n          emptyText = _props6.emptyText,\n          prefixCls = _props6.prefixCls,\n          data = _props6.data;\n\n      if (data.length) {\n        return null;\n      }\n\n      var emptyClassName = prefixCls + '-placeholder';\n      return React.createElement('div', {\n        className: emptyClassName,\n        key: 'emptyText'\n      }, typeof emptyText === 'function' ? emptyText() : emptyText);\n    }\n  }, {\n    key: 'getHeaderRowStyle',\n    value: function getHeaderRowStyle(columns, rows) {\n      var fixedColumnsHeadRowsHeight = this.state.fixedColumnsHeadRowsHeight;\n      var headerHeight = fixedColumnsHeadRowsHeight[0];\n\n      if (headerHeight && columns) {\n        if (headerHeight === 'auto') {\n          return {\n            height: 'auto'\n          };\n        }\n\n        return {\n          height: headerHeight / rows.length\n        };\n      }\n\n      return null;\n    }\n  }, {\n    key: 'setScrollPosition',\n    value: function setScrollPosition(position) {\n      this.scrollPosition = position;\n\n      if (this.tableNode) {\n        var prefixCls = this.props.prefixCls;\n\n        if (position === 'both') {\n          classes(this.tableNode).remove(new RegExp('^' + prefixCls + '-scroll-position-.+$')).add(prefixCls + '-scroll-position-left').add(prefixCls + '-scroll-position-right');\n        } else {\n          classes(this.tableNode).remove(new RegExp('^' + prefixCls + '-scroll-position-.+$')).add(prefixCls + '-scroll-position-' + position);\n        }\n      }\n    }\n  }, {\n    key: 'setScrollPositionClassName',\n    value: function setScrollPositionClassName() {\n      var node = this.refs.bodyTable;\n      var scrollToLeft = node.scrollLeft === 0;\n      var scrollToRight = node.scrollLeft + 1 >= node.children[0].getBoundingClientRect().width - node.getBoundingClientRect().width;\n\n      if (scrollToLeft && scrollToRight) {\n        this.setScrollPosition('both');\n      } else if (scrollToLeft) {\n        this.setScrollPosition('left');\n      } else if (scrollToRight) {\n        this.setScrollPosition('right');\n      } else if (this.scrollPosition !== 'middle') {\n        this.setScrollPosition('middle');\n      }\n    }\n  }, {\n    key: 'resetScrollX',\n    value: function resetScrollX() {\n      if (this.refs.headTable) {\n        this.refs.headTable.scrollLeft = 0;\n      }\n\n      if (this.refs.bodyTable) {\n        this.refs.bodyTable.scrollLeft = 0;\n      }\n    }\n  }, {\n    key: 'findExpandedRow',\n    value: function findExpandedRow(record, index) {\n      var _this4 = this;\n\n      var rows = this.getExpandedRows().filter(function (i) {\n        return i === _this4.getRowKey(record, index);\n      });\n      return rows[0];\n    }\n  }, {\n    key: 'isRowExpanded',\n    value: function isRowExpanded(record, index) {\n      return typeof this.findExpandedRow(record, index) !== 'undefined';\n    }\n  }, {\n    key: 'hasScrollX',\n    value: function hasScrollX() {\n      var _props$scroll = this.props.scroll,\n          scroll = _props$scroll === undefined ? {} : _props$scroll;\n      return 'x' in scroll;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this5 = this;\n\n      var props = this.props;\n      var prefixCls = props.prefixCls;\n      var className = props.prefixCls;\n\n      if (props.className) {\n        className += ' ' + props.className;\n      }\n\n      if (props.useFixedHeader || props.scroll && props.scroll.y) {\n        className += ' ' + prefixCls + '-fixed-header';\n      }\n\n      if (this.scrollPosition === 'both') {\n        className += ' ' + prefixCls + '-scroll-position-left ' + prefixCls + '-scroll-position-right';\n      } else {\n        className += ' ' + prefixCls + '-scroll-position-' + this.scrollPosition;\n      }\n\n      var isTableScroll = this.columnManager.isAnyColumnsFixed() || props.scroll.x || props.scroll.y;\n      var content = [this.getTable({\n        columns: this.columnManager.groupedColumns()\n      }), this.getEmptyText(), this.getFooter()];\n      var scrollTable = isTableScroll ? React.createElement('div', {\n        className: prefixCls + '-scroll'\n      }, content) : content;\n      return React.createElement('div', {\n        ref: function ref(node) {\n          return _this5.tableNode = node;\n        },\n        className: className,\n        style: props.style\n      }, this.getTitle(), React.createElement('div', {\n        className: prefixCls + '-content'\n      }, scrollTable, this.columnManager.isAnyColumnsLeftFixed() && React.createElement('div', {\n        className: prefixCls + '-fixed-left'\n      }, this.getLeftFixedTable()), this.columnManager.isAnyColumnsRightFixed() && React.createElement('div', {\n        className: prefixCls + '-fixed-right'\n      }, this.getRightFixedTable())));\n    }\n  }]);\n\n  return Table;\n}(React.Component);\n\nTable.propTypes = {\n  data: PropTypes.array,\n  expandIconAsCell: PropTypes.bool,\n  defaultExpandAllRows: PropTypes.bool,\n  expandedRowKeys: PropTypes.array,\n  defaultExpandedRowKeys: PropTypes.array,\n  useFixedHeader: PropTypes.bool,\n  columns: PropTypes.array,\n  prefixCls: PropTypes.string,\n  bodyStyle: PropTypes.object,\n  style: PropTypes.object,\n  rowKey: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  rowClassName: PropTypes.func,\n  expandedRowClassName: PropTypes.func,\n  childrenColumnName: PropTypes.string,\n  onExpand: PropTypes.func,\n  onExpandedRowsChange: PropTypes.func,\n  indentSize: PropTypes.number,\n  onRowClick: PropTypes.func,\n  onRowDoubleClick: PropTypes.func,\n  onRowContextMenu: PropTypes.func,\n  onRowMouseEnter: PropTypes.func,\n  onRowMouseLeave: PropTypes.func,\n  expandIconColumnIndex: PropTypes.number,\n  showHeader: PropTypes.bool,\n  title: PropTypes.func,\n  footer: PropTypes.func,\n  emptyText: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  scroll: PropTypes.object,\n  rowRef: PropTypes.func,\n  getBodyWrapper: PropTypes.func,\n  children: PropTypes.node\n};\nTable.defaultProps = {\n  data: [],\n  useFixedHeader: false,\n  expandIconAsCell: false,\n  defaultExpandAllRows: false,\n  defaultExpandedRowKeys: [],\n  rowKey: 'key',\n  rowClassName: function rowClassName() {\n    return '';\n  },\n  expandedRowClassName: function expandedRowClassName() {\n    return '';\n  },\n  onExpand: function onExpand() {},\n  onExpandedRowsChange: function onExpandedRowsChange() {},\n  onRowClick: function onRowClick() {},\n  onRowDoubleClick: function onRowDoubleClick() {},\n  onRowContextMenu: function onRowContextMenu() {},\n  onRowMouseEnter: function onRowMouseEnter() {},\n  onRowMouseLeave: function onRowMouseLeave() {},\n  prefixCls: 'rc-table',\n  bodyStyle: {},\n  style: {},\n  childrenColumnName: 'children',\n  indentSize: 15,\n  expandIconColumnIndex: 0,\n  showHeader: true,\n  scroll: {},\n  rowRef: function rowRef() {\n    return null;\n  },\n  getBodyWrapper: function getBodyWrapper(body) {\n    return body;\n  },\n  emptyText: function emptyText() {\n    return 'No Data';\n  }\n};\nexport default Table;","map":null,"metadata":{},"sourceType":"module"}