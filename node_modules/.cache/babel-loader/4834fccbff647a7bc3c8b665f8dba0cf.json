{"ast":null,"code":"\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports.init = function (jQuery) {\n  if (typeof jQuery.fn.multiselect !== \"undefined\") return jQuery;\n  /**\n   * Bootstrap Multiselect (https://github.com/davidstutz/bootstrap-multiselect)\n   *\n   * Apache License, Version 2.0:\n   * Copyright (c) 2012 - 2015 David Stutz\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n   * use this file except in compliance with the License. You may obtain a\n   * copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n   * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n   * License for the specific language governing permissions and limitations\n   * under the License.\n   *\n   * BSD 3-Clause License:\n   * Copyright (c) 2012 - 2015 David Stutz\n   * All rights reserved.\n   *\n   * Redistribution and use in source and binary forms, with or without\n   * modification, are permitted provided that the following conditions are met:\n   *    - Redistributions of source code must retain the above copyright notice,\n   *      this list of conditions and the following disclaimer.\n   *    - Redistributions in binary form must reproduce the above copyright notice,\n   *      this list of conditions and the following disclaimer in the documentation\n   *      and/or other materials provided with the distribution.\n   *    - Neither the name of David Stutz nor the names of its contributors may be\n   *      used to endorse or promote products derived from this software without\n   *      specific prior written permission.\n   *\n   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n   * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n   * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n   * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n   * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n   * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n   * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n   * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n   * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   */\n\n  !function ($) {\n    \"use strict\"; // jshint ;_;\n\n    if (typeof ko !== 'undefined' && ko.bindingHandlers && !ko.bindingHandlers.multiselect) {\n      ko.bindingHandlers.multiselect = {\n        after: ['options', 'value', 'selectedOptions', 'enable', 'disable'],\n        init: function init(element, valueAccessor, allBindings, viewModel, bindingContext) {\n          var $element = $(element);\n          var config = ko.toJS(valueAccessor());\n          $element.multiselect(config);\n\n          if (allBindings.has('options')) {\n            var options = allBindings.get('options');\n\n            if (ko.isObservable(options)) {\n              ko.computed({\n                read: function read() {\n                  options();\n                  setTimeout(function () {\n                    var ms = $element.data('multiselect');\n                    if (ms) ms.updateOriginalOptions(); //Not sure how beneficial this is.\n\n                    $element.multiselect('rebuild');\n                  }, 1);\n                },\n                disposeWhenNodeIsRemoved: element\n              });\n            }\n          } //value and selectedOptions are two-way, so these will be triggered even by our own actions.\n          //It needs some way to tell if they are triggered because of us or because of outside change.\n          //It doesn't loop but it's a waste of processing.\n\n\n          if (allBindings.has('value')) {\n            var value = allBindings.get('value');\n\n            if (ko.isObservable(value)) {\n              ko.computed({\n                read: function read() {\n                  value();\n                  setTimeout(function () {\n                    $element.multiselect('refresh');\n                  }, 1);\n                },\n                disposeWhenNodeIsRemoved: element\n              }).extend({\n                rateLimit: 100,\n                notifyWhenChangesStop: true\n              });\n            }\n          } //Switched from arrayChange subscription to general subscription using 'refresh'.\n          //Not sure performance is any better using 'select' and 'deselect'.\n\n\n          if (allBindings.has('selectedOptions')) {\n            var selectedOptions = allBindings.get('selectedOptions');\n\n            if (ko.isObservable(selectedOptions)) {\n              ko.computed({\n                read: function read() {\n                  selectedOptions();\n                  setTimeout(function () {\n                    $element.multiselect('refresh');\n                  }, 1);\n                },\n                disposeWhenNodeIsRemoved: element\n              }).extend({\n                rateLimit: 100,\n                notifyWhenChangesStop: true\n              });\n            }\n          }\n\n          var setEnabled = function setEnabled(enable) {\n            setTimeout(function () {\n              if (enable) $element.multiselect('enable');else $element.multiselect('disable');\n            });\n          };\n\n          if (allBindings.has('enable')) {\n            var enable = allBindings.get('enable');\n\n            if (ko.isObservable(enable)) {\n              ko.computed({\n                read: function read() {\n                  setEnabled(enable());\n                },\n                disposeWhenNodeIsRemoved: element\n              }).extend({\n                rateLimit: 100,\n                notifyWhenChangesStop: true\n              });\n            } else {\n              setEnabled(enable);\n            }\n          }\n\n          if (allBindings.has('disable')) {\n            var disable = allBindings.get('disable');\n\n            if (ko.isObservable(disable)) {\n              ko.computed({\n                read: function read() {\n                  setEnabled(!disable());\n                },\n                disposeWhenNodeIsRemoved: element\n              }).extend({\n                rateLimit: 100,\n                notifyWhenChangesStop: true\n              });\n            } else {\n              setEnabled(!disable);\n            }\n          }\n\n          ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\n            $element.multiselect('destroy');\n          });\n        },\n        update: function update(element, valueAccessor, allBindings, viewModel, bindingContext) {\n          var $element = $(element);\n          var config = ko.toJS(valueAccessor());\n          $element.multiselect('setOptions', config);\n          $element.multiselect('rebuild');\n        }\n      };\n    }\n\n    function forEach(array, callback) {\n      for (var index = 0; index < array.length; ++index) {\n        callback(array[index], index);\n      }\n    }\n    /**\n     * Constructor to create a new multiselect using the given select.\n     *\n     * @param {jQuery} select\n     * @param {Object} options\n     * @returns {Multiselect}\n     */\n\n\n    function Multiselect(select, options) {\n      this.$select = $(select);\n      this.options = this.mergeOptions($.extend({}, options, this.$select.data())); // Placeholder via data attributes\n\n      if (this.$select.attr(\"data-placeholder\")) {\n        this.options.nonSelectedText = this.$select.data(\"placeholder\");\n      } // Initialization.\n      // We have to clone to create a new reference.\n\n\n      this.originalOptions = this.$select.clone()[0].options;\n      this.query = '';\n      this.searchTimeout = null;\n      this.lastToggledInput = null;\n      this.options.multiple = this.$select.attr('multiple') === \"multiple\";\n      this.options.onChange = $.proxy(this.options.onChange, this);\n      this.options.onSelectAll = $.proxy(this.options.onSelectAll, this);\n      this.options.onDeselectAll = $.proxy(this.options.onDeselectAll, this);\n      this.options.onDropdownShow = $.proxy(this.options.onDropdownShow, this);\n      this.options.onDropdownHide = $.proxy(this.options.onDropdownHide, this);\n      this.options.onDropdownShown = $.proxy(this.options.onDropdownShown, this);\n      this.options.onDropdownHidden = $.proxy(this.options.onDropdownHidden, this);\n      this.options.onInitialized = $.proxy(this.options.onInitialized, this);\n      this.options.onFiltering = $.proxy(this.options.onFiltering, this); // Build select all if enabled.\n\n      this.buildContainer();\n      this.buildButton();\n      this.buildDropdown();\n      this.buildSelectAll();\n      this.buildDropdownOptions();\n      this.buildFilter();\n      this.updateButtonText();\n      this.updateSelectAll(true);\n\n      if (this.options.enableClickableOptGroups && this.options.multiple) {\n        this.updateOptGroups();\n      }\n\n      this.options.wasDisabled = this.$select.prop('disabled');\n\n      if (this.options.disableIfEmpty && $('option', this.$select).length <= 0) {\n        this.disable();\n      }\n\n      this.$select.wrap('<span class=\"multiselect-native-select\" />').after(this.$container);\n      this.options.onInitialized(this.$select, this.$container);\n    }\n\n    Multiselect.prototype = {\n      defaults: {\n        /**\n         * Default text function will either print 'None selected' in case no\n         * option is selected or a list of the selected options up to a length\n         * of 3 selected options.\n         *\n         * @param {jQuery} options\n         * @param {jQuery} select\n         * @returns {String}\n         */\n        buttonText: function buttonText(options, select) {\n          if (this.disabledText.length > 0 && (select.prop('disabled') || options.length == 0 && this.disableIfEmpty)) {\n            return this.disabledText;\n          } else if (options.length === 0) {\n            return this.nonSelectedText;\n          } else if (this.allSelectedText && options.length === $('option', $(select)).length && $('option', $(select)).length !== 1 && this.multiple) {\n            if (this.selectAllNumber) {\n              return this.allSelectedText + ' (' + options.length + ')';\n            } else {\n              return this.allSelectedText;\n            }\n          } else if (options.length > this.numberDisplayed) {\n            return options.length + ' ' + this.nSelectedText;\n          } else {\n            var selected = '';\n            var delimiter = this.delimiterText;\n            options.each(function () {\n              var label = $(this).attr('label') !== undefined ? $(this).attr('label') : $(this).text();\n              selected += label + delimiter;\n            });\n            return selected.substr(0, selected.length - this.delimiterText.length);\n          }\n        },\n\n        /**\n         * Updates the title of the button similar to the buttonText function.\n         *\n         * @param {jQuery} options\n         * @param {jQuery} select\n         * @returns {@exp;selected@call;substr}\n         */\n        buttonTitle: function buttonTitle(options, select) {\n          if (options.length === 0) {\n            return this.nonSelectedText;\n          } else {\n            var selected = '';\n            var delimiter = this.delimiterText;\n            options.each(function () {\n              var label = $(this).attr('label') !== undefined ? $(this).attr('label') : $(this).text();\n              selected += label + delimiter;\n            });\n            return selected.substr(0, selected.length - this.delimiterText.length);\n          }\n        },\n        checkboxName: function checkboxName(option) {\n          return false; // no checkbox name\n        },\n\n        /**\n         * Create a label.\n         *\n         * @param {jQuery} element\n         * @returns {String}\n         */\n        optionLabel: function optionLabel(element) {\n          return $(element).attr('label') || $(element).text();\n        },\n\n        /**\n         * Create a class.\n         *\n         * @param {jQuery} element\n         * @returns {String}\n         */\n        optionClass: function optionClass(element) {\n          return $(element).attr('class') || '';\n        },\n\n        /**\n         * Triggered on change of the multiselect.\n         *\n         * Not triggered when selecting/deselecting options manually.\n         *\n         * @param {jQuery} option\n         * @param {Boolean} checked\n         */\n        onChange: function onChange(option, checked) {},\n\n        /**\n         * Triggered when the dropdown is shown.\n         *\n         * @param {jQuery} event\n         */\n        onDropdownShow: function onDropdownShow(event) {},\n\n        /**\n         * Triggered when the dropdown is hidden.\n         *\n         * @param {jQuery} event\n         */\n        onDropdownHide: function onDropdownHide(event) {},\n\n        /**\n         * Triggered after the dropdown is shown.\n         *\n         * @param {jQuery} event\n         */\n        onDropdownShown: function onDropdownShown(event) {},\n\n        /**\n         * Triggered after the dropdown is hidden.\n         *\n         * @param {jQuery} event\n         */\n        onDropdownHidden: function onDropdownHidden(event) {},\n\n        /**\n         * Triggered on select all.\n         */\n        onSelectAll: function onSelectAll() {},\n\n        /**\n         * Triggered on deselect all.\n         */\n        onDeselectAll: function onDeselectAll() {},\n\n        /**\n         * Triggered after initializing.\n         *\n         * @param {jQuery} $select\n         * @param {jQuery} $container\n         */\n        onInitialized: function onInitialized($select, $container) {},\n\n        /**\n         * Triggered on filtering.\n         *\n         * @param {jQuery} $filter\n         */\n        onFiltering: function onFiltering($filter) {},\n        enableHTML: false,\n        buttonClass: 'btn btn-default',\n        inheritClass: false,\n        buttonWidth: 'auto',\n        buttonContainer: '<div class=\"btn-group\" />',\n        dropRight: false,\n        dropUp: false,\n        selectedClass: 'active',\n        // Maximum height of the dropdown menu.\n        // If maximum height is exceeded a scrollbar will be displayed.\n        maxHeight: false,\n        includeSelectAllOption: false,\n        includeSelectAllIfMoreThan: 0,\n        selectAllText: ' Select all',\n        selectAllValue: 'multiselect-all',\n        selectAllName: false,\n        selectAllNumber: true,\n        selectAllJustVisible: true,\n        enableFiltering: false,\n        enableCaseInsensitiveFiltering: false,\n        enableFullValueFiltering: false,\n        enableClickableOptGroups: false,\n        enableCollapsibleOptGroups: false,\n        filterPlaceholder: 'Search',\n        // possible options: 'text', 'value', 'both'\n        filterBehavior: 'text',\n        includeFilterClearBtn: true,\n        preventInputChangeEvent: false,\n        nonSelectedText: 'None selected',\n        nSelectedText: 'selected',\n        allSelectedText: 'All selected',\n        numberDisplayed: 3,\n        disableIfEmpty: false,\n        disabledText: '',\n        delimiterText: ', ',\n        templates: {\n          button: '<button type=\"button\" class=\"multiselect dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"multiselect-selected-text\"></span> <b class=\"caret\"></b></button>',\n          ul: '<ul class=\"multiselect-container dropdown-menu\"></ul>',\n          filter: '<li class=\"multiselect-item multiselect-filter\"><div class=\"input-group\"><span class=\"input-group-addon\"><i class=\"glyphicon glyphicon-search\"></i></span><input class=\"form-control multiselect-search\" type=\"text\"></div></li>',\n          filterClearBtn: '<span class=\"input-group-btn\"><button class=\"btn btn-default multiselect-clear-filter\" type=\"button\"><i class=\"glyphicon glyphicon-remove-circle\"></i></button></span>',\n          li: '<li><a tabindex=\"0\"><label></label></a></li>',\n          divider: '<li class=\"multiselect-item divider\"></li>',\n          liGroup: '<li class=\"multiselect-item multiselect-group\"><label></label></li>'\n        }\n      },\n      constructor: Multiselect,\n\n      /**\n       * Builds the container of the multiselect.\n       */\n      buildContainer: function buildContainer() {\n        this.$container = $(this.options.buttonContainer);\n        this.$container.on('show.bs.dropdown', this.options.onDropdownShow);\n        this.$container.on('hide.bs.dropdown', this.options.onDropdownHide);\n        this.$container.on('shown.bs.dropdown', this.options.onDropdownShown);\n        this.$container.on('hidden.bs.dropdown', this.options.onDropdownHidden);\n      },\n\n      /**\n       * Builds the button of the multiselect.\n       */\n      buildButton: function buildButton() {\n        this.$button = $(this.options.templates.button).addClass(this.options.buttonClass);\n\n        if (this.$select.attr('class') && this.options.inheritClass) {\n          this.$button.addClass(this.$select.attr('class'));\n        } // Adopt active state.\n\n\n        if (this.$select.prop('disabled')) {\n          this.disable();\n        } else {\n          this.enable();\n        } // Manually add button width if set.\n\n\n        if (this.options.buttonWidth && this.options.buttonWidth !== 'auto') {\n          this.$button.css({\n            'width': '100%',\n            //this.options.buttonWidth,\n            'overflow': 'hidden',\n            'text-overflow': 'ellipsis'\n          });\n          this.$container.css({\n            'width': this.options.buttonWidth\n          });\n        } // Keep the tab index from the select.\n\n\n        var tabindex = this.$select.attr('tabindex');\n\n        if (tabindex) {\n          this.$button.attr('tabindex', tabindex);\n        }\n\n        this.$container.prepend(this.$button);\n      },\n\n      /**\n       * Builds the ul representing the dropdown menu.\n       */\n      buildDropdown: function buildDropdown() {\n        // Build ul.\n        this.$ul = $(this.options.templates.ul);\n\n        if (this.options.dropRight) {\n          this.$ul.addClass('pull-right');\n        } // Set max height of dropdown menu to activate auto scrollbar.\n\n\n        if (this.options.maxHeight) {\n          // TODO: Add a class for this option to move the css declarations.\n          this.$ul.css({\n            'max-height': this.options.maxHeight + 'px',\n            'overflow-y': 'auto',\n            'overflow-x': 'hidden'\n          });\n        }\n\n        if (this.options.dropUp) {\n          var height = Math.min(this.options.maxHeight, $('option[data-role!=\"divider\"]', this.$select).length * 26 + $('option[data-role=\"divider\"]', this.$select).length * 19 + (this.options.includeSelectAllOption ? 26 : 0) + (this.options.enableFiltering || this.options.enableCaseInsensitiveFiltering ? 44 : 0));\n          var moveCalc = height + 34;\n          this.$ul.css({\n            'max-height': height + 'px',\n            'overflow-y': 'auto',\n            'overflow-x': 'hidden',\n            'margin-top': \"-\" + moveCalc + 'px'\n          });\n        }\n\n        this.$container.append(this.$ul);\n      },\n\n      /**\n       * Build the dropdown options and binds all necessary events.\n       *\n       * Uses createDivider and createOptionValue to create the necessary options.\n       */\n      buildDropdownOptions: function buildDropdownOptions() {\n        this.$select.children().each($.proxy(function (index, element) {\n          var $element = $(element); // Support optgroups and options without a group simultaneously.\n\n          var tag = $element.prop('tagName').toLowerCase();\n\n          if ($element.prop('value') === this.options.selectAllValue) {\n            return;\n          }\n\n          if (tag === 'optgroup') {\n            this.createOptgroup(element);\n          } else if (tag === 'option') {\n            if ($element.data('role') === 'divider') {\n              this.createDivider();\n            } else {\n              this.createOptionValue(element);\n            }\n          } // Other illegal tags will be ignored.\n\n        }, this)); // Bind the change event on the dropdown elements.\n\n        $('li:not(.multiselect-group) input', this.$ul).on('change', $.proxy(function (event) {\n          var $target = $(event.target);\n          var checked = $target.prop('checked') || false;\n          var isSelectAllOption = $target.val() === this.options.selectAllValue; // Apply or unapply the configured selected class.\n\n          if (this.options.selectedClass) {\n            if (checked) {\n              $target.closest('li').addClass(this.options.selectedClass);\n            } else {\n              $target.closest('li').removeClass(this.options.selectedClass);\n            }\n          } // Get the corresponding option.\n\n\n          var value = $target.val();\n          var $option = this.getOptionByValue(value);\n          var $optionsNotThis = $('option', this.$select).not($option);\n          var $checkboxesNotThis = $('input', this.$container).not($target);\n\n          if (isSelectAllOption) {\n            if (checked) {\n              this.selectAll(this.options.selectAllJustVisible, true);\n            } else {\n              this.deselectAll(this.options.selectAllJustVisible, true);\n            }\n          } else {\n            if (checked) {\n              $option.prop('selected', true);\n\n              if (this.options.multiple) {\n                // Simply select additional option.\n                $option.prop('selected', true);\n              } else {\n                // Unselect all other options and corresponding checkboxes.\n                if (this.options.selectedClass) {\n                  $($checkboxesNotThis).closest('li').removeClass(this.options.selectedClass);\n                }\n\n                $($checkboxesNotThis).prop('checked', false);\n                $optionsNotThis.prop('selected', false); // It's a single selection, so close.\n\n                this.$button.click();\n              }\n\n              if (this.options.selectedClass === \"active\") {\n                $optionsNotThis.closest(\"a\").css(\"outline\", \"\");\n              }\n            } else {\n              // Unselect option.\n              $option.prop('selected', false);\n            } // To prevent select all from firing onChange: #575\n\n\n            this.options.onChange($option, checked); // Do not update select all or optgroups on select all change!\n\n            this.updateSelectAll();\n\n            if (this.options.enableClickableOptGroups && this.options.multiple) {\n              this.updateOptGroups();\n            }\n          }\n\n          this.$select.change();\n          this.updateButtonText();\n\n          if (this.options.preventInputChangeEvent) {\n            return false;\n          }\n        }, this));\n        $('li a', this.$ul).on('mousedown', function (e) {\n          if (e.shiftKey) {\n            // Prevent selecting text by Shift+click\n            return false;\n          }\n        });\n        $('li a', this.$ul).on('touchstart click', $.proxy(function (event) {\n          event.stopPropagation();\n          var $target = $(event.target);\n\n          if (event.shiftKey && this.options.multiple) {\n            if ($target.is(\"label\")) {\n              // Handles checkbox selection manually (see https://github.com/davidstutz/bootstrap-multiselect/issues/431)\n              event.preventDefault();\n              $target = $target.find(\"input\");\n              $target.prop(\"checked\", !$target.prop(\"checked\"));\n            }\n\n            var checked = $target.prop('checked') || false;\n\n            if (this.lastToggledInput !== null && this.lastToggledInput !== $target) {\n              // Make sure we actually have a range\n              var from = $target.closest(\"li\").index();\n              var to = this.lastToggledInput.closest(\"li\").index();\n\n              if (from > to) {\n                // Swap the indices\n                var tmp = to;\n                to = from;\n                from = tmp;\n              } // Make sure we grab all elements since slice excludes the last index\n\n\n              ++to; // Change the checkboxes and underlying options\n\n              var range = this.$ul.find(\"li\").slice(from, to).find(\"input\");\n              range.prop('checked', checked);\n\n              if (this.options.selectedClass) {\n                range.closest('li').toggleClass(this.options.selectedClass, checked);\n              }\n\n              for (var i = 0, j = range.length; i < j; i++) {\n                var $checkbox = $(range[i]);\n                var $option = this.getOptionByValue($checkbox.val());\n                $option.prop('selected', checked);\n              }\n            } // Trigger the select \"change\" event\n\n\n            $target.trigger(\"change\");\n          } // Remembers last clicked option\n\n\n          if ($target.is(\"input\") && !$target.closest(\"li\").is(\".multiselect-item\")) {\n            this.lastToggledInput = $target;\n          }\n\n          $target.blur();\n        }, this)); // Keyboard support.\n\n        this.$container.off('keydown.multiselect').on('keydown.multiselect', $.proxy(function (event) {\n          if ($('input[type=\"text\"]', this.$container).is(':focus')) {\n            return;\n          }\n\n          if (event.keyCode === 9 && this.$container.hasClass('open')) {\n            this.$button.click();\n          } else {\n            var $items = $(this.$container).find(\"li:not(.divider):not(.disabled) a\").filter(\":visible\");\n\n            if (!$items.length) {\n              return;\n            }\n\n            var index = $items.index($items.filter(':focus')); // Navigation up.\n\n            if (event.keyCode === 38 && index > 0) {\n              index--;\n            } // Navigate down.\n            else if (event.keyCode === 40 && index < $items.length - 1) {\n                index++;\n              } else if (!~index) {\n                index = 0;\n              }\n\n            var $current = $items.eq(index);\n            $current.focus();\n\n            if (event.keyCode === 32 || event.keyCode === 13) {\n              var $checkbox = $current.find('input');\n              $checkbox.prop(\"checked\", !$checkbox.prop(\"checked\"));\n              $checkbox.change();\n            }\n\n            event.stopPropagation();\n            event.preventDefault();\n          }\n        }, this));\n\n        if (this.options.enableClickableOptGroups && this.options.multiple) {\n          $(\"li.multiselect-group input\", this.$ul).on(\"change\", $.proxy(function (event) {\n            event.stopPropagation();\n            var $target = $(event.target);\n            var checked = $target.prop('checked') || false;\n            var $li = $(event.target).closest('li');\n            var $group = $li.nextUntil(\"li.multiselect-group\").not('.multiselect-filter-hidden').not('.disabled');\n            var $inputs = $group.find(\"input\");\n            var values = [];\n            var $options = [];\n\n            if (this.options.selectedClass) {\n              if (checked) {\n                $li.addClass(this.options.selectedClass);\n              } else {\n                $li.removeClass(this.options.selectedClass);\n              }\n            }\n\n            $.each($inputs, $.proxy(function (index, input) {\n              var value = $(input).val();\n              var $option = this.getOptionByValue(value);\n\n              if (checked) {\n                $(input).prop('checked', true);\n                $(input).closest('li').addClass(this.options.selectedClass);\n                $option.prop('selected', true);\n              } else {\n                $(input).prop('checked', false);\n                $(input).closest('li').removeClass(this.options.selectedClass);\n                $option.prop('selected', false);\n              }\n\n              $options.push(this.getOptionByValue(value));\n            }, this)); // Cannot use select or deselect here because it would call updateOptGroups again.\n\n            this.options.onChange($options, checked);\n            this.updateButtonText();\n            this.updateSelectAll();\n          }, this));\n        }\n\n        if (this.options.enableCollapsibleOptGroups && this.options.multiple) {\n          $(\"li.multiselect-group .caret-container\", this.$ul).on(\"click\", $.proxy(function (event) {\n            var $li = $(event.target).closest('li');\n            var $inputs = $li.nextUntil(\"li.multiselect-group\").not('.multiselect-filter-hidden');\n            var visible = true;\n            $inputs.each(function () {\n              visible = visible && $(this).is(':visible');\n            });\n\n            if (visible) {\n              $inputs.hide().addClass('multiselect-collapsible-hidden');\n            } else {\n              $inputs.show().removeClass('multiselect-collapsible-hidden');\n            }\n          }, this));\n          $(\"li.multiselect-all\", this.$ul).css('background', '#f3f3f3').css('border-bottom', '1px solid #eaeaea');\n          $(\"li.multiselect-all > a > label.checkbox\", this.$ul).css('padding', '3px 20px 3px 35px');\n          $(\"li.multiselect-group > a > input\", this.$ul).css('margin', '4px 0px 5px -20px');\n        }\n      },\n\n      /**\n       * Create an option using the given select option.\n       *\n       * @param {jQuery} element\n       */\n      createOptionValue: function createOptionValue(element) {\n        var $element = $(element);\n\n        if ($element.is(':selected')) {\n          $element.prop('selected', true);\n        } // Support the label attribute on options.\n\n\n        var label = this.options.optionLabel(element);\n        var classes = this.options.optionClass(element);\n        var value = $element.val();\n        var inputType = this.options.multiple ? \"checkbox\" : \"radio\";\n        var $li = $(this.options.templates.li);\n        var $label = $('label', $li);\n        $label.addClass(inputType);\n        $li.addClass(classes);\n\n        if (this.options.enableHTML) {\n          $label.html(\" \" + label);\n        } else {\n          $label.text(\" \" + label);\n        }\n\n        var $checkbox = $('<input/>').attr('type', inputType);\n        var name = this.options.checkboxName($element);\n\n        if (name) {\n          $checkbox.attr('name', name);\n        }\n\n        $label.prepend($checkbox);\n        var selected = $element.prop('selected') || false;\n        $checkbox.val(value);\n\n        if (value === this.options.selectAllValue) {\n          $li.addClass(\"multiselect-item multiselect-all\");\n          $checkbox.parent().parent().addClass('multiselect-all');\n        }\n\n        $label.attr('title', $element.attr('title'));\n        this.$ul.append($li);\n\n        if ($element.is(':disabled')) {\n          $checkbox.attr('disabled', 'disabled').prop('disabled', true).closest('a').attr(\"tabindex\", \"-1\").closest('li').addClass('disabled');\n        }\n\n        $checkbox.prop('checked', selected);\n\n        if (selected && this.options.selectedClass) {\n          $checkbox.closest('li').addClass(this.options.selectedClass);\n        }\n      },\n\n      /**\n       * Creates a divider using the given select option.\n       *\n       * @param {jQuery} element\n       */\n      createDivider: function createDivider(element) {\n        var $divider = $(this.options.templates.divider);\n        this.$ul.append($divider);\n      },\n\n      /**\n       * Creates an optgroup.\n       *\n       * @param {jQuery} group\n       */\n      createOptgroup: function createOptgroup(group) {\n        var label = $(group).attr(\"label\");\n        var value = $(group).attr(\"value\");\n        var $li = $('<li class=\"multiselect-item multiselect-group\"><a href=\"javascript:void(0);\"><label><b></b></label></a></li>');\n        var classes = this.options.optionClass(group);\n        $li.addClass(classes);\n\n        if (this.options.enableHTML) {\n          $('label b', $li).html(\" \" + label);\n        } else {\n          $('label b', $li).text(\" \" + label);\n        }\n\n        if (this.options.enableCollapsibleOptGroups && this.options.multiple) {\n          $('a', $li).append('<span class=\"caret-container\"><b class=\"caret\"></b></span>');\n        }\n\n        if (this.options.enableClickableOptGroups && this.options.multiple) {\n          $('a label', $li).prepend('<input type=\"checkbox\" value=\"' + value + '\"/>');\n        }\n\n        if ($(group).is(':disabled')) {\n          $li.addClass('disabled');\n        }\n\n        this.$ul.append($li);\n        $(\"option\", group).each($.proxy(function ($, group) {\n          this.createOptionValue(group);\n        }, this));\n      },\n\n      /**\n       * Build the select all.\n       *\n       * Checks if a select all has already been created.\n       */\n      buildSelectAll: function buildSelectAll() {\n        if (typeof this.options.selectAllValue === 'number') {\n          this.options.selectAllValue = this.options.selectAllValue.toString();\n        }\n\n        var alreadyHasSelectAll = this.hasSelectAll();\n\n        if (!alreadyHasSelectAll && this.options.includeSelectAllOption && this.options.multiple && $('option', this.$select).length > this.options.includeSelectAllIfMoreThan) {\n          // Check whether to add a divider after the select all.\n          if (this.options.includeSelectAllDivider) {\n            this.$ul.prepend($(this.options.templates.divider));\n          }\n\n          var $li = $(this.options.templates.li);\n          $('label', $li).addClass(\"checkbox\");\n\n          if (this.options.enableHTML) {\n            $('label', $li).html(\" \" + this.options.selectAllText);\n          } else {\n            $('label', $li).text(\" \" + this.options.selectAllText);\n          }\n\n          if (this.options.selectAllName) {\n            $('label', $li).prepend('<input type=\"checkbox\" name=\"' + this.options.selectAllName + '\" />');\n          } else {\n            $('label', $li).prepend('<input type=\"checkbox\" />');\n          }\n\n          var $checkbox = $('input', $li);\n          $checkbox.val(this.options.selectAllValue);\n          $li.addClass(\"multiselect-item multiselect-all\");\n          $checkbox.parent().parent().addClass('multiselect-all');\n          this.$ul.prepend($li);\n          $checkbox.prop('checked', false);\n        }\n      },\n\n      /**\n       * Builds the filter.\n       */\n      buildFilter: function buildFilter() {\n        // Build filter if filtering OR case insensitive filtering is enabled and the number of options exceeds (or equals) enableFilterLength.\n        if (this.options.enableFiltering || this.options.enableCaseInsensitiveFiltering) {\n          var enableFilterLength = Math.max(this.options.enableFiltering, this.options.enableCaseInsensitiveFiltering);\n\n          if (this.$select.find('option').length >= enableFilterLength) {\n            this.$filter = $(this.options.templates.filter);\n            $('input', this.$filter).attr('placeholder', this.options.filterPlaceholder); // Adds optional filter clear button\n\n            if (this.options.includeFilterClearBtn) {\n              var clearBtn = $(this.options.templates.filterClearBtn);\n              clearBtn.on('click', $.proxy(function (event) {\n                clearTimeout(this.searchTimeout);\n                this.$filter.find('.multiselect-search').val('');\n                $('li', this.$ul).show().removeClass('multiselect-filter-hidden');\n                this.updateSelectAll();\n\n                if (this.options.enableClickableOptGroups && this.options.multiple) {\n                  this.updateOptGroups();\n                }\n              }, this));\n              this.$filter.find('.input-group').append(clearBtn);\n            }\n\n            this.$ul.prepend(this.$filter);\n            this.$filter.val(this.query).on('click', function (event) {\n              event.stopPropagation();\n            }).on('input keydown', $.proxy(function (event) {\n              // Cancel enter key default behaviour\n              if (event.which === 13) {\n                event.preventDefault();\n              } // This is useful to catch \"keydown\" events after the browser has updated the control.\n\n\n              clearTimeout(this.searchTimeout);\n              this.searchTimeout = this.asyncFunction($.proxy(function () {\n                if (this.query !== event.target.value) {\n                  this.query = event.target.value;\n                  var currentGroup, currentGroupVisible;\n                  $.each($('li', this.$ul), $.proxy(function (index, element) {\n                    var value = $('input', element).length > 0 ? $('input', element).val() : \"\";\n                    var text = $('label', element).text();\n                    var filterCandidate = '';\n\n                    if (this.options.filterBehavior === 'text') {\n                      filterCandidate = text;\n                    } else if (this.options.filterBehavior === 'value') {\n                      filterCandidate = value;\n                    } else if (this.options.filterBehavior === 'both') {\n                      filterCandidate = text + '\\n' + value;\n                    }\n\n                    if (value !== this.options.selectAllValue && text) {\n                      // By default lets assume that element is not\n                      // interesting for this search.\n                      var showElement = false;\n\n                      if (this.options.enableCaseInsensitiveFiltering) {\n                        filterCandidate = filterCandidate.toLowerCase();\n                        this.query = this.query.toLowerCase();\n                      }\n\n                      if (this.options.enableFullValueFiltering && this.options.filterBehavior !== 'both') {\n                        var valueToMatch = filterCandidate.trim().substring(0, this.query.length);\n\n                        if (this.query.indexOf(valueToMatch) > -1) {\n                          showElement = true;\n                        }\n                      } else if (filterCandidate.indexOf(this.query) > -1) {\n                        showElement = true;\n                      } // Toggle current element (group or group item) according to showElement boolean.\n\n\n                      $(element).toggle(showElement).toggleClass('multiselect-filter-hidden', !showElement); // Differentiate groups and group items.\n\n                      if ($(element).hasClass('multiselect-group')) {\n                        // Remember group status.\n                        currentGroup = element;\n                        currentGroupVisible = showElement;\n                      } else {\n                        // Show group name when at least one of its items is visible.\n                        if (showElement) {\n                          $(currentGroup).show().removeClass('multiselect-filter-hidden');\n                        } // Show all group items when group name satisfies filter.\n\n\n                        if (!showElement && currentGroupVisible) {\n                          $(element).show().removeClass('multiselect-filter-hidden');\n                        }\n                      }\n                    }\n                  }, this));\n                }\n\n                this.updateSelectAll();\n\n                if (this.options.enableClickableOptGroups && this.options.multiple) {\n                  this.updateOptGroups();\n                }\n\n                this.options.onFiltering(event.target);\n              }, this), 300, this);\n            }, this));\n          }\n        }\n      },\n\n      /**\n       * Unbinds the whole plugin.\n       */\n      destroy: function destroy() {\n        this.$container.remove();\n        this.$select.show(); // reset original state\n\n        this.$select.prop('disabled', this.options.wasDisabled);\n        this.$select.data('multiselect', null);\n      },\n\n      /**\n       * Refreshs the multiselect based on the selected options of the select.\n       */\n      refresh: function refresh() {\n        var inputs = $.map($('li input', this.$ul), $);\n        $('option', this.$select).each($.proxy(function (index, element) {\n          var $elem = $(element);\n          var value = $elem.val();\n          var $input;\n\n          for (var i = inputs.length; 0 < i--;)\n          /**/\n          {\n            if (value !== ($input = inputs[i]).val()) continue; // wrong li\n\n            if ($elem.is(':selected')) {\n              $input.prop('checked', true);\n\n              if (this.options.selectedClass) {\n                $input.closest('li').addClass(this.options.selectedClass);\n              }\n            } else {\n              $input.prop('checked', false);\n\n              if (this.options.selectedClass) {\n                $input.closest('li').removeClass(this.options.selectedClass);\n              }\n            }\n\n            if ($elem.is(\":disabled\")) {\n              $input.attr('disabled', 'disabled').prop('disabled', true).closest('li').addClass('disabled');\n            } else {\n              $input.prop('disabled', false).closest('li').removeClass('disabled');\n            }\n\n            break; // assumes unique values\n          }\n        }, this));\n        this.updateButtonText();\n        this.updateSelectAll();\n\n        if (this.options.enableClickableOptGroups && this.options.multiple) {\n          this.updateOptGroups();\n        }\n      },\n\n      /**\n       * Select all options of the given values.\n       *\n       * If triggerOnChange is set to true, the on change event is triggered if\n       * and only if one value is passed.\n       *\n       * @param {Array} selectValues\n       * @param {Boolean} triggerOnChange\n       */\n      select: function select(selectValues, triggerOnChange) {\n        if (!$.isArray(selectValues)) {\n          selectValues = [selectValues];\n        }\n\n        for (var i = 0; i < selectValues.length; i++) {\n          var value = selectValues[i];\n\n          if (value === null || value === undefined) {\n            continue;\n          }\n\n          var $option = this.getOptionByValue(value);\n          var $checkbox = this.getInputByValue(value);\n\n          if ($option === undefined || $checkbox === undefined) {\n            continue;\n          }\n\n          if (!this.options.multiple) {\n            this.deselectAll(false);\n          }\n\n          if (this.options.selectedClass) {\n            $checkbox.closest('li').addClass(this.options.selectedClass);\n          }\n\n          $checkbox.prop('checked', true);\n          $option.prop('selected', true);\n\n          if (triggerOnChange) {\n            this.options.onChange($option, true);\n          }\n        }\n\n        this.updateButtonText();\n        this.updateSelectAll();\n\n        if (this.options.enableClickableOptGroups && this.options.multiple) {\n          this.updateOptGroups();\n        }\n      },\n\n      /**\n       * Clears all selected items.\n       */\n      clearSelection: function clearSelection() {\n        this.deselectAll(false);\n        this.updateButtonText();\n        this.updateSelectAll();\n\n        if (this.options.enableClickableOptGroups && this.options.multiple) {\n          this.updateOptGroups();\n        }\n      },\n\n      /**\n       * Deselects all options of the given values.\n       *\n       * If triggerOnChange is set to true, the on change event is triggered, if\n       * and only if one value is passed.\n       *\n       * @param {Array} deselectValues\n       * @param {Boolean} triggerOnChange\n       */\n      deselect: function deselect(deselectValues, triggerOnChange) {\n        if (!$.isArray(deselectValues)) {\n          deselectValues = [deselectValues];\n        }\n\n        for (var i = 0; i < deselectValues.length; i++) {\n          var value = deselectValues[i];\n\n          if (value === null || value === undefined) {\n            continue;\n          }\n\n          var $option = this.getOptionByValue(value);\n          var $checkbox = this.getInputByValue(value);\n\n          if ($option === undefined || $checkbox === undefined) {\n            continue;\n          }\n\n          if (this.options.selectedClass) {\n            $checkbox.closest('li').removeClass(this.options.selectedClass);\n          }\n\n          $checkbox.prop('checked', false);\n          $option.prop('selected', false);\n\n          if (triggerOnChange) {\n            this.options.onChange($option, false);\n          }\n        }\n\n        this.updateButtonText();\n        this.updateSelectAll();\n\n        if (this.options.enableClickableOptGroups && this.options.multiple) {\n          this.updateOptGroups();\n        }\n      },\n\n      /**\n       * Selects all enabled & visible options.\n       *\n       * If justVisible is true or not specified, only visible options are selected.\n       *\n       * @param {Boolean} justVisible\n       * @param {Boolean} triggerOnSelectAll\n       */\n      selectAll: function selectAll(justVisible, triggerOnSelectAll) {\n        var justVisible = typeof justVisible === 'undefined' ? true : justVisible;\n        var allLis = $(\"li:not(.divider):not(.disabled):not(.multiselect-group)\", this.$ul);\n        var visibleLis = $(\"li:not(.divider):not(.disabled):not(.multiselect-group):not(.multiselect-filter-hidden):not(.multiselect-collapisble-hidden)\", this.$ul).filter(':visible');\n\n        if (justVisible) {\n          $('input:enabled', visibleLis).prop('checked', true);\n          visibleLis.addClass(this.options.selectedClass);\n          $('input:enabled', visibleLis).each($.proxy(function (index, element) {\n            var value = $(element).val();\n            var option = this.getOptionByValue(value);\n            $(option).prop('selected', true);\n          }, this));\n        } else {\n          $('input:enabled', allLis).prop('checked', true);\n          allLis.addClass(this.options.selectedClass);\n          $('input:enabled', allLis).each($.proxy(function (index, element) {\n            var value = $(element).val();\n            var option = this.getOptionByValue(value);\n            $(option).prop('selected', true);\n          }, this));\n        }\n\n        $('li input[value=\"' + this.options.selectAllValue + '\"]', this.$ul).prop('checked', true);\n\n        if (this.options.enableClickableOptGroups && this.options.multiple) {\n          this.updateOptGroups();\n        }\n\n        if (triggerOnSelectAll) {\n          this.options.onSelectAll();\n        }\n      },\n\n      /**\n       * Deselects all options.\n       *\n       * If justVisible is true or not specified, only visible options are deselected.\n       *\n       * @param {Boolean} justVisible\n       */\n      deselectAll: function deselectAll(justVisible, triggerOnDeselectAll) {\n        var justVisible = typeof justVisible === 'undefined' ? true : justVisible;\n        var allLis = $(\"li:not(.divider):not(.disabled):not(.multiselect-group)\", this.$ul);\n        var visibleLis = $(\"li:not(.divider):not(.disabled):not(.multiselect-group):not(.multiselect-filter-hidden):not(.multiselect-collapisble-hidden)\", this.$ul).filter(':visible');\n\n        if (justVisible) {\n          $('input[type=\"checkbox\"]:enabled', visibleLis).prop('checked', false);\n          visibleLis.removeClass(this.options.selectedClass);\n          $('input[type=\"checkbox\"]:enabled', visibleLis).each($.proxy(function (index, element) {\n            var value = $(element).val();\n            var option = this.getOptionByValue(value);\n            $(option).prop('selected', false);\n          }, this));\n        } else {\n          $('input[type=\"checkbox\"]:enabled', allLis).prop('checked', false);\n          allLis.removeClass(this.options.selectedClass);\n          $('input[type=\"checkbox\"]:enabled', allLis).each($.proxy(function (index, element) {\n            var value = $(element).val();\n            var option = this.getOptionByValue(value);\n            $(option).prop('selected', false);\n          }, this));\n        }\n\n        $('li input[value=\"' + this.options.selectAllValue + '\"]', this.$ul).prop('checked', false);\n\n        if (this.options.enableClickableOptGroups && this.options.multiple) {\n          this.updateOptGroups();\n        }\n\n        if (triggerOnDeselectAll) {\n          this.options.onDeselectAll();\n        }\n      },\n\n      /**\n       * Rebuild the plugin.\n       *\n       * Rebuilds the dropdown, the filter and the select all option.\n       */\n      rebuild: function rebuild() {\n        this.$ul.html(''); // Important to distinguish between radios and checkboxes.\n\n        this.options.multiple = this.$select.attr('multiple') === \"multiple\";\n        this.buildSelectAll();\n        this.buildDropdownOptions();\n        this.buildFilter();\n        this.updateButtonText();\n        this.updateSelectAll(true);\n\n        if (this.options.enableClickableOptGroups && this.options.multiple) {\n          this.updateOptGroups();\n        }\n\n        if (this.options.disableIfEmpty && $('option', this.$select).length <= 0) {\n          this.disable();\n        } else {\n          this.enable();\n        }\n\n        if (this.options.dropRight) {\n          this.$ul.addClass('pull-right');\n        }\n      },\n\n      /**\n       * The provided data will be used to build the dropdown.\n       */\n      dataprovider: function dataprovider(_dataprovider) {\n        var groupCounter = 0;\n        var $select = this.$select.empty();\n        $.each(_dataprovider, function (index, option) {\n          var $tag;\n\n          if ($.isArray(option.children)) {\n            // create optiongroup tag\n            groupCounter++;\n            $tag = $('<optgroup/>').attr({\n              label: option.label || 'Group ' + groupCounter,\n              disabled: !!option.disabled\n            });\n            forEach(option.children, function (subOption) {\n              // add children option tags\n              var attributes = {\n                value: subOption.value,\n                label: subOption.label || subOption.value,\n                title: subOption.title,\n                selected: !!subOption.selected,\n                disabled: !!subOption.disabled\n              }; //Loop through attributes object and add key-value for each attribute\n\n              for (var key in subOption.attributes) {\n                attributes['data-' + key] = subOption.attributes[key];\n              } //Append original attributes + new data attributes to option\n\n\n              $tag.append($('<option/>').attr(attributes));\n            });\n          } else {\n            var attributes = {\n              'value': option.value,\n              'label': option.label || option.value,\n              'title': option.title,\n              'class': option.class,\n              'selected': !!option.selected,\n              'disabled': !!option.disabled\n            }; //Loop through attributes object and add key-value for each attribute\n\n            for (var key in option.attributes) {\n              attributes['data-' + key] = option.attributes[key];\n            } //Append original attributes + new data attributes to option\n\n\n            $tag = $('<option/>').attr(attributes);\n            $tag.text(option.label || option.value);\n          }\n\n          $select.append($tag);\n        });\n        this.rebuild();\n      },\n\n      /**\n       * Enable the multiselect.\n       */\n      enable: function enable() {\n        this.$select.prop('disabled', false);\n        this.$button.prop('disabled', false).removeClass('disabled');\n      },\n\n      /**\n       * Disable the multiselect.\n       */\n      disable: function disable() {\n        this.$select.prop('disabled', true);\n        this.$button.prop('disabled', true).addClass('disabled');\n      },\n\n      /**\n       * Set the options.\n       *\n       * @param {Array} options\n       */\n      setOptions: function setOptions(options) {\n        this.options = this.mergeOptions(options);\n      },\n\n      /**\n       * Merges the given options with the default options.\n       *\n       * @param {Array} options\n       * @returns {Array}\n       */\n      mergeOptions: function mergeOptions(options) {\n        return $.extend(true, {}, this.defaults, this.options, options);\n      },\n\n      /**\n       * Checks whether a select all checkbox is present.\n       *\n       * @returns {Boolean}\n       */\n      hasSelectAll: function hasSelectAll() {\n        return $('li.multiselect-all', this.$ul).length > 0;\n      },\n\n      /**\n       * Update opt groups.\n       */\n      updateOptGroups: function updateOptGroups() {\n        var $groups = $('li.multiselect-group', this.$ul);\n        var selectedClass = this.options.selectedClass;\n        $groups.each(function () {\n          var $options = $(this).nextUntil('li.multiselect-group').not('.multiselect-filter-hidden').not('.disabled');\n          var checked = true;\n          $options.each(function () {\n            var $input = $('input', this);\n\n            if (!$input.prop('checked')) {\n              checked = false;\n            }\n          });\n\n          if (selectedClass) {\n            if (checked) {\n              $(this).addClass(selectedClass);\n            } else {\n              $(this).removeClass(selectedClass);\n            }\n          }\n\n          $('input', this).prop('checked', checked);\n        });\n      },\n\n      /**\n       * Updates the select all checkbox based on the currently displayed and selected checkboxes.\n       */\n      updateSelectAll: function updateSelectAll(notTriggerOnSelectAll) {\n        if (this.hasSelectAll()) {\n          var allBoxes = $(\"li:not(.multiselect-item):not(.multiselect-filter-hidden):not(.multiselect-group):not(.disabled) input:enabled\", this.$ul);\n          var allBoxesLength = allBoxes.length;\n          var checkedBoxesLength = allBoxes.filter(\":checked\").length;\n          var selectAllLi = $(\"li.multiselect-all\", this.$ul);\n          var selectAllInput = selectAllLi.find(\"input\");\n\n          if (checkedBoxesLength > 0 && checkedBoxesLength === allBoxesLength) {\n            selectAllInput.prop(\"checked\", true);\n            selectAllLi.addClass(this.options.selectedClass);\n          } else {\n            selectAllInput.prop(\"checked\", false);\n            selectAllLi.removeClass(this.options.selectedClass);\n          }\n        }\n      },\n\n      /**\n       * Update the button text and its title based on the currently selected options.\n       */\n      updateButtonText: function updateButtonText() {\n        var options = this.getSelected(); // First update the displayed button text.\n\n        if (this.options.enableHTML) {\n          $('.multiselect .multiselect-selected-text', this.$container).html(this.options.buttonText(options, this.$select));\n        } else {\n          $('.multiselect .multiselect-selected-text', this.$container).text(this.options.buttonText(options, this.$select));\n        } // Now update the title attribute of the button.\n\n\n        $('.multiselect', this.$container).attr('title', this.options.buttonTitle(options, this.$select));\n      },\n\n      /**\n       * Get all selected options.\n       *\n       * @returns {jQUery}\n       */\n      getSelected: function getSelected() {\n        return $('option', this.$select).filter(\":selected\");\n      },\n\n      /**\n       * Gets a select option by its value.\n       *\n       * @param {String} value\n       * @returns {jQuery}\n       */\n      getOptionByValue: function getOptionByValue(value) {\n        var options = $('option', this.$select);\n        var valueToCompare = value.toString();\n\n        for (var i = 0; i < options.length; i = i + 1) {\n          var option = options[i];\n\n          if (option.value === valueToCompare) {\n            return $(option);\n          }\n        }\n      },\n\n      /**\n       * Get the input (radio/checkbox) by its value.\n       *\n       * @param {String} value\n       * @returns {jQuery}\n       */\n      getInputByValue: function getInputByValue(value) {\n        var checkboxes = $('li input:not(.multiselect-search)', this.$ul);\n        var valueToCompare = value.toString();\n\n        for (var i = 0; i < checkboxes.length; i = i + 1) {\n          var checkbox = checkboxes[i];\n\n          if (checkbox.value === valueToCompare) {\n            return $(checkbox);\n          }\n        }\n      },\n\n      /**\n       * Used for knockout integration.\n       */\n      updateOriginalOptions: function updateOriginalOptions() {\n        this.originalOptions = this.$select.clone()[0].options;\n      },\n      asyncFunction: function asyncFunction(callback, timeout, self) {\n        var args = Array.prototype.slice.call(arguments, 3);\n        return setTimeout(function () {\n          callback.apply(self || window, args);\n        }, timeout);\n      },\n      setAllSelectedText: function setAllSelectedText(allSelectedText) {\n        this.options.allSelectedText = allSelectedText;\n        this.updateButtonText();\n      }\n    };\n\n    $.fn.multiselect = function (option, parameter, extraOptions) {\n      return this.each(function () {\n        var data = $(this).data('multiselect');\n        var options = (typeof option === \"undefined\" ? \"undefined\" : _typeof(option)) === 'object' && option; // Initialize the multiselect.\n\n        if (!data) {\n          data = new Multiselect(this, options);\n          $(this).data('multiselect', data);\n        } // Call multiselect method.\n\n\n        if (typeof option === 'string') {\n          data[option](parameter, extraOptions);\n\n          if (option === 'destroy') {\n            $(this).data('multiselect', false);\n          }\n        }\n      });\n    };\n\n    $.fn.multiselect.Constructor = Multiselect;\n    $(function () {\n      $(\"select[data-role=multiselect]\").multiselect();\n    });\n  }(jQuery);\n  return jQuery;\n};","map":null,"metadata":{},"sourceType":"script"}