{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Animate from 'rc-animate';\nimport isCssAnimationSupported from '../_util/isCssAnimationSupported';\nimport omit from 'omit.js';\n\nvar Spin = function (_React$Component) {\n  _inherits(Spin, _React$Component);\n\n  function Spin(props) {\n    _classCallCheck(this, Spin);\n\n    var _this = _possibleConstructorReturn(this, (Spin.__proto__ || Object.getPrototypeOf(Spin)).call(this, props));\n\n    var spinning = props.spinning;\n    _this.state = {\n      spinning: spinning\n    };\n    return _this;\n  }\n\n  _createClass(Spin, [{\n    key: 'isNestedPattern',\n    value: function isNestedPattern() {\n      return !!(this.props && this.props.children);\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (!isCssAnimationSupported()) {\n        // Show text in IE8/9\n        this.setState({\n          notCssAnimationSupported: true\n        });\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.debounceTimeout) {\n        clearTimeout(this.debounceTimeout);\n      }\n\n      if (this.delayTimeout) {\n        clearTimeout(this.delayTimeout);\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      var currentSpinning = this.props.spinning;\n      var spinning = nextProps.spinning;\n      var delay = this.props.delay;\n\n      if (this.debounceTimeout) {\n        clearTimeout(this.debounceTimeout);\n      }\n\n      if (currentSpinning && !spinning) {\n        this.debounceTimeout = setTimeout(function () {\n          return _this2.setState({\n            spinning: spinning\n          });\n        }, 200);\n\n        if (this.delayTimeout) {\n          clearTimeout(this.delayTimeout);\n        }\n      } else {\n        if (spinning && delay && !isNaN(Number(delay))) {\n          if (this.delayTimeout) {\n            clearTimeout(this.delayTimeout);\n          }\n\n          this.delayTimeout = setTimeout(function () {\n            return _this2.setState({\n              spinning: spinning\n            });\n          }, delay);\n        } else {\n          this.setState({\n            spinning: spinning\n          });\n        }\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _classNames;\n\n      var _a = this.props,\n          className = _a.className,\n          size = _a.size,\n          prefixCls = _a.prefixCls,\n          tip = _a.tip,\n          wrapperClassName = _a.wrapperClassName,\n          restProps = __rest(_a, [\"className\", \"size\", \"prefixCls\", \"tip\", \"wrapperClassName\"]);\n\n      var _state = this.state,\n          spinning = _state.spinning,\n          notCssAnimationSupported = _state.notCssAnimationSupported;\n      var spinClassName = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, prefixCls + '-sm', size === 'small'), _defineProperty(_classNames, prefixCls + '-lg', size === 'large'), _defineProperty(_classNames, prefixCls + '-spinning', spinning), _defineProperty(_classNames, prefixCls + '-show-text', !!tip || notCssAnimationSupported), _classNames), className); // fix https://fb.me/react-unknown-prop\n\n      var divProps = omit(restProps, ['spinning', 'delay']);\n      var spinElement = React.createElement('div', _extends({}, divProps, {\n        className: spinClassName\n      }), React.createElement('span', {\n        className: prefixCls + '-dot'\n      }, React.createElement('i', null), React.createElement('i', null), React.createElement('i', null), React.createElement('i', null)), tip ? React.createElement('div', {\n        className: prefixCls + '-text'\n      }, tip) : null);\n\n      if (this.isNestedPattern()) {\n        var _classNames2;\n\n        var animateClassName = prefixCls + '-nested-loading';\n\n        if (wrapperClassName) {\n          animateClassName += ' ' + wrapperClassName;\n        }\n\n        var containerClassName = classNames((_classNames2 = {}, _defineProperty(_classNames2, prefixCls + '-container', true), _defineProperty(_classNames2, prefixCls + '-blur', spinning), _classNames2));\n        return React.createElement(Animate, _extends({}, divProps, {\n          component: 'div',\n          className: animateClassName,\n          style: null,\n          transitionName: 'fade'\n        }), spinning && React.createElement('div', {\n          key: 'loading'\n        }, spinElement), React.createElement('div', {\n          className: containerClassName,\n          key: 'container'\n        }, this.props.children));\n      }\n\n      return spinElement;\n    }\n  }]);\n\n  return Spin;\n}(React.Component);\n\nexport default Spin;\nSpin.defaultProps = {\n  prefixCls: 'ant-spin',\n  spinning: true,\n  size: 'default',\n  wrapperClassName: ''\n};\nSpin.propTypes = {\n  prefixCls: PropTypes.string,\n  className: PropTypes.string,\n  spinning: PropTypes.bool,\n  size: PropTypes.oneOf(['small', 'default', 'large']),\n  wrapperClassName: PropTypes.string\n};","map":null,"metadata":{},"sourceType":"module"}