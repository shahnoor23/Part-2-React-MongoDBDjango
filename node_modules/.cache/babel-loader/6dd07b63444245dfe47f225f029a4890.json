{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport React from 'react';\nimport createReactClass from 'create-react-class';\nimport Dialog from './Dialog';\nimport getContainerRenderMixin from 'rc-util/es/getContainerRenderMixin';\nvar DialogWrap = createReactClass({\n  displayName: 'DialogWrap',\n  mixins: [getContainerRenderMixin({\n    isVisible: function isVisible(instance) {\n      return instance.props.visible;\n    },\n    autoDestroy: false,\n    getComponent: function getComponent(instance, extra) {\n      return React.createElement(Dialog, _extends({}, instance.props, extra, {\n        key: \"dialog\"\n      }));\n    },\n    getContainer: function getContainer(instance) {\n      if (instance.props.getContainer) {\n        return instance.props.getContainer();\n      }\n\n      var container = document.createElement('div');\n      document.body.appendChild(container);\n      return container;\n    }\n  })],\n  getDefaultProps: function getDefaultProps() {\n    return {\n      visible: false\n    };\n  },\n  shouldComponentUpdate: function shouldComponentUpdate(_ref) {\n    var visible = _ref.visible;\n    return !!(this.props.visible || visible);\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    if (this.props.visible) {\n      this.renderComponent({\n        afterClose: this.removeContainer,\n        onClose: function onClose() {},\n        visible: false\n      });\n    } else {\n      this.removeContainer();\n    }\n  },\n  getElement: function getElement(part) {\n    return this._component.getElement(part);\n  },\n  render: function render() {\n    return null;\n  }\n});\nexport default DialogWrap;","map":null,"metadata":{},"sourceType":"module"}