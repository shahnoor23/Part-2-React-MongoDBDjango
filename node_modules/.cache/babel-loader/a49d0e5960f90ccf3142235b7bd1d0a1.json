{"ast":null,"code":"/**\n * @hidden\n */\nvar isPresent = function isPresent(value) {\n  return value !== null && value !== undefined;\n};\n/**\n * @hidden\n */\n\n\nvar sameCharsOnly = function sameCharsOnly(word, character) {\n  for (var idx = 0; idx < word.length; idx++) {\n    if (word.charAt(idx) !== character) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * @hidden\n */\n\n\nvar shuffleData = function shuffleData(data, splitIndex, defaultItem) {\n  var result = data;\n\n  if (defaultItem) {\n    result = [defaultItem].concat(result);\n  }\n\n  return result.slice(splitIndex).concat(result.slice(0, splitIndex));\n};\n/**\n * @hidden\n */\n\n\nvar matchText = function matchText(text, word, ignoreCase) {\n  if (!isPresent(text)) {\n    return false;\n  }\n\n  var temp = String(text);\n\n  if (ignoreCase) {\n    temp = temp.toLowerCase();\n  }\n\n  return temp.indexOf(word) === 0;\n};\n/**\n * @hidden\n */\n\n\nvar scrollToItem = function scrollToItem(scrollElem, itemHeight, itemIndex, translate, virtualScroll) {\n  var viewportHeight = scrollElem.offsetHeight;\n  var itemOffsetTop = itemHeight * itemIndex + (virtualScroll ? translate - scrollElem.scrollTop : 0);\n\n  if (virtualScroll) {\n    var diff = 0;\n\n    if (itemOffsetTop + itemHeight > viewportHeight) {\n      diff = itemOffsetTop + itemHeight - viewportHeight;\n    } else if (itemOffsetTop < 0) {\n      diff = itemOffsetTop;\n    }\n\n    if (diff !== 0) {\n      scrollElem.scrollTop += diff;\n    } else if (scrollElem.scrollTop === 0 && translate !== 0) {\n      scrollElem.scrollTop = translate;\n    }\n  } else {\n    if (itemOffsetTop + itemHeight > viewportHeight + scrollElem.scrollTop) {\n      scrollElem.scrollTop = itemOffsetTop + itemHeight - viewportHeight;\n    } else if (itemOffsetTop < scrollElem.scrollTop) {\n      scrollElem.scrollTop -= scrollElem.scrollTop - itemOffsetTop;\n    }\n  }\n};\n/**\n * @hidden\n */\n\n\nvar itemIndexStartsWith = function itemIndexStartsWith(items, text, field) {\n  var result = -1;\n\n  if (text) {\n    text = text.toLowerCase();\n\n    for (var i = 0; i < items.length; i++) {\n      var itemText = (getItemValue(items[i], field) || '') + '';\n\n      if (itemText && itemText.toLowerCase().startsWith(text)) {\n        result = i;\n        break;\n      }\n    }\n  }\n\n  return result;\n};\n/**\n * @hidden\n */\n\n\nvar getItemIndexByText = function getItemIndexByText(data, text, textField, matchCase) {\n  if (matchCase === void 0) {\n    matchCase = false;\n  }\n\n  var casing = function casing(value) {\n    return matchCase ? value : value.toLowerCase();\n  };\n\n  return data.findIndex(function (item) {\n    return textField ? casing(getItemValue(item, textField)) === casing(text) : casing(text) === casing(item.toString());\n  });\n};\n/**\n * @hidden\n */\n\n\nvar getItemValue = function getItemValue(item, field) {\n  if (field && isPresent(item)) {\n    var path = field.split('.');\n    var data_1 = item;\n    path.forEach(function (p) {\n      data_1 = data_1 ? data_1[p] : undefined;\n    });\n    return data_1;\n  }\n\n  return item;\n};\n/**\n * @hidden\n */\n\n\nvar matchDataCollections = function matchDataCollections(data1, data2, key) {\n  if (data1 === void 0) {\n    data1 = [];\n  }\n\n  if (data2 === void 0) {\n    data2 = [];\n  }\n\n  if (data1 === data2) {\n    return true;\n  }\n\n  if (data1.length !== data2.length) {\n    return false;\n  }\n\n  for (var i = 0; i < data1.length; i++) {\n    if (!areSame(data1[i], data2[i], key)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * @hidden\n */\n\n\nvar removeDataItems = function removeDataItems(items, toRemove, key) {\n  toRemove.forEach(function (item) {\n    var itemIndex = items.findIndex(function (i) {\n      return areSame(i, item, key);\n    });\n\n    if (itemIndex !== -1) {\n      items.splice(itemIndex, 1);\n    }\n  });\n};\n/**\n * @hidden\n */\n\n\nvar areSame = function areSame(item1, item2, key) {\n  return item1 === item2 || isPresent(item1) === isPresent(item2) && getItemValue(item1, key) === getItemValue(item2, key);\n};\n/**\n * @hidden\n */\n\n\nvar getFocusedItem = function getFocusedItem(data, value, textField) {\n  if (value) {\n    var selectedIndex = getItemIndexByText(data, value, textField, true);\n    return selectedIndex !== -1 ? data[selectedIndex] : data[itemIndexStartsWith(data, value, textField)];\n  }\n\n  return data[0];\n};\n/**\n * @hidden\n */\n\n\nvar suggestValue = function suggestValue(value, data, textField) {\n  if (data === void 0) {\n    data = [];\n  }\n\n  var suggested = '';\n\n  if (value) {\n    var suggestedItem = data[itemIndexStartsWith(data, value, textField)];\n\n    if (suggestedItem) {\n      var suggestedText = getItemValue(suggestedItem, textField);\n\n      if (value.toLowerCase() !== suggestedText.toLowerCase()) {\n        suggested = suggestedText.substring(value.length);\n      }\n    }\n  }\n\n  return suggested;\n};\n/**\n * @hidden\n */\n\n\nvar preventDefaultNonInputs = function preventDefaultNonInputs(event) {\n  if (event.target.nodeName !== 'INPUT') {\n    event.preventDefault();\n  }\n};\n\nexport { isPresent, sameCharsOnly, shuffleData, matchText, scrollToItem, itemIndexStartsWith, getItemIndexByText, getItemValue, matchDataCollections, removeDataItems, areSame, getFocusedItem, preventDefaultNonInputs, suggestValue };","map":null,"metadata":{},"sourceType":"module"}