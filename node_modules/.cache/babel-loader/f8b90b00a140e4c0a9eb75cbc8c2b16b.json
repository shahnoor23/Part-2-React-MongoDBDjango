{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';\nimport _slicedToArray from 'babel-runtime/helpers/slicedToArray';\nimport React from 'react';\nimport createReactClass from 'create-react-class';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport classnames from 'classnames';\nimport CalendarPart from './range-calendar/CalendarPart';\nimport TodayButton from './calendar/TodayButton';\nimport OkButton from './calendar/OkButton';\nimport TimePickerButton from './calendar/TimePickerButton';\nimport CommonMixin from './mixin/CommonMixin';\nimport { syncTime, getTodayTime, isAllowedDate } from './util/';\n\nfunction noop() {}\n\nfunction isEmptyArray(arr) {\n  return Array.isArray(arr) && (arr.length === 0 || arr.every(function (i) {\n    return !i;\n  }));\n}\n\nfunction getValueFromSelectedValue(selectedValue) {\n  var _selectedValue = _slicedToArray(selectedValue, 2),\n      start = _selectedValue[0],\n      end = _selectedValue[1];\n\n  var newEnd = end && end.isSame(start, 'month') ? end.clone().add(1, 'month') : end;\n  return [start, newEnd];\n}\n\nfunction normalizeAnchor(props, init) {\n  var selectedValue = props.selectedValue || init && props.defaultSelectedValue;\n  var value = props.value || init && props.defaultValue;\n  var normalizedValue = value ? getValueFromSelectedValue(value) : getValueFromSelectedValue(selectedValue);\n  return !isEmptyArray(normalizedValue) ? normalizedValue : init && [moment(), moment().add(1, 'months')];\n}\n\nfunction generateOptions(length) {\n  var arr = [];\n\n  for (var value = 0; value < length; value++) {\n    arr.push(value);\n  }\n\n  return arr;\n}\n\nfunction onInputSelect(direction, value) {\n  if (!value) {\n    return;\n  }\n\n  var originalValue = this.state.selectedValue;\n  var selectedValue = originalValue.concat();\n  var index = direction === 'left' ? 0 : 1;\n  selectedValue[index] = value;\n\n  if (selectedValue[0] && this.compare(selectedValue[0], selectedValue[1]) > 0) {\n    selectedValue[1 - index] = this.state.showTimePicker ? selectedValue[index] : undefined;\n  }\n\n  this.fireSelectValueChange(selectedValue);\n}\n\nvar RangeCalendar = createReactClass({\n  displayName: 'RangeCalendar',\n  propTypes: {\n    prefixCls: PropTypes.string,\n    dateInputPlaceholder: PropTypes.any,\n    defaultValue: PropTypes.any,\n    value: PropTypes.any,\n    hoverValue: PropTypes.any,\n    timePicker: PropTypes.any,\n    showOk: PropTypes.bool,\n    showToday: PropTypes.bool,\n    defaultSelectedValue: PropTypes.array,\n    selectedValue: PropTypes.array,\n    onOk: PropTypes.func,\n    showClear: PropTypes.bool,\n    locale: PropTypes.object,\n    onChange: PropTypes.func,\n    onSelect: PropTypes.func,\n    onValueChange: PropTypes.func,\n    onHoverChange: PropTypes.func,\n    format: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n    onClear: PropTypes.func,\n    type: PropTypes.any,\n    disabledDate: PropTypes.func,\n    disabledTime: PropTypes.func\n  },\n  mixins: [CommonMixin],\n  getDefaultProps: function getDefaultProps() {\n    return {\n      type: 'both',\n      defaultSelectedValue: [],\n      onValueChange: noop,\n      onHoverChange: noop,\n      disabledTime: noop,\n      showToday: true\n    };\n  },\n  getInitialState: function getInitialState() {\n    var props = this.props;\n    var selectedValue = props.selectedValue || props.defaultSelectedValue;\n    var value = normalizeAnchor(props, 1);\n    return {\n      selectedValue: selectedValue,\n      prevSelectedValue: selectedValue,\n      firstSelectedValue: null,\n      hoverValue: props.hoverValue || [],\n      value: value,\n      showTimePicker: false,\n      isStartMonthYearPanelShow: false,\n      isEndMonthYearPanelShow: false\n    };\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    var newState = {};\n\n    if ('value' in nextProps) {\n      newState.value = normalizeAnchor(nextProps, 0);\n      this.setState(newState);\n    }\n\n    if ('hoverValue' in nextProps) {\n      this.setState({\n        hoverValue: nextProps.hoverValue\n      });\n    }\n\n    if ('selectedValue' in nextProps) {\n      newState.selectedValue = nextProps.selectedValue;\n      newState.prevSelectedValue = nextProps.selectedValue;\n      this.setState(newState);\n    }\n  },\n  onDatePanelEnter: function onDatePanelEnter() {\n    if (this.hasSelectedValue()) {\n      this.fireHoverValueChange(this.state.selectedValue.concat());\n    }\n  },\n  onDatePanelLeave: function onDatePanelLeave() {\n    if (this.hasSelectedValue()) {\n      this.fireHoverValueChange([]);\n    }\n  },\n  onSelect: function onSelect(value) {\n    var type = this.props.type;\n    var _state = this.state,\n        selectedValue = _state.selectedValue,\n        prevSelectedValue = _state.prevSelectedValue,\n        firstSelectedValue = _state.firstSelectedValue;\n    var nextSelectedValue = void 0;\n\n    if (type === 'both') {\n      if (!firstSelectedValue) {\n        syncTime(prevSelectedValue[0], value);\n        nextSelectedValue = [value];\n      } else if (this.compare(firstSelectedValue, value) < 0) {\n        syncTime(prevSelectedValue[1], value);\n        nextSelectedValue = [firstSelectedValue, value];\n      } else {\n        syncTime(prevSelectedValue[0], value);\n        syncTime(prevSelectedValue[1], firstSelectedValue);\n        nextSelectedValue = [value, firstSelectedValue];\n      }\n    } else if (type === 'start') {\n      syncTime(prevSelectedValue[0], value);\n      var endValue = selectedValue[1];\n      nextSelectedValue = endValue && this.compare(endValue, value) > 0 ? [value, endValue] : [value];\n    } else {\n      // type === 'end'\n      var startValue = selectedValue[0];\n\n      if (startValue && this.compare(startValue, value) <= 0) {\n        syncTime(prevSelectedValue[1], value);\n        nextSelectedValue = [startValue, value];\n      } else {\n        syncTime(prevSelectedValue[0], value);\n        nextSelectedValue = [value];\n      }\n    }\n\n    this.fireSelectValueChange(nextSelectedValue);\n  },\n  onDayHover: function onDayHover(value) {\n    var hoverValue = [];\n    var _state2 = this.state,\n        selectedValue = _state2.selectedValue,\n        firstSelectedValue = _state2.firstSelectedValue;\n    var type = this.props.type;\n\n    if (type === 'start' && selectedValue[1]) {\n      hoverValue = this.compare(value, selectedValue[1]) < 0 ? [value, selectedValue[1]] : [value];\n    } else if (type === 'end' && selectedValue[0]) {\n      hoverValue = this.compare(value, selectedValue[0]) > 0 ? [selectedValue[0], value] : [];\n    } else {\n      if (!firstSelectedValue) {\n        return;\n      }\n\n      hoverValue = this.compare(value, firstSelectedValue) < 0 ? [value, firstSelectedValue] : [firstSelectedValue, value];\n    }\n\n    this.fireHoverValueChange(hoverValue);\n  },\n  onToday: function onToday() {\n    var startValue = getTodayTime(this.state.value[0]);\n    var endValue = startValue.clone().add(1, 'months');\n    this.setState({\n      value: [startValue, endValue]\n    });\n  },\n  onOpenTimePicker: function onOpenTimePicker() {\n    this.setState({\n      showTimePicker: true\n    });\n  },\n  onCloseTimePicker: function onCloseTimePicker() {\n    this.setState({\n      showTimePicker: false\n    });\n  },\n  onOk: function onOk() {\n    var selectedValue = this.state.selectedValue;\n\n    if (this.isAllowedDateAndTime(selectedValue)) {\n      this.props.onOk(this.state.selectedValue);\n    }\n  },\n  onStartInputSelect: function onStartInputSelect() {\n    for (var _len = arguments.length, oargs = Array(_len), _key = 0; _key < _len; _key++) {\n      oargs[_key] = arguments[_key];\n    }\n\n    var args = ['left'].concat(oargs);\n    return onInputSelect.apply(this, args);\n  },\n  onEndInputSelect: function onEndInputSelect() {\n    for (var _len2 = arguments.length, oargs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      oargs[_key2] = arguments[_key2];\n    }\n\n    var args = ['right'].concat(oargs);\n    return onInputSelect.apply(this, args);\n  },\n  onStartValueChange: function onStartValueChange(leftValue) {\n    var value = [].concat(_toConsumableArray(this.state.value));\n    value[0] = leftValue;\n    return this.fireValueChange(value);\n  },\n  onEndValueChange: function onEndValueChange(rightValue) {\n    var value = [].concat(_toConsumableArray(this.state.value));\n    value[1] = rightValue;\n    return this.fireValueChange(value);\n  },\n  onStartPanelChange: function onStartPanelChange(_ref) {\n    var showMonthPanel = _ref.showMonthPanel,\n        showYearPanel = _ref.showYearPanel;\n    this.setState({\n      isStartMonthYearPanelShow: showMonthPanel || showYearPanel\n    });\n  },\n  onEndPanelChange: function onEndPanelChange(_ref2) {\n    var showMonthPanel = _ref2.showMonthPanel,\n        showYearPanel = _ref2.showYearPanel;\n    this.setState({\n      isEndMonthYearPanelShow: showMonthPanel || showYearPanel\n    });\n  },\n  getStartValue: function getStartValue() {\n    var value = this.state.value[0];\n    var selectedValue = this.state.selectedValue; // keep selectedTime when select date\n\n    if (selectedValue[0] && this.props.timePicker) {\n      value = value.clone();\n      syncTime(selectedValue[0], value);\n    }\n\n    if (this.state.showTimePicker && selectedValue[0]) {\n      return selectedValue[0];\n    }\n\n    return value;\n  },\n  getEndValue: function getEndValue() {\n    var _state3 = this.state,\n        value = _state3.value,\n        selectedValue = _state3.selectedValue,\n        showTimePicker = _state3.showTimePicker;\n    var endValue = value[1] ? value[1].clone() : value[0].clone().add(1, 'month'); // keep selectedTime when select date\n\n    if (selectedValue[1] && this.props.timePicker) {\n      syncTime(selectedValue[1], endValue);\n    }\n\n    if (showTimePicker) {\n      return selectedValue[1] ? selectedValue[1] : this.getStartValue();\n    }\n\n    return endValue;\n  },\n  // get disabled hours for second picker\n  getEndDisableTime: function getEndDisableTime() {\n    var _state4 = this.state,\n        selectedValue = _state4.selectedValue,\n        value = _state4.value;\n    var startValue = selectedValue && selectedValue[0] || value[0].clone(); // if startTime and endTime is same day..\n    // the second time picker will not able to pick time before first time picker\n\n    if (!selectedValue[1] || startValue.isSame(selectedValue[1], 'day')) {\n      var hours = startValue.hour();\n      var minutes = startValue.minute();\n      var second = startValue.second();\n\n      var _disabledHours = generateOptions(hours);\n\n      var _disabledMinutes = generateOptions(minutes);\n\n      var _disabledSeconds = generateOptions(second);\n\n      return {\n        disabledHours: function disabledHours() {\n          return _disabledHours;\n        },\n        disabledMinutes: function disabledMinutes(hour) {\n          if (hour === hours) {\n            return _disabledMinutes;\n          }\n\n          return [];\n        },\n        disabledSeconds: function disabledSeconds(hour, minute) {\n          if (hour === hours && minute === minutes) {\n            return _disabledSeconds;\n          }\n\n          return [];\n        }\n      };\n    }\n\n    return null;\n  },\n  isAllowedDateAndTime: function isAllowedDateAndTime(selectedValue) {\n    return isAllowedDate(selectedValue[0], this.props.disabledDate, this.disabledStartTime) && isAllowedDate(selectedValue[1], this.props.disabledDate, this.disabledEndTime);\n  },\n  hasSelectedValue: function hasSelectedValue() {\n    var selectedValue = this.state.selectedValue;\n    return !!selectedValue[1] && !!selectedValue[0];\n  },\n  compare: function compare(v1, v2) {\n    if (this.props.timePicker) {\n      return v1.diff(v2);\n    }\n\n    return v1.diff(v2, 'days');\n  },\n  fireSelectValueChange: function fireSelectValueChange(selectedValue, direct) {\n    var timePicker = this.props.timePicker;\n    var prevSelectedValue = this.state.prevSelectedValue;\n\n    if (timePicker && timePicker.props.defaultValue) {\n      var timePickerDefaultValue = timePicker.props.defaultValue;\n\n      if (!prevSelectedValue[0] && selectedValue[0]) {\n        syncTime(timePickerDefaultValue[0], selectedValue[0]);\n      }\n\n      if (!prevSelectedValue[1] && selectedValue[1]) {\n        syncTime(timePickerDefaultValue[1], selectedValue[1]);\n      }\n    }\n\n    if (!('selectedValue' in this.props)) {\n      this.setState({\n        selectedValue: selectedValue\n      });\n    } // 尚未选择过时间，直接输入的话\n\n\n    if (!this.state.selectedValue[0] || !this.state.selectedValue[1]) {\n      var startValue = selectedValue[0] || moment();\n      var endValue = selectedValue[1] || startValue.clone().add(1, 'months');\n      this.setState({\n        selectedValue: selectedValue,\n        value: getValueFromSelectedValue([startValue, endValue])\n      });\n    }\n\n    if (selectedValue[0] && !selectedValue[1]) {\n      this.setState({\n        firstSelectedValue: selectedValue[0]\n      });\n      this.fireHoverValueChange(selectedValue.concat());\n    }\n\n    this.props.onChange(selectedValue);\n\n    if (direct || selectedValue[0] && selectedValue[1]) {\n      this.setState({\n        prevSelectedValue: selectedValue,\n        firstSelectedValue: null\n      });\n      this.fireHoverValueChange([]);\n      this.props.onSelect(selectedValue);\n    }\n  },\n  fireValueChange: function fireValueChange(value) {\n    var props = this.props;\n\n    if (!('value' in props)) {\n      this.setState({\n        value: value\n      });\n    }\n\n    props.onValueChange(value);\n  },\n  fireHoverValueChange: function fireHoverValueChange(hoverValue) {\n    var props = this.props;\n\n    if (!('hoverValue' in props)) {\n      this.setState({\n        hoverValue: hoverValue\n      });\n    }\n\n    props.onHoverChange(hoverValue);\n  },\n  clear: function clear() {\n    this.fireSelectValueChange([], true);\n    this.props.onClear();\n  },\n  disabledStartTime: function disabledStartTime(time) {\n    return this.props.disabledTime(time, 'start');\n  },\n  disabledEndTime: function disabledEndTime(time) {\n    return this.props.disabledTime(time, 'end');\n  },\n  disabledStartMonth: function disabledStartMonth(month) {\n    var value = this.state.value;\n    return month.isSameOrAfter(value[1], 'month');\n  },\n  disabledEndMonth: function disabledEndMonth(month) {\n    var value = this.state.value;\n    return month.isSameOrBefore(value[0], 'month');\n  },\n  render: function render() {\n    var _className, _classnames;\n\n    var props = this.props;\n    var state = this.state;\n    var showTimePicker = state.showTimePicker,\n        isStartMonthYearPanelShow = state.isStartMonthYearPanelShow,\n        isEndMonthYearPanelShow = state.isEndMonthYearPanelShow;\n    var prefixCls = props.prefixCls,\n        dateInputPlaceholder = props.dateInputPlaceholder,\n        timePicker = props.timePicker,\n        showOk = props.showOk,\n        locale = props.locale,\n        showClear = props.showClear,\n        showToday = props.showToday,\n        type = props.type;\n    var hoverValue = state.hoverValue,\n        selectedValue = state.selectedValue;\n    var className = (_className = {}, _defineProperty(_className, props.className, !!props.className), _defineProperty(_className, prefixCls, 1), _defineProperty(_className, prefixCls + '-hidden', !props.visible), _defineProperty(_className, prefixCls + '-range', 1), _defineProperty(_className, prefixCls + '-show-time-picker', showTimePicker), _defineProperty(_className, prefixCls + '-week-number', props.showWeekNumber), _className);\n    var classes = classnames(className);\n    var newProps = {\n      selectedValue: state.selectedValue,\n      onSelect: this.onSelect,\n      onDayHover: type === 'start' && selectedValue[1] || type === 'end' && selectedValue[0] || !!hoverValue.length ? this.onDayHover : undefined\n    };\n    var placeholder1 = void 0;\n    var placeholder2 = void 0;\n\n    if (dateInputPlaceholder) {\n      if (Array.isArray(dateInputPlaceholder)) {\n        var _dateInputPlaceholder = _slicedToArray(dateInputPlaceholder, 2);\n\n        placeholder1 = _dateInputPlaceholder[0];\n        placeholder2 = _dateInputPlaceholder[1];\n      } else {\n        placeholder1 = placeholder2 = dateInputPlaceholder;\n      }\n    }\n\n    var showOkButton = showOk === true || showOk !== false && !!timePicker;\n    var cls = classnames((_classnames = {}, _defineProperty(_classnames, prefixCls + '-footer', true), _defineProperty(_classnames, prefixCls + '-range-bottom', true), _defineProperty(_classnames, prefixCls + '-footer-show-ok', showOkButton), _classnames));\n    var startValue = this.getStartValue();\n    var endValue = this.getEndValue();\n    var todayTime = getTodayTime(startValue);\n    var thisMonth = todayTime.month();\n    var thisYear = todayTime.year();\n    var isTodayInView = startValue.year() === thisYear && startValue.month() === thisMonth || endValue.year() === thisYear && endValue.month() === thisMonth;\n    var nextMonthOfStart = startValue.clone().add(1, 'months');\n    var isClosestMonths = nextMonthOfStart.year() === endValue.year() && nextMonthOfStart.month() === endValue.month();\n    return React.createElement('div', {\n      ref: this.saveRoot,\n      className: classes,\n      style: props.style,\n      tabIndex: '0'\n    }, props.renderSidebar(), React.createElement('div', {\n      className: prefixCls + '-panel'\n    }, showClear && selectedValue[0] && selectedValue[1] ? React.createElement('a', {\n      className: prefixCls + '-clear-btn',\n      role: 'button',\n      title: locale.clear,\n      onClick: this.clear\n    }) : null, React.createElement('div', {\n      className: prefixCls + '-date-panel',\n      onMouseLeave: type !== 'both' ? this.onDatePanelLeave : undefined,\n      onMouseEnter: type !== 'both' ? this.onDatePanelEnter : undefined\n    }, React.createElement(CalendarPart, _extends({}, props, newProps, {\n      hoverValue: hoverValue,\n      direction: 'left',\n      disabledTime: this.disabledStartTime,\n      disabledMonth: this.disabledStartMonth,\n      format: this.getFormat(),\n      value: startValue,\n      placeholder: placeholder1,\n      onInputSelect: this.onStartInputSelect,\n      onValueChange: this.onStartValueChange,\n      onPanelChange: this.onStartPanelChange,\n      timePicker: timePicker,\n      showTimePicker: showTimePicker,\n      enablePrev: true,\n      enableNext: !isClosestMonths || isEndMonthYearPanelShow\n    })), React.createElement('span', {\n      className: prefixCls + '-range-middle'\n    }, '~'), React.createElement(CalendarPart, _extends({}, props, newProps, {\n      hoverValue: hoverValue,\n      direction: 'right',\n      format: this.getFormat(),\n      timePickerDisabledTime: this.getEndDisableTime(),\n      placeholder: placeholder2,\n      value: endValue,\n      onInputSelect: this.onEndInputSelect,\n      onValueChange: this.onEndValueChange,\n      onPanelChange: this.onEndPanelChange,\n      timePicker: timePicker,\n      showTimePicker: showTimePicker,\n      disabledTime: this.disabledEndTime,\n      disabledMonth: this.disabledEndMonth,\n      enablePrev: !isClosestMonths || isStartMonthYearPanelShow,\n      enableNext: true\n    }))), React.createElement('div', {\n      className: cls\n    }, props.renderFooter(), showToday || props.timePicker || showOkButton ? React.createElement('div', {\n      className: prefixCls + '-footer-btn'\n    }, showToday ? React.createElement(TodayButton, _extends({}, props, {\n      disabled: isTodayInView,\n      value: state.value[0],\n      onToday: this.onToday,\n      text: locale.backToToday\n    })) : null, props.timePicker ? React.createElement(TimePickerButton, _extends({}, props, {\n      showTimePicker: showTimePicker,\n      onOpenTimePicker: this.onOpenTimePicker,\n      onCloseTimePicker: this.onCloseTimePicker,\n      timePickerDisabled: !this.hasSelectedValue() || hoverValue.length\n    })) : null, showOkButton ? React.createElement(OkButton, _extends({}, props, {\n      onOk: this.onOk,\n      okDisabled: !this.isAllowedDateAndTime(selectedValue) || !this.hasSelectedValue() || hoverValue.length\n    })) : null) : null)));\n  }\n});\nexport default RangeCalendar;","map":null,"metadata":{},"sourceType":"module"}