{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _createReactClass = require('create-react-class');\n\nvar _createReactClass2 = _interopRequireDefault(_createReactClass);\n\nvar _MenuMixin = require('./MenuMixin');\n\nvar _MenuMixin2 = _interopRequireDefault(_MenuMixin);\n\nvar _util = require('./util');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n} // import React from 'react';\n\n\nvar Menu = (0, _createReactClass2[\"default\"])({\n  displayName: 'Menu',\n  propTypes: {\n    openSubMenuOnMouseEnter: _propTypes2[\"default\"].bool,\n    closeSubMenuOnMouseLeave: _propTypes2[\"default\"].bool,\n    selectedKeys: _propTypes2[\"default\"].arrayOf(_propTypes2[\"default\"].string),\n    defaultSelectedKeys: _propTypes2[\"default\"].arrayOf(_propTypes2[\"default\"].string),\n    defaultOpenKeys: _propTypes2[\"default\"].arrayOf(_propTypes2[\"default\"].string),\n    openKeys: _propTypes2[\"default\"].arrayOf(_propTypes2[\"default\"].string),\n    mode: _propTypes2[\"default\"].string,\n    onClick: _propTypes2[\"default\"].func,\n    onSelect: _propTypes2[\"default\"].func,\n    onDeselect: _propTypes2[\"default\"].func,\n    onDestroy: _propTypes2[\"default\"].func,\n    openTransitionName: _propTypes2[\"default\"].string,\n    openAnimation: _propTypes2[\"default\"].oneOfType([_propTypes2[\"default\"].string, _propTypes2[\"default\"].object]),\n    level: _propTypes2[\"default\"].number,\n    eventKey: _propTypes2[\"default\"].string,\n    selectable: _propTypes2[\"default\"].bool,\n    children: _propTypes2[\"default\"].any\n  },\n  mixins: [_MenuMixin2[\"default\"]],\n  getDefaultProps: function getDefaultProps() {\n    return {\n      openSubMenuOnMouseEnter: true,\n      closeSubMenuOnMouseLeave: true,\n      selectable: true,\n      onClick: _util.noop,\n      onSelect: _util.noop,\n      onOpenChange: _util.noop,\n      onDeselect: _util.noop,\n      defaultSelectedKeys: [],\n      defaultOpenKeys: []\n    };\n  },\n  getInitialState: function getInitialState() {\n    var props = this.props;\n    var selectedKeys = props.defaultSelectedKeys;\n    var openKeys = props.defaultOpenKeys;\n\n    if ('selectedKeys' in props) {\n      selectedKeys = props.selectedKeys || [];\n    }\n\n    if ('openKeys' in props) {\n      openKeys = props.openKeys || [];\n    }\n\n    return {\n      selectedKeys: selectedKeys,\n      openKeys: openKeys\n    };\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    var props = {};\n\n    if ('selectedKeys' in nextProps) {\n      props.selectedKeys = nextProps.selectedKeys || [];\n    }\n\n    if ('openKeys' in nextProps) {\n      props.openKeys = nextProps.openKeys || [];\n    }\n\n    this.setState(props);\n  },\n  onDestroy: function onDestroy(key) {\n    var state = this.state;\n    var props = this.props;\n    var selectedKeys = state.selectedKeys;\n    var openKeys = state.openKeys;\n    var index = selectedKeys.indexOf(key);\n\n    if (!('selectedKeys' in props) && index !== -1) {\n      selectedKeys.splice(index, 1);\n    }\n\n    index = openKeys.indexOf(key);\n\n    if (!('openKeys' in props) && index !== -1) {\n      openKeys.splice(index, 1);\n    }\n  },\n  onItemHover: function onItemHover(e) {\n    var item = e.item;\n    var _props = this.props,\n        mode = _props.mode,\n        closeSubMenuOnMouseLeave = _props.closeSubMenuOnMouseLeave;\n    var _e$openChanges = e.openChanges,\n        openChanges = _e$openChanges === undefined ? [] : _e$openChanges; // special for top sub menu\n\n    if (mode !== 'inline' && !closeSubMenuOnMouseLeave && item.isSubMenu) {\n      var activeKey = this.state.activeKey;\n      var activeItem = this.getFlatInstanceArray().filter(function (c) {\n        return c && c.props.eventKey === activeKey;\n      })[0];\n\n      if (activeItem && activeItem.props.open) {\n        openChanges = openChanges.concat({\n          key: item.props.eventKey,\n          item: item,\n          originalEvent: e,\n          open: true\n        });\n      }\n    }\n\n    openChanges = openChanges.concat(this.getOpenChangesOnItemHover(e));\n\n    if (openChanges.length) {\n      this.onOpenChange(openChanges);\n    }\n  },\n  onSelect: function onSelect(selectInfo) {\n    var props = this.props;\n\n    if (props.selectable) {\n      // root menu\n      var selectedKeys = this.state.selectedKeys;\n      var selectedKey = selectInfo.key;\n\n      if (props.multiple) {\n        selectedKeys = selectedKeys.concat([selectedKey]);\n      } else {\n        selectedKeys = [selectedKey];\n      }\n\n      if (!('selectedKeys' in props)) {\n        this.setState({\n          selectedKeys: selectedKeys\n        });\n      }\n\n      props.onSelect((0, _extends3[\"default\"])({}, selectInfo, {\n        selectedKeys: selectedKeys\n      }));\n    }\n  },\n  onClick: function onClick(e) {\n    this.props.onClick(e);\n  },\n  onOpenChange: function onOpenChange(e_) {\n    var props = this.props;\n    var openKeys = this.state.openKeys.concat();\n    var changed = false;\n\n    var processSingle = function processSingle(e) {\n      var oneChanged = false;\n\n      if (e.open) {\n        oneChanged = openKeys.indexOf(e.key) === -1;\n\n        if (oneChanged) {\n          openKeys.push(e.key);\n        }\n      } else {\n        var index = openKeys.indexOf(e.key);\n        oneChanged = index !== -1;\n\n        if (oneChanged) {\n          openKeys.splice(index, 1);\n        }\n      }\n\n      changed = changed || oneChanged;\n    };\n\n    if (Array.isArray(e_)) {\n      // batch change call\n      e_.forEach(processSingle);\n    } else {\n      processSingle(e_);\n    }\n\n    if (changed) {\n      if (!('openKeys' in this.props)) {\n        this.setState({\n          openKeys: openKeys\n        });\n      }\n\n      props.onOpenChange(openKeys);\n    }\n  },\n  onDeselect: function onDeselect(selectInfo) {\n    var props = this.props;\n\n    if (props.selectable) {\n      var selectedKeys = this.state.selectedKeys.concat();\n      var selectedKey = selectInfo.key;\n      var index = selectedKeys.indexOf(selectedKey);\n\n      if (index !== -1) {\n        selectedKeys.splice(index, 1);\n      }\n\n      if (!('selectedKeys' in props)) {\n        this.setState({\n          selectedKeys: selectedKeys\n        });\n      }\n\n      props.onDeselect((0, _extends3[\"default\"])({}, selectInfo, {\n        selectedKeys: selectedKeys\n      }));\n    }\n  },\n  getOpenTransitionName: function getOpenTransitionName() {\n    var props = this.props;\n    var transitionName = props.openTransitionName;\n    var animationName = props.openAnimation;\n\n    if (!transitionName && typeof animationName === 'string') {\n      transitionName = props.prefixCls + '-open-' + animationName;\n    }\n\n    return transitionName;\n  },\n  isInlineMode: function isInlineMode() {\n    return this.props.mode === 'inline';\n  },\n  lastOpenSubMenu: function lastOpenSubMenu() {\n    var lastOpen = [];\n    var openKeys = this.state.openKeys;\n\n    if (openKeys.length) {\n      lastOpen = this.getFlatInstanceArray().filter(function (c) {\n        return c && openKeys.indexOf(c.props.eventKey) !== -1;\n      });\n    }\n\n    return lastOpen[0];\n  },\n  renderMenuItem: function renderMenuItem(c, i, subIndex) {\n    if (!c) {\n      return null;\n    }\n\n    var state = this.state;\n    var extraProps = {\n      openKeys: state.openKeys,\n      selectedKeys: state.selectedKeys,\n      openSubMenuOnMouseEnter: this.props.openSubMenuOnMouseEnter\n    };\n    return this.renderCommonMenuItem(c, i, subIndex, extraProps);\n  },\n  render: function render() {\n    var props = (0, _extends3[\"default\"])({}, this.props);\n    props.className += ' ' + props.prefixCls + '-root';\n    return this.renderRoot(props);\n  }\n});\nexports[\"default\"] = Menu;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}