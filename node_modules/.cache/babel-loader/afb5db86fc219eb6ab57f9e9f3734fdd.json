{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport RcSelect, { Option, OptGroup } from 'rc-select';\nimport classNames from 'classnames';\nimport warning from '../_util/warning';\nvar SelectPropTypes = {\n  prefixCls: PropTypes.string,\n  className: PropTypes.string,\n  size: PropTypes.oneOf(['default', 'large', 'small']),\n  combobox: PropTypes.bool,\n  notFoundContent: PropTypes.any,\n  showSearch: PropTypes.bool,\n  optionLabelProp: PropTypes.string,\n  transitionName: PropTypes.string,\n  choiceTransitionName: PropTypes.string\n}; // => It is needless to export the declaration of below two inner components.\n// export { Option, OptGroup };\n\nvar Select = function (_React$Component) {\n  _inherits(Select, _React$Component);\n\n  function Select() {\n    _classCallCheck(this, Select);\n\n    return _possibleConstructorReturn(this, (Select.__proto__ || Object.getPrototypeOf(Select)).apply(this, arguments));\n  }\n\n  _createClass(Select, [{\n    key: 'getLocale',\n    value: function getLocale() {\n      var antLocale = this.context.antLocale;\n\n      if (antLocale && antLocale.Select) {\n        return antLocale.Select;\n      }\n\n      return {\n        notFoundContent: '无匹配结果'\n      };\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _classNames;\n\n      var _a = this.props,\n          prefixCls = _a.prefixCls,\n          _a$className = _a.className,\n          className = _a$className === undefined ? '' : _a$className,\n          size = _a.size,\n          mode = _a.mode,\n          multiple = _a.multiple,\n          tags = _a.tags,\n          combobox = _a.combobox,\n          restProps = __rest(_a, [\"prefixCls\", \"className\", \"size\", \"mode\", \"multiple\", \"tags\", \"combobox\"]);\n\n      warning(!multiple && !tags && !combobox, '`Select[multiple|tags|combobox]` is deprecated, please use `Select[mode]` instead.');\n      var cls = classNames((_classNames = {}, _defineProperty(_classNames, prefixCls + '-lg', size === 'large'), _defineProperty(_classNames, prefixCls + '-sm', size === 'small'), _classNames), className);\n      var locale = this.getLocale();\n      var _props = this.props,\n          _props$notFoundConten = _props.notFoundContent,\n          notFoundContent = _props$notFoundConten === undefined ? locale.notFoundContent : _props$notFoundConten,\n          optionLabelProp = _props.optionLabelProp;\n      var isCombobox = mode === 'combobox' || combobox;\n\n      if (isCombobox) {\n        notFoundContent = null; // children 带 dom 结构时，无法填入输入框\n\n        optionLabelProp = optionLabelProp || 'value';\n      }\n\n      var modeConfig = {\n        multiple: mode === 'multiple' || multiple,\n        tags: mode === 'tags' || tags,\n        combobox: isCombobox\n      };\n      return React.createElement(RcSelect, _extends({}, restProps, modeConfig, {\n        prefixCls: prefixCls,\n        className: cls,\n        optionLabelProp: optionLabelProp || 'children',\n        notFoundContent: notFoundContent\n      }));\n    }\n  }]);\n\n  return Select;\n}(React.Component);\n\nexport default Select;\nSelect.Option = Option;\nSelect.OptGroup = OptGroup;\nSelect.defaultProps = {\n  prefixCls: 'ant-select',\n  showSearch: false,\n  transitionName: 'slide-up',\n  choiceTransitionName: 'zoom'\n};\nSelect.propTypes = SelectPropTypes;\nSelect.contextTypes = {\n  antLocale: PropTypes.object\n};","map":null,"metadata":{},"sourceType":"module"}