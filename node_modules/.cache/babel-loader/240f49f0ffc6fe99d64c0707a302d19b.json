{"ast":null,"code":"import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport List from './list';\nimport Operation from './operation';\nimport Search from './search';\nimport injectLocale from '../locale-provider/injectLocale';\n\nfunction noop() {}\n\nvar Transfer = function (_React$Component) {\n  _inherits(Transfer, _React$Component);\n\n  function Transfer(props) {\n    _classCallCheck(this, Transfer);\n\n    var _this = _possibleConstructorReturn(this, (Transfer.__proto__ || Object.getPrototypeOf(Transfer)).call(this, props));\n\n    _this.moveTo = function (direction) {\n      var _this$props = _this.props,\n          _this$props$targetKey = _this$props.targetKeys,\n          targetKeys = _this$props$targetKey === undefined ? [] : _this$props$targetKey,\n          _this$props$dataSourc = _this$props.dataSource,\n          dataSource = _this$props$dataSourc === undefined ? [] : _this$props$dataSourc,\n          onChange = _this$props.onChange;\n      var _this$state = _this.state,\n          sourceSelectedKeys = _this$state.sourceSelectedKeys,\n          targetSelectedKeys = _this$state.targetSelectedKeys;\n      var moveKeys = direction === 'right' ? sourceSelectedKeys : targetSelectedKeys; // filter the disabled options\n\n      var newMoveKeys = moveKeys.filter(function (key) {\n        return !dataSource.some(function (data) {\n          return !!(key === data.key && data.disabled);\n        });\n      }); // move items to target box\n\n      var newTargetKeys = direction === 'right' ? newMoveKeys.concat(targetKeys) : targetKeys.filter(function (targetKey) {\n        return newMoveKeys.indexOf(targetKey) === -1;\n      }); // empty checked keys\n\n      var oppositeDirection = direction === 'right' ? 'left' : 'right';\n\n      _this.setState(_defineProperty({}, _this.getSelectedKeysName(oppositeDirection), []));\n\n      _this.handleSelectChange(oppositeDirection, []);\n\n      if (onChange) {\n        onChange(newTargetKeys, direction, newMoveKeys);\n      }\n    };\n\n    _this.moveToLeft = function () {\n      return _this.moveTo('left');\n    };\n\n    _this.moveToRight = function () {\n      return _this.moveTo('right');\n    };\n\n    _this.handleSelectAll = function (direction, filteredDataSource, checkAll) {\n      var originalSelectedKeys = _this.state[_this.getSelectedKeysName(direction)] || [];\n      var currentKeys = filteredDataSource.map(function (item) {\n        return item.key;\n      }); // Only operate current keys from original selected keys\n\n      var newKeys1 = originalSelectedKeys.filter(function (key) {\n        return currentKeys.indexOf(key) === -1;\n      });\n      var newKeys2 = [].concat(_toConsumableArray(originalSelectedKeys));\n      currentKeys.forEach(function (key) {\n        if (newKeys2.indexOf(key) === -1) {\n          newKeys2.push(key);\n        }\n      });\n      var holder = checkAll ? newKeys1 : newKeys2;\n\n      _this.handleSelectChange(direction, holder);\n\n      if (!_this.props.selectedKeys) {\n        _this.setState(_defineProperty({}, _this.getSelectedKeysName(direction), holder));\n      }\n    };\n\n    _this.handleLeftSelectAll = function (filteredDataSource, checkAll) {\n      return _this.handleSelectAll('left', filteredDataSource, checkAll);\n    };\n\n    _this.handleRightSelectAll = function (filteredDataSource, checkAll) {\n      return _this.handleSelectAll('right', filteredDataSource, checkAll);\n    };\n\n    _this.handleFilter = function (direction, e) {\n      _this.setState(_defineProperty({}, direction + 'Filter', e.target.value));\n\n      if (_this.props.onSearchChange) {\n        _this.props.onSearchChange(direction, e);\n      }\n    };\n\n    _this.handleLeftFilter = function (e) {\n      return _this.handleFilter('left', e);\n    };\n\n    _this.handleRightFilter = function (e) {\n      return _this.handleFilter('right', e);\n    };\n\n    _this.handleClear = function (direction) {\n      _this.setState(_defineProperty({}, direction + 'Filter', ''));\n    };\n\n    _this.handleLeftClear = function () {\n      return _this.handleClear('left');\n    };\n\n    _this.handleRightClear = function () {\n      return _this.handleClear('right');\n    };\n\n    _this.handleSelect = function (direction, selectedItem, checked) {\n      var _this$state2 = _this.state,\n          sourceSelectedKeys = _this$state2.sourceSelectedKeys,\n          targetSelectedKeys = _this$state2.targetSelectedKeys;\n      var holder = direction === 'left' ? [].concat(_toConsumableArray(sourceSelectedKeys)) : [].concat(_toConsumableArray(targetSelectedKeys));\n      var index = holder.indexOf(selectedItem.key);\n\n      if (index > -1) {\n        holder.splice(index, 1);\n      }\n\n      if (checked) {\n        holder.push(selectedItem.key);\n      }\n\n      _this.handleSelectChange(direction, holder);\n\n      if (!_this.props.selectedKeys) {\n        _this.setState(_defineProperty({}, _this.getSelectedKeysName(direction), holder));\n      }\n    };\n\n    _this.handleLeftSelect = function (selectedItem, checked) {\n      return _this.handleSelect('left', selectedItem, checked);\n    };\n\n    _this.handleRightSelect = function (selectedItem, checked) {\n      return _this.handleSelect('right', selectedItem, checked);\n    };\n\n    _this.handleScroll = function (direction, e) {\n      var onScroll = _this.props.onScroll;\n\n      if (onScroll) {\n        onScroll(direction, e);\n      }\n    };\n\n    _this.handleLeftScroll = function (e) {\n      return _this.handleScroll('left', e);\n    };\n\n    _this.handleRightScroll = function (e) {\n      return _this.handleScroll('right', e);\n    };\n\n    var _props$selectedKeys = props.selectedKeys,\n        selectedKeys = _props$selectedKeys === undefined ? [] : _props$selectedKeys,\n        _props$targetKeys = props.targetKeys,\n        targetKeys = _props$targetKeys === undefined ? [] : _props$targetKeys;\n    _this.state = {\n      leftFilter: '',\n      rightFilter: '',\n      sourceSelectedKeys: selectedKeys.filter(function (key) {\n        return targetKeys.indexOf(key) === -1;\n      }),\n      targetSelectedKeys: selectedKeys.filter(function (key) {\n        return targetKeys.indexOf(key) > -1;\n      })\n    };\n    return _this;\n  }\n\n  _createClass(Transfer, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var _state = this.state,\n          sourceSelectedKeys = _state.sourceSelectedKeys,\n          targetSelectedKeys = _state.targetSelectedKeys;\n\n      if (nextProps.targetKeys !== this.props.targetKeys || nextProps.dataSource !== this.props.dataSource) {\n        // clear cached splited dataSource\n        this.splitedDataSource = null;\n\n        if (!nextProps.selectedKeys) {\n          // clear key nolonger existed\n          // clear checkedKeys according to targetKeys\n          var dataSource = nextProps.dataSource,\n              _nextProps$targetKeys = nextProps.targetKeys,\n              targetKeys = _nextProps$targetKeys === undefined ? [] : _nextProps$targetKeys;\n          var newSourceSelectedKeys = [];\n          var newTargetSelectedKeys = [];\n          dataSource.forEach(function (_ref) {\n            var key = _ref.key;\n\n            if (sourceSelectedKeys.includes(key) && !targetKeys.includes(key)) {\n              newSourceSelectedKeys.push(key);\n            }\n\n            if (targetSelectedKeys.includes(key) && targetKeys.includes(key)) {\n              newTargetSelectedKeys.push(key);\n            }\n          });\n          this.setState({\n            sourceSelectedKeys: newSourceSelectedKeys,\n            targetSelectedKeys: newTargetSelectedKeys\n          });\n        }\n      }\n\n      if (nextProps.selectedKeys) {\n        var _targetKeys = nextProps.targetKeys || [];\n\n        this.setState({\n          sourceSelectedKeys: nextProps.selectedKeys.filter(function (key) {\n            return !_targetKeys.includes(key);\n          }),\n          targetSelectedKeys: nextProps.selectedKeys.filter(function (key) {\n            return _targetKeys.includes(key);\n          })\n        });\n      }\n    }\n  }, {\n    key: 'splitDataSource',\n    value: function splitDataSource(props) {\n      if (this.splitedDataSource) {\n        return this.splitedDataSource;\n      }\n\n      var dataSource = props.dataSource,\n          rowKey = props.rowKey,\n          _props$targetKeys2 = props.targetKeys,\n          targetKeys = _props$targetKeys2 === undefined ? [] : _props$targetKeys2;\n      var leftDataSource = [];\n      var rightDataSource = new Array(targetKeys.length);\n      dataSource.forEach(function (record) {\n        if (rowKey) {\n          record.key = rowKey(record);\n        } // rightDataSource should be ordered by targetKeys\n        // leftDataSource should be ordered by dataSource\n\n\n        var indexOfKey = targetKeys.indexOf(record.key);\n\n        if (indexOfKey !== -1) {\n          rightDataSource[indexOfKey] = record;\n        } else {\n          leftDataSource.push(record);\n        }\n      });\n      this.splitedDataSource = {\n        leftDataSource: leftDataSource,\n        rightDataSource: rightDataSource\n      };\n      return this.splitedDataSource;\n    }\n  }, {\n    key: 'handleSelectChange',\n    value: function handleSelectChange(direction, holder) {\n      var _state2 = this.state,\n          sourceSelectedKeys = _state2.sourceSelectedKeys,\n          targetSelectedKeys = _state2.targetSelectedKeys;\n      var onSelectChange = this.props.onSelectChange;\n\n      if (!onSelectChange) {\n        return;\n      }\n\n      if (direction === 'left') {\n        onSelectChange(holder, targetSelectedKeys);\n      } else {\n        onSelectChange(sourceSelectedKeys, holder);\n      }\n    }\n  }, {\n    key: 'getTitles',\n    value: function getTitles() {\n      var props = this.props;\n\n      if (props.titles) {\n        return props.titles;\n      }\n\n      var transferLocale = this.getLocale();\n      return transferLocale.titles;\n    }\n  }, {\n    key: 'getSelectedKeysName',\n    value: function getSelectedKeysName(direction) {\n      return direction === 'left' ? 'sourceSelectedKeys' : 'targetSelectedKeys';\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var locale = this.getLocale();\n      var _props = this.props,\n          _props$prefixCls = _props.prefixCls,\n          prefixCls = _props$prefixCls === undefined ? 'ant-transfer' : _props$prefixCls,\n          className = _props.className,\n          _props$operations = _props.operations,\n          operations = _props$operations === undefined ? [] : _props$operations,\n          showSearch = _props.showSearch,\n          _props$notFoundConten = _props.notFoundContent,\n          notFoundContent = _props$notFoundConten === undefined ? locale.notFoundContent : _props$notFoundConten,\n          _props$searchPlacehol = _props.searchPlaceholder,\n          searchPlaceholder = _props$searchPlacehol === undefined ? locale.searchPlaceholder : _props$searchPlacehol,\n          body = _props.body,\n          footer = _props.footer,\n          listStyle = _props.listStyle,\n          filterOption = _props.filterOption,\n          render = _props.render,\n          lazy = _props.lazy;\n      var _state3 = this.state,\n          leftFilter = _state3.leftFilter,\n          rightFilter = _state3.rightFilter,\n          sourceSelectedKeys = _state3.sourceSelectedKeys,\n          targetSelectedKeys = _state3.targetSelectedKeys;\n\n      var _splitDataSource = this.splitDataSource(this.props),\n          leftDataSource = _splitDataSource.leftDataSource,\n          rightDataSource = _splitDataSource.rightDataSource;\n\n      var leftActive = targetSelectedKeys.length > 0;\n      var rightActive = sourceSelectedKeys.length > 0;\n      var cls = classNames(className, prefixCls);\n      var titles = this.getTitles();\n      return React.createElement('div', {\n        className: cls\n      }, React.createElement(List, {\n        prefixCls: prefixCls + '-list',\n        titleText: titles[0],\n        dataSource: leftDataSource,\n        filter: leftFilter,\n        filterOption: filterOption,\n        style: listStyle,\n        checkedKeys: sourceSelectedKeys,\n        handleFilter: this.handleLeftFilter,\n        handleClear: this.handleLeftClear,\n        handleSelect: this.handleLeftSelect,\n        handleSelectAll: this.handleLeftSelectAll,\n        render: render,\n        showSearch: showSearch,\n        searchPlaceholder: searchPlaceholder,\n        notFoundContent: notFoundContent,\n        itemUnit: locale.itemUnit,\n        itemsUnit: locale.itemsUnit,\n        body: body,\n        footer: footer,\n        lazy: lazy,\n        onScroll: this.handleLeftScroll\n      }), React.createElement(Operation, {\n        className: prefixCls + '-operation',\n        rightActive: rightActive,\n        rightArrowText: operations[0],\n        moveToRight: this.moveToRight,\n        leftActive: leftActive,\n        leftArrowText: operations[1],\n        moveToLeft: this.moveToLeft\n      }), React.createElement(List, {\n        prefixCls: prefixCls + '-list',\n        titleText: titles[1],\n        dataSource: rightDataSource,\n        filter: rightFilter,\n        filterOption: filterOption,\n        style: listStyle,\n        checkedKeys: targetSelectedKeys,\n        handleFilter: this.handleRightFilter,\n        handleClear: this.handleRightClear,\n        handleSelect: this.handleRightSelect,\n        handleSelectAll: this.handleRightSelectAll,\n        render: render,\n        showSearch: showSearch,\n        searchPlaceholder: searchPlaceholder,\n        notFoundContent: notFoundContent,\n        itemUnit: locale.itemUnit,\n        itemsUnit: locale.itemsUnit,\n        body: body,\n        footer: footer,\n        lazy: lazy,\n        onScroll: this.handleRightScroll\n      }));\n    }\n  }]);\n\n  return Transfer;\n}(React.Component); // For high-level customized Transfer @dqaria\n\n\nTransfer.List = List;\nTransfer.Operation = Operation;\nTransfer.Search = Search;\nTransfer.defaultProps = {\n  dataSource: [],\n  render: noop,\n  showSearch: false\n};\nTransfer.propTypes = {\n  prefixCls: PropTypes.string,\n  dataSource: PropTypes.array,\n  render: PropTypes.func,\n  targetKeys: PropTypes.array,\n  onChange: PropTypes.func,\n  height: PropTypes.number,\n  listStyle: PropTypes.object,\n  className: PropTypes.string,\n  titles: PropTypes.array,\n  operations: PropTypes.array,\n  showSearch: PropTypes.bool,\n  filterOption: PropTypes.func,\n  searchPlaceholder: PropTypes.string,\n  notFoundContent: PropTypes.node,\n  body: PropTypes.func,\n  footer: PropTypes.func,\n  rowKey: PropTypes.func,\n  lazy: PropTypes.oneOfType([PropTypes.object, PropTypes.bool])\n};\nvar injectTransferLocale = injectLocale('Transfer', {\n  titles: ['', ''],\n  searchPlaceholder: 'Search',\n  notFoundContent: 'Not Found'\n});\nexport default injectTransferLocale(Transfer);","map":null,"metadata":{},"sourceType":"module"}