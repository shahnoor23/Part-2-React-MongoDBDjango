{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames2 = require('classnames');\n\nvar _classnames3 = _interopRequireDefault(_classnames2);\n\nvar _rcEditorCore = require('rc-editor-core');\n\nvar _draftJs = require('draft-js');\n\nvar _createMention = require('../utils/createMention');\n\nvar _createMention2 = _interopRequireDefault(_createMention);\n\nvar _exportContent = require('../utils/exportContent');\n\nvar _exportContent2 = _interopRequireDefault(_exportContent);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n}\n\nvar Mention = function (_React$Component) {\n  _inherits(Mention, _React$Component);\n\n  function Mention(props) {\n    _classCallCheck(this, Mention);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _this.onEditorChange = function (editorState) {\n      var selection = editorState.getSelection();\n      _this._decorator = editorState.getDecorator();\n      var content = editorState.getCurrentContent();\n\n      if (_this.props.onChange) {\n        _this.setState({\n          selection: selection\n        }, function () {\n          _this.props.onChange(content, (0, _exportContent2[\"default\"])(content));\n        });\n      } else {\n        _this.setState({\n          editorState: editorState,\n          selection: selection\n        });\n      }\n    };\n\n    _this.onFocus = function (e) {\n      if (_this.props.onFocus) {\n        _this.props.onFocus(e);\n      }\n    };\n\n    _this.onBlur = function (e) {\n      if (_this.props.onBlur) {\n        _this.props.onBlur(e);\n      }\n    };\n\n    _this.reset = function () {\n      /*eslint-disable*/\n      _this._editor.Reset();\n      /*eslint-enable*/\n\n    };\n\n    _this.mention = (0, _createMention2[\"default\"])({\n      prefix: _this.getPrefix(props),\n      tag: props.tag,\n      mode: props.mode,\n      mentionStyle: props.mentionStyle\n    });\n    _this.Suggestions = _this.mention.Suggestions;\n    _this.plugins = [_this.mention];\n    _this.state = {\n      suggestions: props.suggestions,\n      value: props.value && _draftJs.EditorState.createWithContent(props.value, new _draftJs.CompositeDecorator(_this.mention.decorators)),\n      selection: _draftJs.SelectionState.createEmpty()\n    };\n\n    if (typeof props.defaultValue === 'string') {\n      // eslint-disable-next-line\n      console.warn('The property `defaultValue` now allow `EditorState` only, see http://react-component.github.io/editor-mention/examples/defaultValue.html ');\n    }\n\n    if (props.value !== undefined) {\n      _this.controlledMode = true;\n    }\n\n    return _this;\n  }\n\n  Mention.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var suggestions = nextProps.suggestions;\n    var selection = this.state.selection;\n    var value = nextProps.value;\n\n    if (value && selection) {\n      value = _draftJs.EditorState.acceptSelection(_draftJs.EditorState.createWithContent(value, this._decorator), selection);\n    }\n\n    this.setState({\n      suggestions: suggestions,\n      value: value\n    });\n  };\n\n  Mention.prototype.getPrefix = function getPrefix() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n    return Array.isArray(props.prefix) ? props.prefix : [props.prefix];\n  };\n\n  Mention.prototype.render = function render() {\n    var _classnames,\n        _this2 = this;\n\n    var _props = this.props,\n        prefixCls = _props.prefixCls,\n        style = _props.style,\n        tag = _props.tag,\n        multiLines = _props.multiLines,\n        suggestionStyle = _props.suggestionStyle,\n        placeholder = _props.placeholder,\n        defaultValue = _props.defaultValue,\n        className = _props.className,\n        notFoundContent = _props.notFoundContent,\n        getSuggestionContainer = _props.getSuggestionContainer,\n        readOnly = _props.readOnly,\n        disabled = _props.disabled;\n    var suggestions = this.state.suggestions;\n    var Suggestions = this.Suggestions;\n    var editorClass = (0, _classnames3[\"default\"])(className, (_classnames = {}, _defineProperty(_classnames, prefixCls + '-wrapper', true), _defineProperty(_classnames, 'readonly', readOnly), _defineProperty(_classnames, 'disabled', disabled), _defineProperty(_classnames, 'multilines', multiLines), _classnames));\n    var editorProps = this.controlledMode ? {\n      value: this.state.value\n    } : {};\n\n    var defaultValueState = defaultValue && _draftJs.EditorState.createWithContent(typeof defaultValue === 'string' ? _draftJs.ContentState.createFromText(defaultValue) : defaultValue, this._decorator);\n\n    return _react2[\"default\"].createElement('div', {\n      className: editorClass,\n      style: style,\n      ref: function ref(wrapper) {\n        return _this2._wrapper = wrapper;\n      }\n    }, _react2[\"default\"].createElement(_rcEditorCore.EditorCore, _extends({\n      ref: function ref(editor) {\n        return _this2._editor = editor;\n      },\n      prefixCls: prefixCls,\n      style: style,\n      multiLines: multiLines,\n      plugins: this.plugins,\n      defaultValue: defaultValueState,\n      placeholder: placeholder,\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      onChange: this.onEditorChange\n    }, editorProps, {\n      readOnly: readOnly || disabled\n    }), _react2[\"default\"].createElement(Suggestions, {\n      mode: tag ? 'immutable' : 'mutable',\n      prefix: this.getPrefix(),\n      prefixCls: prefixCls,\n      style: suggestionStyle,\n      notFoundContent: notFoundContent,\n      suggestions: suggestions,\n      getSuggestionContainer: getSuggestionContainer ? function () {\n        return getSuggestionContainer(_this2._wrapper);\n      } : null,\n      onSearchChange: this.props.onSearchChange,\n      onSelect: this.props.onSelect,\n      noRedup: this.props.noRedup\n    })));\n  };\n\n  return Mention;\n}(_react2[\"default\"].Component);\n\nMention.propTypes = {\n  value: _propTypes2[\"default\"].object,\n  suggestions: _propTypes2[\"default\"].array,\n  prefix: _propTypes2[\"default\"].oneOfType([_propTypes2[\"default\"].string, _propTypes2[\"default\"].arrayOf(_propTypes2[\"default\"].string)]),\n  prefixCls: _propTypes2[\"default\"].string,\n  tag: _propTypes2[\"default\"].element,\n  style: _propTypes2[\"default\"].object,\n  className: _propTypes2[\"default\"].string,\n  onSearchChange: _propTypes2[\"default\"].func,\n  onChange: _propTypes2[\"default\"].func,\n  mode: _propTypes2[\"default\"].string,\n  multiLines: _propTypes2[\"default\"].bool,\n  suggestionStyle: _propTypes2[\"default\"].object,\n  placeholder: _propTypes2[\"default\"].string,\n  defaultValue: _propTypes2[\"default\"].object,\n  notFoundContent: _propTypes2[\"default\"].any,\n  position: _propTypes2[\"default\"].string,\n  onFocus: _propTypes2[\"default\"].func,\n  onBlur: _propTypes2[\"default\"].func,\n  onSelect: _propTypes2[\"default\"].func,\n  getSuggestionContainer: _propTypes2[\"default\"].func,\n  noRedup: _propTypes2[\"default\"].bool,\n  mentionStyle: _propTypes2[\"default\"].object\n};\nMention.controlledMode = false;\nMention.defaultProps = {\n  prefixCls: 'rc-editor-mention',\n  prefix: '@',\n  mode: 'immutable',\n  suggestions: [],\n  multiLines: false,\n  className: '',\n  suggestionStyle: {},\n  notFoundContent: '无法找到',\n  position: 'absolute',\n  mentionStyle: {}\n};\nexports[\"default\"] = Mention;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}