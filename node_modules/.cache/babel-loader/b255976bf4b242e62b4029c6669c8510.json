{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport RcTreeSelect, { TreeNode, SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from 'rc-tree-select';\nimport classNames from 'classnames';\nimport injectLocale from '../locale-provider/injectLocale';\nimport warning from '../_util/warning';\n\nvar TreeSelect = function (_React$Component) {\n  _inherits(TreeSelect, _React$Component);\n\n  function TreeSelect(props) {\n    _classCallCheck(this, TreeSelect);\n\n    var _this = _possibleConstructorReturn(this, (TreeSelect.__proto__ || Object.getPrototypeOf(TreeSelect)).call(this, props));\n\n    warning(props.multiple !== false || !props.treeCheckable, '`multiple` will alway be `true` when `treeCheckable` is true');\n    return _this;\n  }\n\n  _createClass(TreeSelect, [{\n    key: 'render',\n    value: function render() {\n      var _classNames;\n\n      var locale = this.getLocale();\n\n      var _a = this.props,\n          prefixCls = _a.prefixCls,\n          className = _a.className,\n          size = _a.size,\n          _a$notFoundContent = _a.notFoundContent,\n          notFoundContent = _a$notFoundContent === undefined ? locale.notFoundContent : _a$notFoundContent,\n          dropdownStyle = _a.dropdownStyle,\n          restProps = __rest(_a, [\"prefixCls\", \"className\", \"size\", \"notFoundContent\", \"dropdownStyle\"]);\n\n      var cls = classNames((_classNames = {}, _defineProperty(_classNames, prefixCls + '-lg', size === 'large'), _defineProperty(_classNames, prefixCls + '-sm', size === 'small'), _classNames), className);\n      var checkable = restProps.treeCheckable;\n\n      if (checkable) {\n        checkable = React.createElement('span', {\n          className: prefixCls + '-tree-checkbox-inner'\n        });\n      }\n\n      return React.createElement(RcTreeSelect, _extends({}, restProps, {\n        prefixCls: prefixCls,\n        className: cls,\n        dropdownStyle: _extends({\n          maxHeight: '100vh',\n          overflow: 'auto'\n        }, dropdownStyle),\n        treeCheckable: checkable,\n        notFoundContent: notFoundContent\n      }));\n    }\n  }]);\n\n  return TreeSelect;\n}(React.Component);\n\nTreeSelect.TreeNode = TreeNode;\nTreeSelect.SHOW_ALL = SHOW_ALL;\nTreeSelect.SHOW_PARENT = SHOW_PARENT;\nTreeSelect.SHOW_CHILD = SHOW_CHILD;\nTreeSelect.defaultProps = {\n  prefixCls: 'ant-select',\n  transitionName: 'slide-up',\n  choiceTransitionName: 'zoom',\n  showSearch: false,\n  dropdownClassName: 'ant-select-tree-dropdown'\n}; // Use Select's locale\n\nvar injectSelectLocale = injectLocale('Select', {});\nexport default injectSelectLocale(TreeSelect);","map":null,"metadata":{},"sourceType":"module"}