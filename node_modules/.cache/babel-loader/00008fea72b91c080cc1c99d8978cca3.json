{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames, Keys, FloatingLabel } from '@progress/kendo-react-common';\nimport ListContainer from '../common/ListContainer';\nimport ListFilter from '../common/ListFilter';\nimport ListDefaultItem from '../common/ListDefaultItem';\nimport List from '../common/List';\nimport DropDownBase from '../common/DropDownBase';\nimport { isPresent, getItemValue, sameCharsOnly, shuffleData, matchText, areSame, preventDefaultNonInputs, getFocusedItem } from '../common/utils';\nvar VALIDATION_MESSAGE = 'Please select a value from the list!';\n/**\n * Represents the [KendoReact DropDownList component]({% slug overview_dropdownlist %}).\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *    dropdownlist = null;\n *    render() {\n *       return (\n *          <div>\n *              <DropDownList\n *                  data={[ \"Albania\", \"Andorra\", \"Austria\", \"Belarus\" ]}\n *                  ref={component => this.dropdownlist = component}\n *              />\n *              <button onClick={() => alert(this.dropdownlist.value)}>alert value</button>\n *          </div>\n *       );\n *    }\n * }\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nvar DropDownList =\n/** @class */\nfunction (_super) {\n  __extends(DropDownList, _super);\n\n  function DropDownList() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * @hidden\n     */\n\n\n    _this.state = {};\n    _this.base = new DropDownBase(_this);\n    _this.searchState = {\n      word: '',\n      last: ''\n    };\n    _this._skipFocusEvent = false;\n    _this._filterInput = null;\n    _this._navigated = false;\n    /**\n     * @hidden\n     */\n\n    _this.handleItemSelect = function (index, state) {\n      var _a = _this.props,\n          _b = _a.data,\n          data = _b === void 0 ? [] : _b,\n          virtual = _a.virtual,\n          dataItemKey = _a.dataItemKey,\n          defaultItem = _a.defaultItem;\n      var skip = virtual ? virtual.skip : 0;\n      var item = index === -1 && defaultItem !== undefined ? defaultItem : data[index - skip];\n      var newSelected = !areSame(item, _this.value, dataItemKey);\n\n      _this.triggerOnChange(item, state);\n\n      if (newSelected) {\n        _this.base.triggerPageChangeCornerItems(item, state);\n      }\n    };\n\n    _this.renderDropDownWrapper = function () {\n      var _a = _this.props,\n          dataItemKey = _a.dataItemKey,\n          _b = _a.data,\n          data = _b === void 0 ? [] : _b,\n          textField = _a.textField,\n          disabled = _a.disabled,\n          tabIndex = _a.tabIndex,\n          loading = _a.loading,\n          iconClassName = _a.iconClassName,\n          _c = _a.virtual,\n          virtual = _c === void 0 ? {\n        skip: 0\n      } : _c,\n          valueRender = _a.valueRender;\n      var focused = _this.state.focused;\n      var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;\n      var value = _this.value;\n      var selectedIndex = data.findIndex(function (i) {\n        return areSame(i, value, dataItemKey);\n      });\n      var text = getItemValue(value, textField);\n      var valueDefaultRendering = React.createElement(\"span\", {\n        className: \"k-input\"\n      }, text);\n      var valueElement = valueRender !== undefined ? valueRender.call(undefined, valueDefaultRendering, value) : valueDefaultRendering;\n      return React.createElement(\"span\", {\n        ref: function ref(el) {\n          return _this.base.wrapper = el;\n        },\n        role: 'listbox',\n        tabIndex: disabled ? undefined : tabIndex,\n        accessKey: _this.props.accessKey,\n        className: classNames('k-dropdown-wrap', {\n          'k-state-default': !disabled,\n          'k-state-focused': focused,\n          'k-state-disabled': disabled\n        }),\n        style: _this.props.style,\n        onKeyDown: _this.handleKeyDown,\n        onKeyPress: _this.handleKeyPress,\n        onClick: disabled ? undefined : _this.handleWrapperClick,\n        \"aria-disabled\": disabled || undefined,\n        \"aria-haspopup\": true,\n        \"aria-expanded\": opened || false,\n        \"aria-owns\": _this.base.listBoxId,\n        \"aria-activedescendant\": 'option-' + _this.base.guid + '-' + (selectedIndex + virtual.skip),\n        \"aria-label\": _this.props.label\n      }, valueElement, React.createElement(\"span\", {\n        className: \"k-select\"\n      }, React.createElement(\"span\", {\n        className: classNames('k-icon', iconClassName, {\n          'k-i-arrow-s': !loading && !iconClassName,\n          'k-i-loading': loading && !iconClassName\n        })\n      })), _this.dummySelect(value));\n    };\n\n    _this.dummySelect = function (value) {\n      /* Dummy component to support forms */\n      return React.createElement(\"select\", {\n        name: _this.props.name,\n        ref: function ref(el) {\n          _this._select = el;\n        },\n        tabIndex: -1,\n        \"aria-hidden\": true,\n        title: _this.props.label,\n        style: {\n          opacity: 0,\n          width: 1,\n          border: 0,\n          zIndex: -1,\n          position: 'absolute',\n          left: '50%'\n        }\n      }, React.createElement(\"option\", {\n        value: _this.props.valueMap ? _this.props.valueMap.call(undefined, value) : value\n      }));\n    };\n\n    _this.renderListContainer = function () {\n      var _a = _this.props,\n          header = _a.header,\n          footer = _a.footer,\n          dir = _a.dir;\n      var base = _this.base;\n      var popupSettings = base.getPopupSettings();\n      var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;\n      var virtual = _this.props.virtual !== undefined;\n      var popupWidth = popupSettings.width !== undefined ? popupSettings.width : base.popupWidth;\n      var listContainerProps = {\n        onMouseDown: preventDefaultNonInputs,\n        dir: dir !== undefined ? dir : base.dirCalculated,\n        width: popupWidth,\n        popupSettings: {\n          className: classNames('k-list-container k-reset', popupSettings.className),\n          animate: popupSettings.animate,\n          anchor: _this.element || undefined,\n          show: opened,\n          open: _this.onPopupOpened,\n          close: _this.onPopupClosed\n        }\n      };\n      return React.createElement(ListContainer, __assign({}, listContainerProps), _this.renderListFilter(), virtual ? _this.renderDefaultItem() : undefined, virtual && header, _this.base.renderScrollWrapper(!virtual ? [_this.renderDefaultItem(), header, _this.renderList(), footer, _this.base.renderScrollElement()] : [_this.renderList(), _this.base.renderScrollElement()]), virtual && footer);\n    };\n\n    _this.renderList = function () {\n      var _a = _this.props,\n          _b = _a.data,\n          data = _b === void 0 ? [] : _b,\n          textField = _a.textField,\n          dataItemKey = _a.dataItemKey,\n          _c = _a.virtual,\n          virtual = _c === void 0 ? {\n        skip: 0\n      } : _c,\n          listNoDataRender = _a.listNoDataRender,\n          itemRender = _a.itemRender;\n      var vs = _this.base.vs;\n      var skip = virtual.skip;\n      var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;\n\n      var popupSettings = _this.base.getPopupSettings();\n\n      var translate = \"translateY(\" + vs.translate + \"px)\";\n      return React.createElement(List, {\n        id: _this.base.listBoxId,\n        show: opened,\n        data: data.slice(),\n        focusedIndex: _this.focusedIndex(),\n        value: _this.value,\n        textField: textField,\n        valueField: dataItemKey,\n        optionsGuid: _this.base.guid,\n        listRef: function listRef(list) {\n          return vs.list = _this.base.list = list;\n        },\n        wrapperStyle: !vs.enabled ? {\n          maxHeight: popupSettings.height\n        } : {\n          float: 'left',\n          width: '100%'\n        },\n        wrapperCssClass: !vs.enabled ? 'k-list-scroller' : undefined,\n        listStyle: vs.enabled ? {\n          transform: translate\n        } : undefined,\n        key: \"listkey\",\n        skip: skip,\n        onClick: _this.handleItemClick,\n        itemRender: itemRender,\n        noDataRender: listNoDataRender\n      });\n    };\n\n    _this.renderListFilter = function () {\n      var filterText = _this.props.filter !== undefined ? _this.props.filter : _this.state.text;\n      return _this.props.filterable && React.createElement(ListFilter, {\n        value: filterText,\n        ref: function ref(filter) {\n          return _this._filterInput = filter && filter.input;\n        },\n        onChange: _this.handleListFilterChange,\n        onKeyDown: _this.handleKeyDown\n      });\n    };\n\n    _this.renderDefaultItem = function () {\n      var _a = _this.props,\n          textField = _a.textField,\n          defaultItem = _a.defaultItem,\n          dataItemKey = _a.dataItemKey;\n      return defaultItem !== undefined && React.createElement(ListDefaultItem, {\n        defaultItem: defaultItem,\n        textField: textField,\n        selected: areSame(_this.value, defaultItem, dataItemKey),\n        key: \"defaultitemkey\",\n        onClick: _this.handleDefaultItemClick\n      });\n    };\n\n    _this.search = function (event) {\n      clearTimeout(_this._typingTimeout);\n\n      if (!_this.props.filterable) {\n        _this._typingTimeout = setTimeout(function () {\n          return _this.searchState.word = '';\n        }, _this.props.delay);\n\n        _this.selectNext(event);\n      }\n    };\n\n    _this.selectNext = function (event) {\n      var _a = _this.props,\n          _b = _a.data,\n          data = _b === void 0 ? [] : _b,\n          dataItemKey = _a.dataItemKey;\n      var mappedData = data.map(function (item, idx) {\n        return {\n          item: item,\n          itemIndex: idx\n        };\n      });\n      var word = _this.searchState.word;\n      var last = _this.searchState.last;\n      var isInLoop = sameCharsOnly(word, last);\n      var dataLength = mappedData.length;\n      var startIndex = Math.max(0, data.findIndex(function (i) {\n        return areSame(i, _this.value, dataItemKey);\n      }));\n      var defaultItem;\n\n      if (_this.props.defaultItem) {\n        defaultItem = {\n          item: _this.props.defaultItem,\n          itemIndex: -1\n        };\n        dataLength += 1;\n        startIndex += 1;\n      }\n\n      startIndex += isInLoop ? 1 : 0;\n      mappedData = shuffleData(mappedData, startIndex, defaultItem);\n      var text,\n          loopMatch,\n          nextMatch,\n          index = 0;\n      var _c = _this.props,\n          textField = _c.textField,\n          ignoreCase = _c.ignoreCase;\n\n      for (; index < dataLength; index++) {\n        text = getItemValue(mappedData[index].item, textField);\n        loopMatch = isInLoop && matchText(text, last, ignoreCase);\n        nextMatch = matchText(text, word, ignoreCase);\n\n        if (loopMatch || nextMatch) {\n          index = mappedData[index].itemIndex;\n          break;\n        }\n      }\n\n      if (index !== dataLength) {\n        var state = _this.base.initState();\n\n        state.syntheticEvent = event;\n\n        _this.handleItemSelect(index, state);\n\n        _this.applyState(state);\n\n        _this._valueDuringOnChange = undefined;\n      }\n    };\n\n    _this.handleKeyDown = function (event) {\n      var _a = _this.props,\n          _b = _a.data,\n          data = _b === void 0 ? [] : _b,\n          filterable = _a.filterable,\n          disabled = _a.disabled,\n          _c = _a.virtual,\n          virtual = _c === void 0 ? {\n        skip: 0,\n        total: 0,\n        pageSize: 0\n      } : _c;\n      var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;\n      var keyCode = event.keyCode;\n      var homeOrEndKeys = keyCode === Keys.home || keyCode === Keys.end;\n      var upOrDownKeys = keyCode === Keys.up || keyCode === Keys.down;\n      var shouldOpen = !opened && (event.altKey && keyCode === Keys.down || keyCode === Keys.enter || keyCode === Keys.space);\n      var shouldClose = opened && (event.altKey && keyCode === Keys.up || keyCode === Keys.esc);\n      var leftOrRightKeys = keyCode === Keys.left || keyCode === Keys.right;\n      var shouldNavigate = upOrDownKeys || !filterable && (leftOrRightKeys || homeOrEndKeys);\n\n      var state = _this.base.initState();\n\n      state.syntheticEvent = event;\n\n      if (disabled) {\n        return;\n      } else if (homeOrEndKeys && _this.base.vs.enabled) {\n        if (keyCode === Keys.home) {\n          if (virtual.skip !== 0) {\n            _this.base.triggerOnPageChange(state, 0, virtual.pageSize);\n\n            _this._navigated = true;\n          } else {\n            _this.triggerOnChange(data[0], state);\n          }\n        } else {\n          if (virtual.skip < virtual.total - virtual.pageSize) {\n            _this.base.triggerOnPageChange(state, virtual.total - virtual.pageSize, virtual.pageSize);\n\n            _this._navigated = true;\n          } else {\n            _this.triggerOnChange(data[data.length - 1], state);\n          }\n        }\n      } else if (opened && keyCode === Keys.enter) {\n        var focusedIndex = _this.focusedIndex();\n\n        if (focusedIndex !== undefined) {\n          _this.handleItemSelect(focusedIndex, state);\n        }\n\n        _this.base.togglePopup(state);\n\n        event.preventDefault();\n      } else if (shouldOpen || shouldClose) {\n        _this.base.togglePopup(state);\n\n        event.preventDefault();\n      } else if (shouldNavigate) {\n        _this.onNavigate(state, keyCode);\n\n        event.preventDefault();\n      }\n\n      _this.applyState(state);\n    };\n\n    _this.handleItemClick = function (index, event) {\n      _this.base.handleItemClick(index, event);\n\n      _this._valueDuringOnChange = undefined;\n    };\n\n    _this.handleFocus = function (event) {\n      if (_this._skipFocusEvent) {\n        return;\n      }\n\n      _this.base.handleFocus(event);\n    };\n\n    _this.handleBlur = function (event) {\n      if (_this._skipFocusEvent || !_this.state.focused) {\n        return;\n      }\n\n      var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;\n\n      var state = _this.base.initState();\n\n      state.syntheticEvent = event;\n      state.data.focused = false;\n      state.events.push({\n        type: 'onBlur'\n      });\n\n      if (opened) {\n        _this.base.togglePopup(state);\n      }\n\n      _this.applyState(state);\n    };\n\n    _this.handleDefaultItemClick = function (event) {\n      var state = _this.base.initState();\n\n      state.syntheticEvent = event;\n\n      _this.base.togglePopup(state);\n\n      _this.triggerOnChange(_this.props.defaultItem, state);\n\n      _this.applyState(state);\n    };\n\n    _this.handleWrapperClick = function (event) {\n      var state = _this.base.initState();\n\n      state.syntheticEvent = event;\n\n      if (!_this.state.focused) {\n        state.data.focused = true;\n      }\n\n      _this.base.togglePopup(state);\n\n      _this.applyState(state);\n    };\n\n    _this.handleKeyPress = function (event) {\n      if (_this.props.filterable || event.which === 0 || event.keyCode === Keys.enter) {\n        return;\n      }\n\n      var character = String.fromCharCode(event.charCode || event.keyCode);\n\n      if (_this.props.ignoreCase) {\n        character = character.toLowerCase();\n      }\n\n      if (character === ' ') {\n        event.preventDefault();\n      }\n\n      _this.searchState = {\n        word: _this.searchState.word + character,\n        last: _this.searchState.last + character\n      };\n\n      _this.search(event);\n    };\n\n    _this.handleListFilterChange = function (event) {\n      var state = _this.base.initState();\n\n      state.syntheticEvent = event;\n\n      if (_this.props.filter === undefined) {\n        state.data.text = event.target.value;\n      }\n\n      _this.base.filterChanged(event.target.value, state);\n\n      _this.applyState(state);\n    };\n\n    _this.onPopupOpened = function () {\n      if (_this._filterInput) {\n        _this.focusElement(_this._filterInput);\n      }\n    };\n\n    _this.onPopupClosed = function () {\n      if (_this.state.focused) {\n        setTimeout(function () {\n          if (_this.state.focused && _this.base.wrapper) {\n            _this.focusElement(_this.base.wrapper);\n          }\n        });\n      }\n    };\n\n    _this.setValidity = function () {\n      if (_this._select && _this._select.setCustomValidity) {\n        _this._select.setCustomValidity(_this.validity.valid ? '' : _this.props.validationMessage || VALIDATION_MESSAGE);\n      }\n    };\n\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  DropDownList.prototype.focus = function () {\n    if (this.base.wrapper) {\n      this.base.wrapper.focus();\n    }\n  };\n\n  Object.defineProperty(DropDownList.prototype, \"element\", {\n    /**\n     * @hidden\n     */\n    get: function get() {\n      return this._element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DropDownList.prototype, \"value\", {\n    /**\n     * The value of the DropDownList.\n     */\n    get: function get() {\n      var value;\n\n      if (this._valueDuringOnChange !== undefined) {\n        value = this._valueDuringOnChange;\n      } else if (this.props.value !== undefined) {\n        value = this.props.value;\n      } else if (this.state.value !== undefined) {\n        value = this.state.value;\n      } else if (this.props.defaultValue !== undefined) {\n        value = this.props.defaultValue;\n      }\n\n      if (!isPresent(value) && this.props.defaultItem !== undefined) {\n        value = this.props.defaultItem;\n      }\n\n      return value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DropDownList.prototype, \"index\", {\n    /**\n     * The index of the selected item.\n     */\n    get: function get() {\n      var _a = this.props,\n          _b = _a.data,\n          data = _b === void 0 ? [] : _b,\n          dataItemKey = _a.dataItemKey;\n      var value = this.value; // TO DO: deprecate it!\n\n      return data.findIndex(function (i) {\n        return areSame(i, value, dataItemKey);\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DropDownList.prototype, \"name\", {\n    /**\n     * Gets the `name` property of the DropDownList.\n     */\n    get: function get() {\n      return this.props.name;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DropDownList.prototype, \"validity\", {\n    /**\n     * Represents the validity state into which the DropDownList is set.\n     */\n    get: function get() {\n      var customError = this.props.validationMessage !== undefined;\n      var isValid = !this.required || this.value !== null && this.value !== '' && this.value !== undefined;\n      var valid = this.props.valid !== undefined ? this.props.valid : isValid;\n      return {\n        customError: customError,\n        valid: valid,\n        valueMissing: this.value === null\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DropDownList.prototype, \"validityStyles\", {\n    get: function get() {\n      return this.props.validityStyles !== undefined ? this.props.validityStyles : DropDownList.defaultProps.validityStyles;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DropDownList.prototype, \"required\", {\n    /**\n     * @hidden\n     */\n    get: function get() {\n      return this.props.required !== undefined ? this.props.required : DropDownList.defaultProps.required;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  DropDownList.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var _a = this.props,\n        _b = _a.data,\n        data = _b === void 0 ? [] : _b,\n        dataItemKey = _a.dataItemKey,\n        virtual = _a.virtual;\n    var prevTotal = prevProps.virtual ? prevProps.virtual.total : 0;\n    var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;\n    var prevOpened = prevProps.opened !== undefined ? prevProps.opened : prevState.opened;\n    var opening = !prevOpened && opened;\n    var closing = prevOpened && !opened;\n\n    if (!this.base.getPopupSettings().animate) {\n      if (opening) {\n        this.onPopupOpened();\n      } else if (closing) {// this.onPopupClosed();\n      }\n    }\n\n    if (virtual && virtual.total !== prevTotal) {\n      this.base.vs.calcScrollElementHeight();\n      this.base.vs.reset();\n    } else {\n      var selectedItem_1 = this.value;\n      var prevSelectedItem = prevProps.value !== undefined ? prevProps.value : prevState.value;\n      var selectedItemIndex = data.findIndex(function (i) {\n        return areSame(i, selectedItem_1, dataItemKey);\n      });\n      var selectedItemChanged = !areSame(prevSelectedItem, selectedItem_1, dataItemKey);\n\n      if (opening && virtual) {\n        this.base.scrollToVirtualItem(virtual, selectedItemIndex);\n      } else if (opening && !virtual) {\n        this.base.scrollToItem(selectedItemIndex);\n      } else if (opened && prevOpened && selectedItem_1 && selectedItemChanged && !this._navigated) {\n        this.base.scrollToItem(selectedItemIndex);\n      } else if (opened && prevOpened && this._navigated) {\n        if (this._navigated && virtual && virtual.skip === 0) {\n          this.base.vs.reset();\n        } else if (this._navigated && virtual && virtual.skip === virtual.total - virtual.pageSize) {\n          this.base.vs.scrollToEnd();\n        }\n      }\n    }\n\n    this._navigated = false;\n    this.setValidity();\n  };\n  /**\n   * @hidden\n   */\n\n\n  DropDownList.prototype.componentDidMount = function () {\n    this.base.didMount();\n    this.setValidity();\n  };\n  /**\n   * @hidden\n   */\n\n\n  DropDownList.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        style = _a.style,\n        className = _a.className,\n        label = _a.label,\n        dir = _a.dir,\n        virtual = _a.virtual;\n    var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;\n    var text = getItemValue(this.value, this.props.textField);\n    var isValid = !this.validityStyles || this.validity.valid;\n    var base = this.base;\n    var vs = base.vs;\n    vs.enabled = virtual !== undefined;\n\n    if (virtual !== undefined) {\n      base.vs.skip = virtual.skip;\n      base.vs.total = virtual.total;\n      base.vs.pageSize = virtual.pageSize;\n    }\n\n    var dropdownlist = React.createElement(\"span\", {\n      ref: function ref(dropdown) {\n        return _this._element = dropdown;\n      },\n      className: classNames('k-widget k-dropdown k-header', {\n        'k-state-invalid': !isValid\n      }, className),\n      style: !label ? style : __assign({}, style, {\n        width: undefined\n      }),\n      dir: dir,\n      onMouseDown: opened ? preventDefaultNonInputs : undefined,\n      onFocus: this.handleFocus,\n      onBlur: this.handleBlur\n    }, this.renderDropDownWrapper(), this.renderListContainer());\n    return label ? React.createElement(FloatingLabel, {\n      label: label,\n      value: text,\n      style: {\n        width: style ? style.width : undefined\n      },\n      valid: isValid,\n      children: dropdownlist\n    }) : dropdownlist;\n  };\n  /**\n   * @hidden\n   */\n\n\n  DropDownList.prototype.onNavigate = function (state, keyCode) {\n    var _a = this.props,\n        _b = _a.data,\n        data = _b === void 0 ? [] : _b,\n        defaultItem = _a.defaultItem,\n        dataItemKey = _a.dataItemKey,\n        _c = _a.virtual,\n        virtual = _c === void 0 ? {\n      skip: 0,\n      total: 0,\n      pageSize: 0\n    } : _c;\n    var vs = this.base.vs;\n    var value = this.value;\n    var index = data.findIndex(function (i) {\n      return areSame(i, value, dataItemKey);\n    });\n    var newIndex = this.base.navigation.navigate({\n      current: virtual.skip + index,\n      max: (vs.enabled ? virtual.total : data.length) - 1,\n      min: defaultItem !== undefined ? -1 : 0,\n      keyCode: keyCode\n    });\n\n    if (newIndex !== undefined) {\n      this.handleItemSelect(newIndex, state);\n    }\n\n    this.applyState(state);\n  };\n\n  DropDownList.prototype.focusedIndex = function () {\n    var filterText = isPresent(this.props.filter) ? this.props.filter : this.state.text;\n    var _a = this.props,\n        _b = _a.data,\n        data = _b === void 0 ? [] : _b,\n        _c = _a.virtual,\n        virtual = _c === void 0 ? {\n      skip: 0\n    } : _c,\n        dataItemKey = _a.dataItemKey,\n        textField = _a.textField,\n        focusedItemIndex = _a.focusedItemIndex;\n    var value = this.value;\n    var selectedIndex = data.findIndex(function (i) {\n      return areSame(i, value, dataItemKey);\n    });\n    var hasSelected = !(selectedIndex < 0 && !this.props.defaultItem);\n\n    if (!hasSelected && filterText && virtual.skip === 0) {\n      return focusedItemIndex ? focusedItemIndex(data, filterText, textField) : data.indexOf(getFocusedItem(data, filterText, textField));\n    } else {\n      return !hasSelected && virtual.skip === 0 ? 0 : undefined;\n    }\n  };\n\n  DropDownList.prototype.focusElement = function (element) {\n    var _this = this;\n\n    this._skipFocusEvent = true;\n    element.focus();\n    setTimeout(function () {\n      return _this._skipFocusEvent = false;\n    }, 30);\n  };\n\n  DropDownList.prototype.triggerOnChange = function (item, state) {\n    if (areSame(this.value, item, this.props.dataItemKey)) {\n      return;\n    }\n\n    if (this.props.value === undefined) {\n      state.data.value = item;\n    }\n\n    this._valueDuringOnChange = item;\n    state.events.push({\n      type: 'onChange'\n    });\n  };\n\n  DropDownList.prototype.applyState = function (state) {\n    this.base.applyState(state);\n    this._valueDuringOnChange = undefined;\n  };\n  /**\n   * @hidden\n   */\n\n\n  DropDownList.propTypes = __assign({\n    delay: PropTypes.number,\n    ignoreCase: PropTypes.bool,\n    iconClassName: PropTypes.string,\n    defaultItem: PropTypes.any,\n    valueRender: PropTypes.func,\n    valueMap: PropTypes.func,\n    validationMessage: PropTypes.string,\n    required: PropTypes.bool\n  }, DropDownBase.propTypes);\n  /**\n   * @hidden\n   */\n\n  DropDownList.defaultProps = __assign({\n    delay: 500,\n    tabIndex: 0,\n    ignoreCase: true\n  }, DropDownBase.defaultProps, {\n    required: false\n  });\n  return DropDownList;\n}(React.Component);\n\nexport default DropDownList;","map":null,"metadata":{},"sourceType":"module"}