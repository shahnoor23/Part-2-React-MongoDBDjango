{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Animate from 'rc-animate';\nimport toArray from 'rc-util/es/Children/toArray';\nimport { contextTypes } from './Tree';\nvar defaultTitle = '---';\n\nvar TreeNode = function (_React$Component) {\n  _inherits(TreeNode, _React$Component);\n\n  function TreeNode(props) {\n    _classCallCheck(this, TreeNode);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _this.onCheck = function () {\n      _this.props.root.onCheck(_this);\n    };\n\n    _this.onMouseEnter = function (e) {\n      e.preventDefault();\n\n      _this.props.root.onMouseEnter(e, _this);\n    };\n\n    _this.onMouseLeave = function (e) {\n      e.preventDefault();\n\n      _this.props.root.onMouseLeave(e, _this);\n    };\n\n    _this.onContextMenu = function (e) {\n      _this.props.root.onContextMenu(e, _this);\n    };\n\n    _this.onDragStart = function (e) {\n      e.stopPropagation();\n\n      _this.setState({\n        dragNodeHighlight: true\n      });\n\n      _this.props.root.onDragStart(e, _this);\n\n      try {\n        // ie throw error\n        // firefox-need-it\n        e.dataTransfer.setData('text/plain', '');\n      } catch (error) {// empty\n      }\n    };\n\n    _this.onDragEnter = function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      _this.props.root.onDragEnter(e, _this);\n    };\n\n    _this.onDragOver = function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      _this.props.root.onDragOver(e, _this);\n    };\n\n    _this.onDragLeave = function (e) {\n      e.stopPropagation();\n\n      _this.props.root.onDragLeave(e, _this);\n    };\n\n    _this.onDrop = function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      _this.setState({\n        dragNodeHighlight: false\n      });\n\n      _this.props.root.onDrop(e, _this);\n    };\n\n    _this.onDragEnd = function (e) {\n      e.stopPropagation();\n\n      _this.setState({\n        dragNodeHighlight: false\n      });\n\n      _this.props.root.onDragEnd(e, _this);\n    };\n\n    _this.onExpand = function () {\n      var callbackPromise = _this.props.root.onExpand(_this);\n\n      if (callbackPromise && typeof callbackPromise === 'object') {\n        var setLoading = function setLoading(dataLoading) {\n          _this.setState({\n            dataLoading: dataLoading\n          });\n        };\n\n        setLoading(true);\n        callbackPromise.then(function () {\n          setLoading(false);\n        }, function () {\n          setLoading(false);\n        });\n      }\n    };\n\n    _this.saveSelectHandle = function (node) {\n      _this.selectHandle = node;\n    };\n\n    _this.state = {\n      dataLoading: false,\n      dragNodeHighlight: false\n    };\n    return _this;\n  }\n\n  TreeNode.prototype.onSelect = function onSelect() {\n    this.props.root.onSelect(this);\n  }; // keyboard event support\n\n\n  TreeNode.prototype.onKeyDown = function onKeyDown(e) {\n    e.preventDefault();\n  };\n\n  TreeNode.prototype.isSelectable = function isSelectable() {\n    var props = this.props,\n        context = this.context;\n    return 'selectable' in props ? props.selectable : context.rcTree.selectable;\n  };\n\n  TreeNode.prototype.renderSwitcher = function renderSwitcher(props, expandedState) {\n    var prefixCls = props.prefixCls;\n    var switcherCls = classNames(prefixCls + '-switcher', prefixCls + '-switcher_' + expandedState);\n    return React.createElement('span', {\n      className: switcherCls,\n      onClick: this.onExpand\n    });\n  };\n\n  TreeNode.prototype.renderCheckbox = function renderCheckbox(props) {\n    var _checkboxCls;\n\n    var prefixCls = props.prefixCls;\n    var checkboxCls = (_checkboxCls = {}, _checkboxCls[prefixCls + '-checkbox'] = true, _checkboxCls);\n\n    if (props.checked) {\n      checkboxCls[prefixCls + '-checkbox-checked'] = true;\n    } else if (props.halfChecked) {\n      checkboxCls[prefixCls + '-checkbox-indeterminate'] = true;\n    }\n\n    var customEle = null;\n\n    if (typeof props.checkable !== 'boolean') {\n      customEle = props.checkable;\n    }\n\n    if (props.disabled || props.disableCheckbox) {\n      checkboxCls[prefixCls + '-checkbox-disabled'] = true;\n      return React.createElement('span', {\n        className: classNames(checkboxCls)\n      }, customEle);\n    }\n\n    return React.createElement('span', {\n      className: classNames(checkboxCls),\n      onClick: this.onCheck\n    }, customEle);\n  };\n\n  TreeNode.prototype.renderChildren = function renderChildren(props) {\n    var renderFirst = this.renderFirst;\n    this.renderFirst = 1;\n    var transitionAppear = true;\n\n    if (!renderFirst && props.expanded) {\n      transitionAppear = false;\n    }\n\n    var children = null;\n\n    if (props.children) {\n      children = toArray(props.children).filter(function (item) {\n        return !!item;\n      });\n    }\n\n    var newChildren = children;\n\n    if (children && (Array.isArray(children) && children.length && children.every(function (item) {\n      return item.type && item.type.isTreeNode;\n    }) || children.type && children.type.isTreeNode)) {\n      var _classNames;\n\n      var animProps = {};\n\n      if (props.openTransitionName) {\n        animProps.transitionName = props.openTransitionName;\n      } else if (typeof props.openAnimation === 'object') {\n        animProps.animation = _extends({}, props.openAnimation);\n\n        if (!transitionAppear) {\n          delete animProps.animation.appear;\n        }\n      }\n\n      var cls = classNames(props.prefixCls + '-child-tree', (_classNames = {}, _classNames[props.prefixCls + '-child-tree-open'] = props.expanded, _classNames));\n      newChildren = React.createElement(Animate, _extends({}, animProps, {\n        showProp: 'data-expanded',\n        transitionAppear: transitionAppear,\n        component: ''\n      }), !props.expanded ? null : React.createElement('ul', {\n        className: cls,\n        'data-expanded': props.expanded\n      }, React.Children.map(children, function (item, index) {\n        return props.root.renderTreeNode(item, index, props.pos);\n      }, props.root)));\n    }\n\n    return newChildren;\n  };\n\n  TreeNode.prototype.render = function render() {\n    var _iconEleCls,\n        _this2 = this;\n\n    var props = this.props;\n    var prefixCls = props.prefixCls;\n    var expandedState = props.expanded ? 'open' : 'close';\n    var iconState = expandedState;\n    var canRenderSwitcher = true;\n    var content = props.title;\n    var newChildren = this.renderChildren(props);\n\n    if (!newChildren || newChildren === props.children) {\n      // content = newChildren;\n      newChildren = null;\n\n      if (!props.loadData || props.isLeaf) {\n        canRenderSwitcher = false;\n        iconState = 'docu';\n      }\n    } // For performance, does't render children into dom when `!props.expanded` (move to Animate)\n    // if (!props.expanded) {\n    //   newChildren = null;\n    // }\n\n\n    var iconEleCls = (_iconEleCls = {}, _iconEleCls[prefixCls + '-iconEle'] = true, _iconEleCls[prefixCls + '-icon_loading'] = this.state.dataLoading, _iconEleCls[prefixCls + '-icon__' + iconState] = true, _iconEleCls);\n\n    var selectHandle = function selectHandle() {\n      var icon = props.showIcon || props.loadData && _this2.state.dataLoading ? React.createElement('span', {\n        className: classNames(iconEleCls)\n      }) : null;\n      var title = React.createElement('span', {\n        className: prefixCls + '-title'\n      }, content);\n      var wrap = prefixCls + '-node-content-wrapper';\n      var domProps = {\n        className: wrap + ' ' + wrap + '-' + (iconState === expandedState ? iconState : 'normal'),\n        onMouseEnter: _this2.onMouseEnter,\n        onMouseLeave: _this2.onMouseLeave,\n        onContextMenu: _this2.onContextMenu\n      };\n\n      if (!props.disabled) {\n        if (props.selected || _this2.state.dragNodeHighlight) {\n          domProps.className += ' ' + prefixCls + '-node-selected';\n        }\n\n        domProps.onClick = function (e) {\n          if (_this2.isSelectable()) {\n            e.preventDefault();\n\n            _this2.onSelect();\n          } else if (props.checkable && !props.disableCheckbox) {\n            e.preventDefault(); // && !props.disabled is checked on line 259\n\n            _this2.onCheck();\n          }\n        };\n\n        if (props.draggable) {\n          domProps.className += ' draggable';\n          domProps.draggable = true;\n          domProps['aria-grabbed'] = true;\n          domProps.onDragStart = _this2.onDragStart;\n        }\n      }\n\n      return React.createElement('span', _extends({\n        ref: _this2.saveSelectHandle,\n        title: typeof content === 'string' ? content : ''\n      }, domProps), icon, title);\n    };\n\n    var liProps = {};\n\n    if (props.draggable) {\n      liProps.onDragEnter = this.onDragEnter;\n      liProps.onDragOver = this.onDragOver;\n      liProps.onDragLeave = this.onDragLeave;\n      liProps.onDrop = this.onDrop;\n      liProps.onDragEnd = this.onDragEnd;\n    }\n\n    var disabledCls = '';\n    var dragOverCls = '';\n\n    if (props.disabled) {\n      disabledCls = prefixCls + '-treenode-disabled';\n    } else if (props.dragOver) {\n      dragOverCls = 'drag-over';\n    } else if (props.dragOverGapTop) {\n      dragOverCls = 'drag-over-gap-top';\n    } else if (props.dragOverGapBottom) {\n      dragOverCls = 'drag-over-gap-bottom';\n    }\n\n    var filterCls = props.filterTreeNode(this) ? 'filter-node' : '';\n\n    var renderNoopSwitcher = function renderNoopSwitcher() {\n      return React.createElement('span', {\n        className: prefixCls + '-switcher ' + prefixCls + '-switcher-noop'\n      });\n    };\n\n    return React.createElement('li', _extends({}, liProps, {\n      className: classNames(props.className, disabledCls, dragOverCls, filterCls)\n    }), canRenderSwitcher ? this.renderSwitcher(props, expandedState) : renderNoopSwitcher(), props.checkable ? this.renderCheckbox(props) : null, selectHandle(), newChildren);\n  };\n\n  return TreeNode;\n}(React.Component);\n\nTreeNode.propTypes = {\n  prefixCls: PropTypes.string,\n  disabled: PropTypes.bool,\n  disableCheckbox: PropTypes.bool,\n  expanded: PropTypes.bool,\n  isLeaf: PropTypes.bool,\n  root: PropTypes.object,\n  onSelect: PropTypes.func\n};\nTreeNode.contextTypes = contextTypes;\nTreeNode.defaultProps = {\n  title: defaultTitle\n};\nTreeNode.isTreeNode = 1;\nexport default TreeNode;","map":null,"metadata":{},"sourceType":"module"}