{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _KeyCode = require('rc-util/lib/KeyCode');\n\nvar _KeyCode2 = _interopRequireDefault(_KeyCode);\n\nvar _createChainedFunction = require('rc-util/lib/createChainedFunction');\n\nvar _createChainedFunction2 = _interopRequireDefault(_createChainedFunction);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _domScrollIntoView = require('dom-scroll-into-view');\n\nvar _domScrollIntoView2 = _interopRequireDefault(_domScrollIntoView);\n\nvar _util = require('./util');\n\nvar _DOMWrap = require('./DOMWrap');\n\nvar _DOMWrap2 = _interopRequireDefault(_DOMWrap);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction allDisabled(arr) {\n  if (!arr.length) {\n    return true;\n  }\n\n  return arr.every(function (c) {\n    return !!c.props.disabled;\n  });\n}\n\nfunction getActiveKey(props, originalActiveKey) {\n  var activeKey = originalActiveKey;\n  var children = props.children,\n      eventKey = props.eventKey;\n\n  if (activeKey) {\n    var found = void 0;\n    (0, _util.loopMenuItem)(children, function (c, i) {\n      if (c && !c.props.disabled && activeKey === (0, _util.getKeyFromChildrenIndex)(c, eventKey, i)) {\n        found = true;\n      }\n    });\n\n    if (found) {\n      return activeKey;\n    }\n  }\n\n  activeKey = null;\n\n  if (props.defaultActiveFirst) {\n    (0, _util.loopMenuItem)(children, function (c, i) {\n      if (!activeKey && c && !c.props.disabled) {\n        activeKey = (0, _util.getKeyFromChildrenIndex)(c, eventKey, i);\n      }\n    });\n    return activeKey;\n  }\n\n  return activeKey;\n}\n\nfunction saveRef(index, subIndex, c) {\n  if (c) {\n    if (subIndex !== undefined) {\n      this.instanceArray[index] = this.instanceArray[index] || [];\n      this.instanceArray[index][subIndex] = c;\n    } else {\n      this.instanceArray[index] = c;\n    }\n  }\n}\n\nvar MenuMixin = {\n  propTypes: {\n    focusable: _propTypes2[\"default\"].bool,\n    multiple: _propTypes2[\"default\"].bool,\n    style: _propTypes2[\"default\"].object,\n    defaultActiveFirst: _propTypes2[\"default\"].bool,\n    visible: _propTypes2[\"default\"].bool,\n    activeKey: _propTypes2[\"default\"].string,\n    selectedKeys: _propTypes2[\"default\"].arrayOf(_propTypes2[\"default\"].string),\n    defaultSelectedKeys: _propTypes2[\"default\"].arrayOf(_propTypes2[\"default\"].string),\n    defaultOpenKeys: _propTypes2[\"default\"].arrayOf(_propTypes2[\"default\"].string),\n    openKeys: _propTypes2[\"default\"].arrayOf(_propTypes2[\"default\"].string),\n    children: _propTypes2[\"default\"].any\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      prefixCls: 'rc-menu',\n      className: '',\n      mode: 'vertical',\n      level: 1,\n      inlineIndent: 24,\n      visible: true,\n      focusable: true,\n      style: {}\n    };\n  },\n  getInitialState: function getInitialState() {\n    var props = this.props;\n    return {\n      activeKey: getActiveKey(props, props.activeKey)\n    };\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    var props = void 0;\n\n    if ('activeKey' in nextProps) {\n      props = {\n        activeKey: getActiveKey(nextProps, nextProps.activeKey)\n      };\n    } else {\n      var originalActiveKey = this.state.activeKey;\n      var activeKey = getActiveKey(nextProps, originalActiveKey); // fix: this.setState(), parent.render(),\n\n      if (activeKey !== originalActiveKey) {\n        props = {\n          activeKey: activeKey\n        };\n      }\n    }\n\n    if (props) {\n      this.setState(props);\n    }\n  },\n  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {\n    return this.props.visible || nextProps.visible;\n  },\n  componentWillMount: function componentWillMount() {\n    this.instanceArray = [];\n  },\n  // all keyboard events callbacks run from here at first\n  onKeyDown: function onKeyDown(e) {\n    var _this = this;\n\n    var keyCode = e.keyCode;\n    var handled = void 0;\n    this.getFlatInstanceArray().forEach(function (obj) {\n      if (obj && obj.props.active && obj.onKeyDown) {\n        handled = obj.onKeyDown(e);\n      }\n    });\n\n    if (handled) {\n      return 1;\n    }\n\n    var activeItem = null;\n\n    if (keyCode === _KeyCode2[\"default\"].UP || keyCode === _KeyCode2[\"default\"].DOWN) {\n      activeItem = this.step(keyCode === _KeyCode2[\"default\"].UP ? -1 : 1);\n    }\n\n    if (activeItem) {\n      e.preventDefault();\n      this.setState({\n        activeKey: activeItem.props.eventKey\n      }, function () {\n        (0, _domScrollIntoView2[\"default\"])(_reactDom2[\"default\"].findDOMNode(activeItem), _reactDom2[\"default\"].findDOMNode(_this), {\n          onlyScrollIfNeeded: true\n        });\n      });\n      return 1;\n    } else if (activeItem === undefined) {\n      e.preventDefault();\n      this.setState({\n        activeKey: null\n      });\n      return 1;\n    }\n  },\n  getOpenChangesOnItemHover: function getOpenChangesOnItemHover(e) {\n    var mode = this.props.mode;\n    var key = e.key,\n        hover = e.hover,\n        trigger = e.trigger;\n    var activeKey = this.state.activeKey;\n\n    if (!trigger || hover || this.props.closeSubMenuOnMouseLeave || !e.item.isSubMenu || mode === 'inline') {\n      this.setState({\n        activeKey: hover ? key : null\n      });\n    } else {} // keep active for sub menu for click active\n    // empty\n    // clear last open status\n\n\n    if (hover && mode !== 'inline') {\n      var activeItem = this.getFlatInstanceArray().filter(function (c) {\n        return c && c.props.eventKey === activeKey;\n      })[0];\n\n      if (activeItem && activeItem.isSubMenu && activeItem.props.eventKey !== key) {\n        return {\n          item: activeItem,\n          originalEvent: e,\n          key: activeItem.props.eventKey,\n          open: false\n        };\n      }\n    }\n\n    return [];\n  },\n  getFlatInstanceArray: function getFlatInstanceArray() {\n    var instanceArray = this.instanceArray;\n    var hasInnerArray = instanceArray.some(function (a) {\n      return Array.isArray(a);\n    });\n\n    if (hasInnerArray) {\n      instanceArray = [];\n      this.instanceArray.forEach(function (a) {\n        if (Array.isArray(a)) {\n          instanceArray.push.apply(instanceArray, a);\n        } else {\n          instanceArray.push(a);\n        }\n      });\n      this.instanceArray = instanceArray;\n    }\n\n    return instanceArray;\n  },\n  renderCommonMenuItem: function renderCommonMenuItem(child, i, subIndex, extraProps) {\n    var state = this.state;\n    var props = this.props;\n    var key = (0, _util.getKeyFromChildrenIndex)(child, props.eventKey, i);\n    var childProps = child.props;\n    var isActive = key === state.activeKey;\n    var newChildProps = (0, _extends3[\"default\"])({\n      mode: props.mode,\n      level: props.level,\n      inlineIndent: props.inlineIndent,\n      renderMenuItem: this.renderMenuItem,\n      rootPrefixCls: props.prefixCls,\n      index: i,\n      parentMenu: this,\n      ref: childProps.disabled ? undefined : (0, _createChainedFunction2[\"default\"])(child.ref, saveRef.bind(this, i, subIndex)),\n      eventKey: key,\n      closeSubMenuOnMouseLeave: props.closeSubMenuOnMouseLeave,\n      onItemHover: this.onItemHover,\n      active: !childProps.disabled && isActive,\n      multiple: props.multiple,\n      onClick: this.onClick,\n      openTransitionName: this.getOpenTransitionName(),\n      openAnimation: props.openAnimation,\n      onOpenChange: this.onOpenChange,\n      onDeselect: this.onDeselect,\n      onDestroy: this.onDestroy,\n      onSelect: this.onSelect\n    }, extraProps);\n\n    if (props.mode === 'inline') {\n      newChildProps.closeSubMenuOnMouseLeave = newChildProps.openSubMenuOnMouseEnter = false;\n    }\n\n    return _react2[\"default\"].cloneElement(child, newChildProps);\n  },\n  renderRoot: function renderRoot(props) {\n    var _classes;\n\n    this.instanceArray = [];\n    var classes = (_classes = {}, (0, _defineProperty3[\"default\"])(_classes, props.prefixCls, 1), (0, _defineProperty3[\"default\"])(_classes, props.prefixCls + '-' + props.mode, 1), (0, _defineProperty3[\"default\"])(_classes, props.className, !!props.className), _classes);\n    var domProps = {\n      className: (0, _classnames2[\"default\"])(classes),\n      role: 'menu',\n      'aria-activedescendant': ''\n    };\n\n    if (props.id) {\n      domProps.id = props.id;\n    }\n\n    if (props.focusable) {\n      domProps.tabIndex = '0';\n      domProps.onKeyDown = this.onKeyDown;\n    }\n\n    return (// ESLint is not smart enough to know that the type of `children` was checked.\n\n      /* eslint-disable */\n      _react2[\"default\"].createElement(_DOMWrap2[\"default\"], (0, _extends3[\"default\"])({\n        style: props.style,\n        tag: 'ul',\n        hiddenClassName: props.prefixCls + '-hidden',\n        visible: props.visible\n      }, domProps), _react2[\"default\"].Children.map(props.children, this.renderMenuItem))\n      /*eslint-enable */\n\n    );\n  },\n  step: function step(direction) {\n    var children = this.getFlatInstanceArray();\n    var activeKey = this.state.activeKey;\n    var len = children.length;\n\n    if (!len) {\n      return null;\n    }\n\n    if (direction < 0) {\n      children = children.concat().reverse();\n    } // find current activeIndex\n\n\n    var activeIndex = -1;\n    children.every(function (c, ci) {\n      if (c && c.props.eventKey === activeKey) {\n        activeIndex = ci;\n        return false;\n      }\n\n      return true;\n    });\n\n    if (!this.props.defaultActiveFirst && activeIndex !== -1) {\n      if (allDisabled(children.slice(activeIndex, len - 1))) {\n        return undefined;\n      }\n    }\n\n    var start = (activeIndex + 1) % len;\n    var i = start;\n\n    for (;;) {\n      var child = children[i];\n\n      if (!child || child.props.disabled) {\n        i = (i + 1 + len) % len; // complete a loop\n\n        if (i === start) {\n          return null;\n        }\n      } else {\n        return child;\n      }\n    }\n  }\n};\nexports[\"default\"] = MenuMixin;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}