{"ast":null,"code":"function noop() {}\n\nfunction defaultParser(input) {\n  return input.replace(/[^\\w\\.-]+/g, '');\n}\n/**\n * When click and hold on a button - the speed of auto changin the value.\n */\n\n\nvar SPEED = 200;\n/**\n * When click and hold on a button - the delay before auto changin the value.\n */\n\nvar DELAY = 600;\n/**\n * Max Safe Integer -- on IE this is not available, so manually set the number in that case.\n * The reason this is used, instead of Infinity is because numbers above the MSI are unstable\n */\n\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\nexport default {\n  getDefaultProps: function getDefaultProps() {\n    return {\n      max: MAX_SAFE_INTEGER,\n      min: -MAX_SAFE_INTEGER,\n      step: 1,\n      style: {},\n      onChange: noop,\n      onKeyDown: noop,\n      onFocus: noop,\n      onBlur: noop,\n      parser: defaultParser\n    };\n  },\n  getInitialState: function getInitialState() {\n    var value = void 0;\n    var props = this.props;\n\n    if ('value' in props) {\n      value = props.value;\n    } else {\n      value = props.defaultValue;\n    }\n\n    value = this.toNumber(value);\n    return {\n      inputValue: this.toPrecisionAsStep(value),\n      value: value,\n      focused: props.autoFocus\n    };\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    if ('value' in nextProps) {\n      var value = this.state.focused ? nextProps.value : this.getValidValue(nextProps.value);\n      this.setState({\n        value: value,\n        inputValue: this.inputting ? value : this.toPrecisionAsStep(value)\n      });\n    }\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    this.stop();\n  },\n  onChange: function onChange(e) {\n    if (this.state.focused) {\n      this.inputting = true;\n    }\n\n    var input = this.props.parser(this.getValueFromEvent(e).trim());\n    this.setState({\n      inputValue: input\n    });\n    this.props.onChange(this.toNumberWhenUserInput(input)); // valid number or invalid string\n  },\n  onFocus: function onFocus() {\n    var _props;\n\n    this.setState({\n      focused: true\n    });\n\n    (_props = this.props).onFocus.apply(_props, arguments);\n  },\n  onBlur: function onBlur(e) {\n    var _this = this;\n\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    this.inputting = false;\n    this.setState({\n      focused: false\n    });\n    var value = this.getCurrentValidValue(this.state.inputValue);\n    e.persist(); // fix https://github.com/react-component/input-number/issues/51\n\n    this.setValue(value, function () {\n      var _props2;\n\n      (_props2 = _this.props).onBlur.apply(_props2, [e].concat(args));\n    });\n  },\n  getCurrentValidValue: function getCurrentValidValue(value) {\n    var val = value;\n\n    if (val === '') {\n      val = '';\n    } else if (!this.isNotCompleteNumber(val)) {\n      val = this.getValidValue(val);\n    } else {\n      val = this.state.value;\n    }\n\n    return this.toNumber(val);\n  },\n  getValidValue: function getValidValue(value) {\n    var val = parseFloat(value, 10); // https://github.com/ant-design/ant-design/issues/7358\n\n    if (isNaN(val)) {\n      return value;\n    }\n\n    if (val < this.props.min) {\n      val = this.props.min;\n    }\n\n    if (val > this.props.max) {\n      val = this.props.max;\n    }\n\n    return val;\n  },\n  setValue: function setValue(v, callback) {\n    // trigger onChange\n    var newValue = this.isNotCompleteNumber(parseFloat(v, 10)) ? undefined : parseFloat(v, 10);\n    var changed = newValue !== this.state.value || '' + newValue !== '' + this.state.inputValue; // https://github.com/ant-design/ant-design/issues/7363\n\n    if (!('value' in this.props)) {\n      this.setState({\n        value: newValue,\n        inputValue: this.toPrecisionAsStep(v)\n      }, callback);\n    } else {\n      // always set input value same as value\n      this.setState({\n        inputValue: this.toPrecisionAsStep(this.state.value)\n      }, callback);\n    }\n\n    if (changed) {\n      this.props.onChange(newValue);\n    }\n  },\n  getPrecision: function getPrecision(value) {\n    if ('precision' in this.props) {\n      return this.props.precision;\n    }\n\n    var valueString = value.toString();\n\n    if (valueString.indexOf('e-') >= 0) {\n      return parseInt(valueString.slice(valueString.indexOf('e-') + 2), 10);\n    }\n\n    var precision = 0;\n\n    if (valueString.indexOf('.') >= 0) {\n      precision = valueString.length - valueString.indexOf('.') - 1;\n    }\n\n    return precision;\n  },\n  // step={1.0} value={1.51}\n  // press +\n  // then value should be 2.51, rather than 2.5\n  // if this.props.precision is undefined\n  // https://github.com/react-component/input-number/issues/39\n  getMaxPrecision: function getMaxPrecision(currentValue) {\n    var ratio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n    if ('precision' in this.props) {\n      return this.props.precision;\n    }\n\n    var step = this.props.step;\n    var ratioPrecision = this.getPrecision(ratio);\n    var stepPrecision = this.getPrecision(step);\n    var currentValuePrecision = this.getPrecision(currentValue);\n\n    if (!currentValue) {\n      return ratioPrecision + stepPrecision;\n    }\n\n    return Math.max(currentValuePrecision, ratioPrecision + stepPrecision);\n  },\n  getPrecisionFactor: function getPrecisionFactor(currentValue) {\n    var ratio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var precision = this.getMaxPrecision(currentValue, ratio);\n    return Math.pow(10, precision);\n  },\n  toPrecisionAsStep: function toPrecisionAsStep(num) {\n    if (this.isNotCompleteNumber(num) || num === '') {\n      return num;\n    }\n\n    var precision = Math.abs(this.getMaxPrecision(num));\n\n    if (precision === 0) {\n      return num.toString();\n    }\n\n    if (!isNaN(precision)) {\n      return Number(num).toFixed(precision);\n    }\n\n    return num.toString();\n  },\n  // '1.' '1x' 'xx' '' => are not complete numbers\n  isNotCompleteNumber: function isNotCompleteNumber(num) {\n    return isNaN(num) || num === '' || num === null || num && num.toString().indexOf('.') === num.toString().length - 1;\n  },\n  toNumber: function toNumber(num) {\n    if (this.isNotCompleteNumber(num)) {\n      return num;\n    }\n\n    if ('precision' in this.props) {\n      return Number(Number(num).toFixed(this.props.precision));\n    }\n\n    return Number(num);\n  },\n  // '1.0' '1.00'  => may be a inputing number\n  toNumberWhenUserInput: function toNumberWhenUserInput(num) {\n    // num.length > 16 => prevent input large number will became Infinity\n    if ((/\\.\\d*0$/.test(num) || num.length > 16) && this.state.focused) {\n      return num;\n    }\n\n    return this.toNumber(num);\n  },\n  upStep: function upStep(val, rat) {\n    var _props3 = this.props,\n        step = _props3.step,\n        min = _props3.min;\n    var precisionFactor = this.getPrecisionFactor(val, rat);\n    var precision = Math.abs(this.getMaxPrecision(val, rat));\n    var result = void 0;\n\n    if (typeof val === 'number') {\n      result = ((precisionFactor * val + precisionFactor * step * rat) / precisionFactor).toFixed(precision);\n    } else {\n      result = min === -Infinity ? step : min;\n    }\n\n    return this.toNumber(result);\n  },\n  downStep: function downStep(val, rat) {\n    var _props4 = this.props,\n        step = _props4.step,\n        min = _props4.min;\n    var precisionFactor = this.getPrecisionFactor(val, rat);\n    var precision = Math.abs(this.getMaxPrecision(val, rat));\n    var result = void 0;\n\n    if (typeof val === 'number') {\n      result = ((precisionFactor * val - precisionFactor * step * rat) / precisionFactor).toFixed(precision);\n    } else {\n      result = min === -Infinity ? -step : min;\n    }\n\n    return this.toNumber(result);\n  },\n  step: function step(type, e) {\n    var ratio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n    if (e) {\n      e.preventDefault();\n    }\n\n    var props = this.props;\n\n    if (props.disabled) {\n      return;\n    }\n\n    var value = this.getCurrentValidValue(this.state.inputValue) || 0;\n\n    if (this.isNotCompleteNumber(value)) {\n      return;\n    }\n\n    var val = this[type + 'Step'](value, ratio);\n\n    if (val > props.max) {\n      val = props.max;\n    } else if (val < props.min) {\n      val = props.min;\n    }\n\n    this.setValue(val);\n    this.setState({\n      focused: true\n    });\n  },\n  stop: function stop() {\n    if (this.autoStepTimer) {\n      clearTimeout(this.autoStepTimer);\n    }\n  },\n  down: function down(e, ratio, recursive) {\n    var _this2 = this;\n\n    if (e.persist) {\n      e.persist();\n    }\n\n    this.stop();\n    this.step('down', e, ratio);\n    this.autoStepTimer = setTimeout(function () {\n      _this2.down(e, ratio, true);\n    }, recursive ? SPEED : DELAY);\n  },\n  up: function up(e, ratio, recursive) {\n    var _this3 = this;\n\n    if (e.persist) {\n      e.persist();\n    }\n\n    this.stop();\n    this.step('up', e, ratio);\n    this.autoStepTimer = setTimeout(function () {\n      _this3.up(e, ratio, true);\n    }, recursive ? SPEED : DELAY);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}