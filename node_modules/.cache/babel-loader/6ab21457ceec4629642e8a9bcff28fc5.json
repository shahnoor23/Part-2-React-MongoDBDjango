{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport Dialog from 'rc-dialog';\nimport PropTypes from 'prop-types';\nimport addEventListener from 'rc-util/es/Dom/addEventListener';\nimport Button from '../button';\nvar mousePosition = void 0;\nvar mousePositionEventBinded = void 0;\n\nvar Modal = function (_React$Component) {\n  _inherits(Modal, _React$Component);\n\n  function Modal() {\n    _classCallCheck(this, Modal);\n\n    var _this = _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).apply(this, arguments));\n\n    _this.handleCancel = function (e) {\n      var onCancel = _this.props.onCancel;\n\n      if (onCancel) {\n        onCancel(e);\n      }\n    };\n\n    _this.handleOk = function (e) {\n      var onOk = _this.props.onOk;\n\n      if (onOk) {\n        onOk(e);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Modal, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (mousePositionEventBinded) {\n        return;\n      } // 只有点击事件支持从鼠标位置动画展开\n\n\n      addEventListener(document.documentElement, 'click', function (e) {\n        mousePosition = {\n          x: e.pageX,\n          y: e.pageY\n        }; // 100ms 内发生过点击事件，则从点击位置动画展示\n        // 否则直接 zoom 展示\n        // 这样可以兼容非点击方式展开\n\n        setTimeout(function () {\n          return mousePosition = null;\n        }, 100);\n      });\n      mousePositionEventBinded = true;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          okText = _props.okText,\n          okType = _props.okType,\n          cancelText = _props.cancelText,\n          confirmLoading = _props.confirmLoading,\n          footer = _props.footer,\n          visible = _props.visible;\n\n      if (this.context.antLocale && this.context.antLocale.Modal) {\n        okText = okText || this.context.antLocale.Modal.okText;\n        cancelText = cancelText || this.context.antLocale.Modal.cancelText;\n      }\n\n      var defaultFooter = [React.createElement(Button, {\n        key: 'cancel',\n        size: 'large',\n        onClick: this.handleCancel\n      }, cancelText || '取消'), React.createElement(Button, {\n        key: 'confirm',\n        type: okType,\n        size: 'large',\n        loading: confirmLoading,\n        onClick: this.handleOk\n      }, okText || '确定')];\n      return React.createElement(Dialog, _extends({}, this.props, {\n        footer: footer === undefined ? defaultFooter : footer,\n        visible: visible,\n        mousePosition: mousePosition,\n        onClose: this.handleCancel\n      }));\n    }\n  }]);\n\n  return Modal;\n}(React.Component);\n\nexport default Modal;\nModal.defaultProps = {\n  prefixCls: 'ant-modal',\n  width: 520,\n  transitionName: 'zoom',\n  maskTransitionName: 'fade',\n  confirmLoading: false,\n  visible: false,\n  okType: 'primary'\n};\nModal.propTypes = {\n  prefixCls: PropTypes.string,\n  onOk: PropTypes.func,\n  onCancel: PropTypes.func,\n  okText: PropTypes.node,\n  cancelText: PropTypes.node,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  confirmLoading: PropTypes.bool,\n  visible: PropTypes.bool,\n  align: PropTypes.object,\n  footer: PropTypes.node,\n  title: PropTypes.node,\n  closable: PropTypes.bool\n};\nModal.contextTypes = {\n  antLocale: PropTypes.object\n};","map":null,"metadata":{},"sourceType":"module"}