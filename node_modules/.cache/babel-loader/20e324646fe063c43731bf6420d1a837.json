{"ast":null,"code":"import _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Menu, { SubMenu, Item as MenuItem } from 'rc-menu';\nimport closest from 'dom-closest';\nimport classNames from 'classnames';\nimport Dropdown from '../dropdown';\nimport Icon from '../icon';\nimport Checkbox from '../checkbox';\nimport Radio from '../radio';\nimport FilterDropdownMenuWrapper from './FilterDropdownMenuWrapper';\n\nvar FilterMenu = function (_React$Component) {\n  _inherits(FilterMenu, _React$Component);\n\n  function FilterMenu(props) {\n    _classCallCheck(this, FilterMenu);\n\n    var _this = _possibleConstructorReturn(this, (FilterMenu.__proto__ || Object.getPrototypeOf(FilterMenu)).call(this, props));\n\n    _this.setNeverShown = function (column) {\n      var rootNode = ReactDOM.findDOMNode(_this);\n      var filterBelongToScrollBody = !!closest(rootNode, '.ant-table-scroll');\n\n      if (filterBelongToScrollBody) {\n        // When fixed column have filters, there will be two dropdown menus\n        // Filter dropdown menu inside scroll body should never be shown\n        // To fix https://github.com/ant-design/ant-design/issues/5010 and\n        // https://github.com/ant-design/ant-design/issues/7909\n        _this.neverShown = !!column.fixed;\n      }\n    };\n\n    _this.setSelectedKeys = function (_ref) {\n      var selectedKeys = _ref.selectedKeys;\n\n      _this.setState({\n        selectedKeys: selectedKeys\n      });\n    };\n\n    _this.handleClearFilters = function () {\n      _this.setState({\n        selectedKeys: []\n      }, _this.handleConfirm);\n    };\n\n    _this.handleConfirm = function () {\n      _this.setVisible(false);\n\n      _this.confirmFilter();\n    };\n\n    _this.onVisibleChange = function (visible) {\n      _this.setVisible(visible);\n\n      if (!visible) {\n        _this.confirmFilter();\n      }\n    };\n\n    _this.handleMenuItemClick = function (info) {\n      if (info.keyPath.length <= 1) {\n        return;\n      }\n\n      var keyPathOfSelectedItem = _this.state.keyPathOfSelectedItem;\n\n      if (_this.state.selectedKeys.indexOf(info.key) >= 0) {\n        // deselect SubMenu child\n        delete keyPathOfSelectedItem[info.key];\n      } else {\n        // select SubMenu child\n        keyPathOfSelectedItem[info.key] = info.keyPath;\n      }\n\n      _this.setState({\n        keyPathOfSelectedItem: keyPathOfSelectedItem\n      });\n    };\n\n    _this.renderFilterIcon = function () {\n      var _this$props = _this.props,\n          column = _this$props.column,\n          locale = _this$props.locale,\n          prefixCls = _this$props.prefixCls;\n      var filterIcon = column.filterIcon;\n      var dropdownSelectedClass = _this.props.selectedKeys.length > 0 ? prefixCls + '-selected' : '';\n      return filterIcon ? React.cloneElement(filterIcon, {\n        title: locale.filterTitle,\n        className: classNames(filterIcon.className, _defineProperty({}, prefixCls + '-icon', true))\n      }) : React.createElement(Icon, {\n        title: locale.filterTitle,\n        type: 'filter',\n        className: dropdownSelectedClass\n      });\n    };\n\n    var visible = 'filterDropdownVisible' in props.column ? props.column.filterDropdownVisible : false;\n    _this.state = {\n      selectedKeys: props.selectedKeys,\n      keyPathOfSelectedItem: {},\n      visible: visible\n    };\n    return _this;\n  }\n\n  _createClass(FilterMenu, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var column = this.props.column;\n      this.setNeverShown(column);\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var column = nextProps.column;\n      this.setNeverShown(column);\n      var newState = {};\n\n      if ('selectedKeys' in nextProps) {\n        newState.selectedKeys = nextProps.selectedKeys;\n      }\n\n      if ('filterDropdownVisible' in column) {\n        newState.visible = column.filterDropdownVisible;\n      }\n\n      if (Object.keys(newState).length > 0) {\n        this.setState(newState);\n      }\n    }\n  }, {\n    key: 'setVisible',\n    value: function setVisible(visible) {\n      var column = this.props.column;\n\n      if (!('filterDropdownVisible' in column)) {\n        this.setState({\n          visible: visible\n        });\n      }\n\n      if (column.onFilterDropdownVisibleChange) {\n        column.onFilterDropdownVisibleChange(visible);\n      }\n    }\n  }, {\n    key: 'confirmFilter',\n    value: function confirmFilter() {\n      if (this.state.selectedKeys !== this.props.selectedKeys) {\n        this.props.confirmFilter(this.props.column, this.state.selectedKeys);\n      }\n    }\n  }, {\n    key: 'renderMenuItem',\n    value: function renderMenuItem(item) {\n      var column = this.props.column;\n      var multiple = 'filterMultiple' in column ? column.filterMultiple : true;\n      var input = multiple ? React.createElement(Checkbox, {\n        checked: this.state.selectedKeys.indexOf(item.value.toString()) >= 0\n      }) : React.createElement(Radio, {\n        checked: this.state.selectedKeys.indexOf(item.value.toString()) >= 0\n      });\n      return React.createElement(MenuItem, {\n        key: item.value\n      }, input, React.createElement('span', null, item.text));\n    }\n  }, {\n    key: 'hasSubMenu',\n    value: function hasSubMenu() {\n      var _props$column$filters = this.props.column.filters,\n          filters = _props$column$filters === undefined ? [] : _props$column$filters;\n      return filters.some(function (item) {\n        return !!(item.children && item.children.length > 0);\n      });\n    }\n  }, {\n    key: 'renderMenus',\n    value: function renderMenus(items) {\n      var _this2 = this;\n\n      return items.map(function (item) {\n        if (item.children && item.children.length > 0) {\n          var keyPathOfSelectedItem = _this2.state.keyPathOfSelectedItem;\n          var containSelected = Object.keys(keyPathOfSelectedItem).some(function (key) {\n            return keyPathOfSelectedItem[key].indexOf(item.value) >= 0;\n          });\n          var subMenuCls = containSelected ? _this2.props.dropdownPrefixCls + '-submenu-contain-selected' : '';\n          return React.createElement(SubMenu, {\n            title: item.text,\n            className: subMenuCls,\n            key: item.value.toString()\n          }, _this2.renderMenus(item.children));\n        }\n\n        return _this2.renderMenuItem(item);\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          column = _props.column,\n          locale = _props.locale,\n          prefixCls = _props.prefixCls,\n          dropdownPrefixCls = _props.dropdownPrefixCls,\n          getPopupContainer = _props.getPopupContainer; // default multiple selection in filter dropdown\n\n      var multiple = 'filterMultiple' in column ? column.filterMultiple : true;\n      var dropdownMenuClass = classNames(_defineProperty({}, dropdownPrefixCls + '-menu-without-submenu', !this.hasSubMenu()));\n      var menus = column.filterDropdown ? React.createElement(FilterDropdownMenuWrapper, null, column.filterDropdown) : React.createElement(FilterDropdownMenuWrapper, {\n        className: prefixCls + '-dropdown'\n      }, React.createElement(Menu, {\n        multiple: multiple,\n        onClick: this.handleMenuItemClick,\n        prefixCls: dropdownPrefixCls + '-menu',\n        className: dropdownMenuClass,\n        onSelect: this.setSelectedKeys,\n        onDeselect: this.setSelectedKeys,\n        selectedKeys: this.state.selectedKeys\n      }, this.renderMenus(column.filters)), React.createElement('div', {\n        className: prefixCls + '-dropdown-btns'\n      }, React.createElement('a', {\n        className: prefixCls + '-dropdown-link confirm',\n        onClick: this.handleConfirm\n      }, locale.filterConfirm), React.createElement('a', {\n        className: prefixCls + '-dropdown-link clear',\n        onClick: this.handleClearFilters\n      }, locale.filterReset)));\n      return React.createElement(Dropdown, {\n        trigger: ['click'],\n        overlay: menus,\n        visible: this.neverShown ? false : this.state.visible,\n        onVisibleChange: this.onVisibleChange,\n        getPopupContainer: getPopupContainer\n      }, this.renderFilterIcon());\n    }\n  }]);\n\n  return FilterMenu;\n}(React.Component);\n\nexport default FilterMenu;\nFilterMenu.defaultProps = {\n  handleFilter: function handleFilter() {},\n  column: {}\n};","map":null,"metadata":{},"sourceType":"module"}