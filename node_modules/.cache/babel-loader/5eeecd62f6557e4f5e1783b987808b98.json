{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _KeyCode = require('rc-util/lib/KeyCode');\n\nvar _KeyCode2 = _interopRequireDefault(_KeyCode);\n\nvar _addEventListener = require('rc-util/lib/Dom/addEventListener');\n\nvar _addEventListener2 = _interopRequireDefault(_addEventListener);\n\nvar _contains = require('rc-util/lib/Dom/contains');\n\nvar _contains2 = _interopRequireDefault(_contains);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nexports[\"default\"] = {\n  componentDidMount: function componentDidMount() {\n    this.componentDidUpdate();\n  },\n  componentDidUpdate: function componentDidUpdate() {\n    if (this.props.mode !== 'inline') {\n      if (this.props.open) {\n        this.bindRootCloseHandlers();\n      } else {\n        this.unbindRootCloseHandlers();\n      }\n    }\n  },\n  handleDocumentKeyUp: function handleDocumentKeyUp(e) {\n    if (e.keyCode === _KeyCode2[\"default\"].ESC) {\n      this.props.onItemHover({\n        key: this.props.eventKey,\n        item: this,\n        hover: false\n      });\n    }\n  },\n  handleDocumentClick: function handleDocumentClick(e) {\n    // If the click originated from within this component\n    // don't do anything.\n    if ((0, _contains2[\"default\"])(_reactDom2[\"default\"].findDOMNode(this), e.target)) {\n      return;\n    }\n\n    var props = this.props;\n    props.onItemHover({\n      hover: false,\n      item: this,\n      key: this.props.eventKey\n    });\n    this.triggerOpenChange(false);\n  },\n  bindRootCloseHandlers: function bindRootCloseHandlers() {\n    if (!this._onDocumentClickListener) {\n      this._onDocumentClickListener = (0, _addEventListener2[\"default\"])(document, 'click', this.handleDocumentClick);\n      this._onDocumentKeyupListener = (0, _addEventListener2[\"default\"])(document, 'keyup', this.handleDocumentKeyUp);\n    }\n  },\n  unbindRootCloseHandlers: function unbindRootCloseHandlers() {\n    if (this._onDocumentClickListener) {\n      this._onDocumentClickListener.remove();\n\n      this._onDocumentClickListener = null;\n    }\n\n    if (this._onDocumentKeyupListener) {\n      this._onDocumentKeyupListener.remove();\n\n      this._onDocumentKeyupListener = null;\n    }\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    this.unbindRootCloseHandlers();\n  }\n};\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}