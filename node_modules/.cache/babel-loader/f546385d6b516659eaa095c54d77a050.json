{"ast":null,"code":"import warning from 'warning';\nvar scrollbarWidth = void 0; // Measure scrollbar width for padding body during modal show/hide\n\nvar scrollbarMeasure = {\n  position: 'absolute',\n  top: '-9999px',\n  width: '50px',\n  height: '50px',\n  overflow: 'scroll'\n};\nexport function measureScrollbar() {\n  if (typeof document === 'undefined' || typeof window === 'undefined') {\n    return 0;\n  }\n\n  if (scrollbarWidth) {\n    return scrollbarWidth;\n  }\n\n  var scrollDiv = document.createElement('div');\n\n  for (var scrollProp in scrollbarMeasure) {\n    if (scrollbarMeasure.hasOwnProperty(scrollProp)) {\n      scrollDiv.style[scrollProp] = scrollbarMeasure[scrollProp];\n    }\n  }\n\n  document.body.appendChild(scrollDiv);\n  var width = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n  document.body.removeChild(scrollDiv);\n  scrollbarWidth = width;\n  return scrollbarWidth;\n}\nexport function debounce(func, wait, immediate) {\n  var timeout = void 0;\n\n  function debounceFunc() {\n    var context = this;\n    var args = arguments; // https://fb.me/react-event-pooling\n\n    if (args[0] && args[0].persist) {\n      args[0].persist();\n    }\n\n    var later = function later() {\n      timeout = null;\n\n      if (!immediate) {\n        func.apply(context, args);\n      }\n    };\n\n    var callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n\n    if (callNow) {\n      func.apply(context, args);\n    }\n  }\n\n  debounceFunc.cancel = function cancel() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounceFunc;\n}\nvar warned = {};\nexport function warningOnce(condition, format, args) {\n  if (!warned[format]) {\n    warning(condition, format, args);\n    warned[format] = !condition;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}