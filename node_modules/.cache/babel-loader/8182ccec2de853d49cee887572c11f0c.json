{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport hoistStatics from 'hoist-non-react-statics';\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'WrappedComponent';\n}\n\nexport function argumentContainer(Container, WrappedComponent) {\n  /* eslint no-param-reassign:0 */\n  Container.displayName = 'Form(' + getDisplayName(WrappedComponent) + ')';\n  Container.WrappedComponent = WrappedComponent;\n  return hoistStatics(Container, WrappedComponent);\n}\nexport function getValueFromEvent(e) {\n  // support custom element\n  if (!e || !e.target) {\n    return e;\n  }\n\n  var target = e.target;\n  return target.type === 'checkbox' ? target.checked : target.value;\n}\nexport function getErrorStrs(errors) {\n  if (errors) {\n    return errors.map(function (e) {\n      if (e && e.message) {\n        return e.message;\n      }\n\n      return e;\n    });\n  }\n\n  return errors;\n}\nexport function isEmptyObject(obj) {\n  return Object.keys(obj).length === 0;\n}\nexport function flattenArray(arr) {\n  return Array.prototype.concat.apply([], arr);\n}\nexport function mirror(obj) {\n  return obj;\n}\nexport function hasRules(validate) {\n  if (validate) {\n    return validate.some(function (item) {\n      return !!item.rules && item.rules.length;\n    });\n  }\n\n  return false;\n}\nexport function startsWith(str, prefix) {\n  return str.lastIndexOf(prefix, 0) === 0;\n}\nexport function getParams(ns, opt, cb) {\n  var names = ns;\n  var callback = cb;\n  var options = opt;\n\n  if (cb === undefined) {\n    if (typeof names === 'function') {\n      callback = names;\n      options = {};\n      names = undefined;\n    } else if (Array.isArray(ns)) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      } else {\n        options = options || {};\n      }\n    } else {\n      callback = options;\n      options = names || {};\n      names = undefined;\n    }\n  }\n\n  return {\n    names: names,\n    callback: callback,\n    options: options\n  };\n}\nvar NAME_KEY_SEP = '.';\nvar NAME_INDEX_OPEN_SEP = '[';\nexport function getNameIfNested(str) {\n  var keyIndex = str.indexOf(NAME_KEY_SEP);\n  var arrayIndex = str.indexOf(NAME_INDEX_OPEN_SEP);\n  var index = void 0;\n\n  if (keyIndex === -1 && arrayIndex === -1) {\n    return {\n      name: str\n    };\n  } else if (keyIndex === -1) {\n    index = arrayIndex;\n  } else if (arrayIndex === -1) {\n    index = keyIndex;\n  } else {\n    index = Math.min(keyIndex, arrayIndex);\n  }\n\n  return {\n    name: str.slice(0, index),\n    isNested: true\n  };\n}\nexport function flatFieldNames(names) {\n  var ret = {};\n  names.forEach(function (n) {\n    ret[getNameIfNested(n).name] = 1;\n  });\n  return Object.keys(ret);\n}\nexport function clearVirtualField(name, fields, fieldsMeta) {\n  if (fieldsMeta[name] && fieldsMeta[name].virtual) {\n    /* eslint no-loop-func:0 */\n    Object.keys(fields).forEach(function (ok) {\n      if (getNameIfNested(ok).name === name) {\n        delete fields[ok];\n      }\n    });\n  }\n}\nexport function getVirtualPaths(fieldsMeta) {\n  var virtualPaths = {};\n  Object.keys(fieldsMeta).forEach(function (name) {\n    var leadingName = fieldsMeta[name].leadingName;\n\n    if (leadingName && fieldsMeta[leadingName].virtual) {\n      if (leadingName in virtualPaths) {\n        virtualPaths[leadingName].push(name);\n      } else {\n        virtualPaths[leadingName] = [name];\n      }\n    }\n  });\n  return virtualPaths;\n}\nexport function normalizeValidateRules(validate, rules, validateTrigger) {\n  var validateRules = validate.map(function (item) {\n    var newItem = _extends({}, item, {\n      trigger: item.trigger || []\n    });\n\n    if (typeof newItem.trigger === 'string') {\n      newItem.trigger = [newItem.trigger];\n    }\n\n    return newItem;\n  });\n\n  if (rules) {\n    validateRules.push({\n      trigger: validateTrigger ? [].concat(validateTrigger) : [],\n      rules: rules\n    });\n  }\n\n  return validateRules;\n}","map":null,"metadata":{},"sourceType":"module"}