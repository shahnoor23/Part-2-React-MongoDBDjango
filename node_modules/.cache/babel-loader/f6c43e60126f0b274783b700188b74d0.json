{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Animate from 'rc-animate';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport Icon from '../icon';\nimport CheckableTag from './CheckableTag';\n\nvar Tag = function (_React$Component) {\n  _inherits(Tag, _React$Component);\n\n  function Tag(props) {\n    _classCallCheck(this, Tag);\n\n    var _this = _possibleConstructorReturn(this, (Tag.__proto__ || Object.getPrototypeOf(Tag)).call(this, props));\n\n    _this.close = function (e) {\n      var onClose = _this.props.onClose;\n\n      if (onClose) {\n        onClose(e);\n      }\n\n      if (e.defaultPrevented) {\n        return;\n      }\n\n      var dom = ReactDOM.findDOMNode(_this);\n      dom.style.width = dom.getBoundingClientRect().width + 'px'; // It's Magic Code, don't know why\n\n      dom.style.width = dom.getBoundingClientRect().width + 'px';\n\n      _this.setState({\n        closing: true\n      });\n    };\n\n    _this.animationEnd = function (_, existed) {\n      if (!existed && !_this.state.closed) {\n        _this.setState({\n          closed: true,\n          closing: false\n        });\n\n        var afterClose = _this.props.afterClose;\n\n        if (afterClose) {\n          afterClose();\n        }\n      }\n    };\n\n    _this.state = {\n      closing: false,\n      closed: false\n    };\n    return _this;\n  }\n\n  _createClass(Tag, [{\n    key: 'isPresetColor',\n    value: function isPresetColor(color) {\n      if (!color) {\n        return false;\n      }\n\n      return /^(pink|red|yellow|orange|cyan|green|blue|purple)(-inverse)?$/.test(color);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _classNames;\n\n      var _a = this.props,\n          prefixCls = _a.prefixCls,\n          closable = _a.closable,\n          color = _a.color,\n          className = _a.className,\n          children = _a.children,\n          style = _a.style,\n          otherProps = __rest(_a, [\"prefixCls\", \"closable\", \"color\", \"className\", \"children\", \"style\"]);\n\n      var closeIcon = closable ? React.createElement(Icon, {\n        type: 'cross',\n        onClick: this.close\n      }) : '';\n      var isPresetColor = this.isPresetColor(color);\n      var classString = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, prefixCls + '-' + color, isPresetColor), _defineProperty(_classNames, prefixCls + '-has-color', color && !isPresetColor), _defineProperty(_classNames, prefixCls + '-close', this.state.closing), _classNames), className); // fix https://fb.me/react-unknown-prop\n\n      var divProps = omit(otherProps, ['onClose', 'afterClose']);\n\n      var tagStyle = _extends({\n        backgroundColor: color && !isPresetColor ? color : null\n      }, style);\n\n      var tag = this.state.closed ? null : React.createElement('div', _extends({\n        'data-show': !this.state.closing\n      }, divProps, {\n        className: classString,\n        style: tagStyle\n      }), React.createElement('span', {\n        className: prefixCls + '-text'\n      }, children), closeIcon);\n      return React.createElement(Animate, {\n        component: '',\n        showProp: 'data-show',\n        transitionName: prefixCls + '-zoom',\n        transitionAppear: true,\n        onEnd: this.animationEnd\n      }, tag);\n    }\n  }]);\n\n  return Tag;\n}(React.Component);\n\nexport default Tag;\nTag.CheckableTag = CheckableTag;\nTag.defaultProps = {\n  prefixCls: 'ant-tag',\n  closable: false\n};","map":null,"metadata":{},"sourceType":"module"}