{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport VirtualScroll from './VirtualScroll';\nimport { Navigation } from './Navigation';\nimport { scrollToItem, areSame } from './utils';\nimport { guid } from '@progress/kendo-react-common';\n/**\n * @hidden\n */\n\nvar DropDownBase =\n/** @class */\nfunction () {\n  function DropDownBase(component) {\n    var _this = this;\n\n    this.vs = new VirtualScroll();\n    this.navigation = new Navigation();\n\n    this.handleItemClick = function (index, event) {\n      var state = _this.initState();\n\n      state.syntheticEvent = event;\n\n      _this.component.handleItemSelect(index, state);\n\n      _this.togglePopup(state);\n\n      _this.applyState(state);\n    };\n\n    this.handleFocus = function (event) {\n      if (!_this.component.state.focused) {\n        var state = _this.initState();\n\n        state.data.focused = true;\n        state.events.push({\n          type: 'onFocus'\n        });\n        state.syntheticEvent = event;\n\n        _this.applyState(state);\n      }\n    };\n\n    this.filterChanged = function (text, state) {\n      var _a = _this.component.props,\n          textField = _a.textField,\n          filterable = _a.filterable;\n\n      if (filterable) {\n        state.events.push({\n          type: 'onFilterChange',\n          filter: {\n            field: textField,\n            operator: 'contains',\n            ignoreCase: true,\n            value: text\n          }\n        });\n      }\n    };\n\n    this.togglePopup = function (state) {\n      var props = _this.component.props;\n      var opened = props.opened !== undefined ? props.opened : _this.component.state.opened;\n\n      if (props.opened === undefined) {\n        state.data.opened = !opened;\n      }\n\n      if (opened) {\n        state.events.push({\n          type: 'onClose'\n        });\n      } else {\n        state.events.push({\n          type: 'onOpen'\n        });\n\n        _this.calculatePopupWidth();\n      }\n    };\n\n    this.pageChange = function (page, syntheticEvent) {\n      var state = _this.initState();\n\n      state.syntheticEvent = syntheticEvent;\n\n      _this.triggerOnPageChange(state, page.skip, page.take);\n\n      _this.applyState(state);\n    };\n\n    this.scrollToVirtualItem = function (virtual, selectedItemIndex) {\n      var vs = _this.vs;\n      vs.enabled = false;\n\n      if (virtual.skip === 0) {\n        vs.reset();\n      } else if (virtual.skip + virtual.pageSize === virtual.total) {\n        vs.scrollToEnd();\n      } else {\n        var scrollTop = vs.translate;\n\n        if (scrollTop === 0) {\n          vs.calcScrollElementHeight();\n          scrollTop = vs.itemHeight * virtual.skip;\n          vs.translateTo(scrollTop - vs.itemHeight);\n        }\n\n        if (vs.container) {\n          vs.container.scrollTop = scrollTop;\n        }\n\n        _this.scrollToItem(selectedItemIndex, true);\n      }\n\n      setTimeout(function () {\n        return vs.enabled = true;\n      }, 10);\n    }; // Common rendering\n\n\n    this.renderScrollWrapper = function (children) {\n      var popupSettings = _this.getPopupSettings();\n\n      var vs = _this.vs;\n      return vs.enabled ? React.createElement(\"div\", {\n        onScroll: vs.scrollHandler,\n        ref: vs.scrollerRef,\n        style: {\n          height: popupSettings.height,\n          overflowY: 'scroll'\n        }\n      }, children) : children;\n    };\n\n    this.renderScrollElement = function () {\n      var vs = _this.vs;\n      return vs.enabled && React.createElement(\"div\", {\n        ref: function ref(element) {\n          return vs.scrollElement = element;\n        },\n        key: 'scrollElementKey'\n      });\n    };\n\n    this.listBoxId = guid();\n    this.guid = guid();\n    this.component = component;\n    this.vs.PageChange = this.pageChange;\n  }\n\n  DropDownBase.prototype.didMount = function () {\n    var props = this.component.props;\n    var popupSettings = props.popupSettings || {};\n    var style = props.style || {};\n    var popupWidth = popupSettings.width;\n    var shouldUpdate = props.opened === true;\n\n    if (popupWidth === undefined) {\n      this.calculatePopupWidth();\n    }\n\n    if (props.dir === undefined && style.direction === undefined) {\n      this.calculateDir();\n      shouldUpdate = true;\n    }\n\n    if (shouldUpdate) {\n      this.component.forceUpdate();\n    }\n  };\n\n  DropDownBase.prototype.calculateDir = function () {\n    if (this.component.element) {\n      this.dirCalculated = window.getComputedStyle(this.component.element).direction || undefined;\n    }\n  };\n\n  DropDownBase.prototype.calculatePopupWidth = function () {\n    if (this.wrapper) {\n      this.popupWidth = this.wrapper.offsetWidth + 'px';\n    }\n  };\n\n  DropDownBase.prototype.scrollToItem = function (itemIndex, vsEnabled) {\n    var list = this.list || this.vs.list;\n    var item = list ? list.children[0] : undefined;\n\n    if (item && itemIndex >= 0) {\n      var vs = this.vs;\n      var scrollElement = vs.container || list.parentNode;\n      var virtualScroll = vsEnabled !== undefined ? vsEnabled : vs.enabled;\n      scrollToItem(scrollElement, item.offsetHeight, itemIndex, vs.translate, virtualScroll);\n    }\n  };\n\n  DropDownBase.prototype.initState = function () {\n    var state = {\n      data: {},\n      events: [],\n      syntheticEvent: undefined\n    };\n    return state;\n  };\n\n  DropDownBase.prototype.applyState = function (state) {\n    var _this = this;\n\n    if (Object.keys(state.data).length > 0) {\n      this.component.setState(state.data);\n    }\n\n    var eventArgs = {\n      syntheticEvent: state.syntheticEvent,\n      nativeEvent: state.syntheticEvent ? state.syntheticEvent.nativeEvent : undefined,\n      target: this.component,\n      value: this.component.value\n    };\n    state.events.forEach(function (eventData) {\n      var type = eventData.type;\n      delete eventData.type;\n      var handler = _this.component.props[type];\n\n      if (handler) {\n        handler.call(undefined, __assign({}, eventArgs, eventData));\n      }\n    });\n  };\n\n  DropDownBase.prototype.triggerOnPageChange = function (state, skip, take) {\n    var virtual = this.component.props.virtual;\n\n    if (virtual) {\n      var newSkip = Math.min(Math.max(0, skip), Math.max(0, virtual.total - take));\n\n      if (newSkip !== virtual.skip) {\n        state.events.push({\n          type: 'onPageChange',\n          page: {\n            skip: newSkip,\n            take: take\n          }\n        });\n      }\n    }\n  };\n\n  DropDownBase.prototype.triggerPageChangeCornerItems = function (item, state) {\n    var props = this.component.props;\n    var _a = props.data,\n        data = _a === void 0 ? [] : _a,\n        dataItemKey = props.dataItemKey,\n        virtual = props.virtual;\n    var opened = props.opened !== undefined ? props.opened : this.component.state.opened;\n\n    if (item && virtual && this.vs.enabled) {\n      if (virtual.skip > 0 && areSame(item, data[0], dataItemKey)) {\n        this.triggerOnPageChange(state, virtual.skip - 1, virtual.pageSize);\n      } else if (!opened && virtual.skip + virtual.pageSize < virtual.total && areSame(item, data[data.length - 1], dataItemKey)) {\n        this.triggerOnPageChange(state, virtual.skip + 1, virtual.pageSize);\n      }\n    }\n  };\n\n  DropDownBase.prototype.getPopupSettings = function () {\n    return Object.assign({}, DropDownBase.defaultProps.popupSettings, this.component.props.popupSettings);\n  };\n\n  DropDownBase.basicPropTypes = {\n    opened: PropTypes.bool,\n    disabled: PropTypes.bool,\n    dir: PropTypes.string,\n    tabIndex: PropTypes.number,\n    accessKey: PropTypes.string,\n    data: PropTypes.array,\n    textField: PropTypes.string,\n    className: PropTypes.string,\n    label: PropTypes.string,\n    loading: PropTypes.bool,\n    popupSettings: PropTypes.shape({\n      animate: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({\n        openDuration: PropTypes.number,\n        closeDuration: PropTypes.number\n      })]),\n      width: PropTypes.string,\n      height: PropTypes.string\n    }),\n    onOpen: PropTypes.func,\n    onClose: PropTypes.func,\n    onFocus: PropTypes.func,\n    onBlur: PropTypes.func,\n    onChange: PropTypes.func,\n    itemRender: PropTypes.func,\n    listNoDataRender: PropTypes.func,\n    focusedItemIndex: PropTypes.func,\n    header: PropTypes.node,\n    footer: PropTypes.node\n  };\n  DropDownBase.propTypes = __assign({}, DropDownBase.basicPropTypes, {\n    value: PropTypes.any,\n    defaultValue: PropTypes.any,\n    filterable: PropTypes.bool,\n    filter: PropTypes.string,\n    virtual: PropTypes.shape({\n      pageSize: PropTypes.number.isRequired,\n      skip: PropTypes.number.isRequired,\n      total: PropTypes.number.isRequired\n    }),\n    onFilterChange: PropTypes.func,\n    onPageChange: PropTypes.func\n  });\n  DropDownBase.defaultProps = {\n    popupSettings: {\n      animate: true,\n      height: '200px'\n    },\n    required: false,\n    validityStyles: true\n  };\n  return DropDownBase;\n}();\n\nexport default DropDownBase;","map":null,"metadata":{},"sourceType":"module"}