{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport TimePickerPanel from 'rc-time-picker/es/Panel';\nimport classNames from 'classnames';\nimport { generateShowHourMinuteSecond } from '../time-picker';\nimport warning from '../_util/warning';\nimport { getComponentLocale } from '../_util/getLocale';\n\nfunction getColumns(_ref) {\n  var showHour = _ref.showHour,\n      showMinute = _ref.showMinute,\n      showSecond = _ref.showSecond,\n      use12Hours = _ref.use12Hours;\n  var column = 0;\n\n  if (showHour) {\n    column += 1;\n  }\n\n  if (showMinute) {\n    column += 1;\n  }\n\n  if (showSecond) {\n    column += 1;\n  }\n\n  if (use12Hours) {\n    column += 1;\n  }\n\n  return column;\n}\n\nexport default function wrapPicker(Picker, defaultFormat) {\n  return _a = function (_React$Component) {\n    _inherits(PickerWrapper, _React$Component);\n\n    function PickerWrapper() {\n      _classCallCheck(this, PickerWrapper);\n\n      var _this = _possibleConstructorReturn(this, (PickerWrapper.__proto__ || Object.getPrototypeOf(PickerWrapper)).apply(this, arguments));\n\n      _this.handleOpenChange = function (open) {\n        var _this$props = _this.props,\n            onOpenChange = _this$props.onOpenChange,\n            toggleOpen = _this$props.toggleOpen;\n        onOpenChange(open);\n\n        if (toggleOpen) {\n          warning(false, '`toggleOpen` is deprecated and will be removed in the future, ' + 'please use `onOpenChange` instead, see: https://u.ant.design/date-picker-on-open-change');\n          toggleOpen({\n            open: open\n          });\n        }\n      };\n\n      return _this;\n    }\n\n    _createClass(PickerWrapper, [{\n      key: 'render',\n      value: function render() {\n        var _classNames2;\n\n        var props = this.props;\n        var prefixCls = props.prefixCls,\n            inputPrefixCls = props.inputPrefixCls;\n        var pickerClass = classNames(_defineProperty({}, prefixCls + '-picker', true));\n        var pickerInputClass = classNames(prefixCls + '-picker-input', inputPrefixCls, (_classNames2 = {}, _defineProperty(_classNames2, inputPrefixCls + '-lg', props.size === 'large'), _defineProperty(_classNames2, inputPrefixCls + '-sm', props.size === 'small'), _defineProperty(_classNames2, inputPrefixCls + '-disabled', props.disabled), _classNames2));\n        var locale = getComponentLocale(props, this.context, 'DatePicker', function () {\n          return require('./locale/zh_CN');\n        });\n        var timeFormat = props.showTime && props.showTime.format || 'HH:mm:ss';\n\n        var rcTimePickerProps = _extends({}, generateShowHourMinuteSecond(timeFormat), {\n          format: timeFormat,\n          use12Hours: props.showTime && props.showTime.use12Hours\n        });\n\n        var columns = getColumns(rcTimePickerProps);\n        var timePickerCls = prefixCls + '-time-picker-column-' + columns;\n        var timePicker = props.showTime ? React.createElement(TimePickerPanel, _extends({}, rcTimePickerProps, props.showTime, {\n          prefixCls: prefixCls + '-time-picker',\n          className: timePickerCls,\n          placeholder: locale.timePickerLocale.placeholder,\n          transitionName: 'slide-up'\n        })) : null;\n        return React.createElement(Picker, _extends({}, props, {\n          pickerClass: pickerClass,\n          pickerInputClass: pickerInputClass,\n          locale: locale,\n          timePicker: timePicker,\n          onOpenChange: this.handleOpenChange\n        }));\n      }\n    }]);\n\n    return PickerWrapper;\n  }(React.Component), _a.contextTypes = {\n    antLocale: PropTypes.object\n  }, _a.defaultProps = {\n    format: defaultFormat || 'YYYY-MM-DD',\n    transitionName: 'slide-up',\n    popupStyle: {},\n    onChange: function onChange() {},\n    onOk: function onOk() {},\n    onOpenChange: function onOpenChange() {},\n    locale: {},\n    prefixCls: 'ant-calendar',\n    inputPrefixCls: 'ant-input'\n  }, _a;\n\n  var _a;\n}","map":null,"metadata":{},"sourceType":"module"}