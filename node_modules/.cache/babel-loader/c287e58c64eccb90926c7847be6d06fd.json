{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport SearchBar from './../common/SearchBar';\nimport ListContainer from './../common/ListContainer';\nimport List from './../common/List';\nimport DropDownBase from '../common/DropDownBase';\nimport { itemIndexStartsWith, getItemValue, areSame, getFocusedItem } from '../common/utils';\nimport { guid, Keys, classNames, FloatingLabel } from '@progress/kendo-react-common';\nvar VALIDATION_MESSAGE = 'Please enter a valid value!';\n/**\n * Represents the [KendoReact AutoComplete component]({% slug overview_autocomplete %}).\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *    autocomplete = null;\n *    render() {\n *       return (\n *          <div>\n *              <AutoComplete\n *                  data={[ \"Albania\", \"Andorra\", \"Austria\", \"Belarus\" ]}\n *                  ref={component => this.autocomplete = component}\n *              />\n *              <button onClick={() => alert(this.autocomplete.value)}>alert value</button>\n *          </div>\n *       );\n *    }\n * }\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nvar AutoComplete =\n/** @class */\nfunction (_super) {\n  __extends(AutoComplete, _super);\n\n  function AutoComplete() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * @hidden\n     */\n\n\n    _this.state = {};\n    _this.base = new DropDownBase(_this);\n    _this._inputId = guid();\n    _this._suggested = '';\n    /**\n     * @hidden\n     */\n\n    _this.handleItemSelect = function (index, state) {\n      var _a = _this.props.data,\n          data = _a === void 0 ? [] : _a;\n      var newText = getItemValue(data[index], _this.props.textField);\n\n      _this.triggerOnChange(newText, state);\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.itemFocus = function (index, state) {\n      var _a = _this.props,\n          _b = _a.data,\n          data = _b === void 0 ? [] : _b,\n          textField = _a.textField;\n      var focusedItem = data[index];\n\n      if (!areSame(_this.state.focusedItem, focusedItem, textField)) {\n        state.data.focusedItem = focusedItem;\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.togglePopup = function (state) {\n      _this.base.togglePopup(state);\n    };\n\n    _this.setValidity = function () {\n      if (_this._input && _this._input.setCustomValidity) {\n        _this._input.setCustomValidity(_this.validity.valid ? '' : _this.props.validationMessage || VALIDATION_MESSAGE);\n      }\n    };\n\n    _this.handleItemClick = function (index, event) {\n      _this.base.handleItemClick(index, event);\n\n      _this._valueDuringOnChange = undefined;\n    };\n\n    _this.onChangeHandler = function (event) {\n      var base = _this.base;\n      var state = base.initState();\n      var input = event.currentTarget;\n      var value = input.value;\n      var selectionAtEnd = input.selectionEnd === value.length;\n      state.syntheticEvent = event;\n      var prevSuggestion = _this._suggested;\n      var prevValue = _this.value;\n      var prevUserInput = prevValue && prevValue.substring(0, prevValue.length - prevSuggestion.length);\n      var deletedSuggestion = prevUserInput && prevUserInput === value;\n      var deleting = prevUserInput && prevUserInput.length > value.length;\n      var suggest = _this.props.suggest;\n      var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;\n\n      if (suggest !== undefined && suggest !== false) {\n        if (deletedSuggestion || deleting || !selectionAtEnd) {\n          _this._suggested = '';\n        } else {\n          _this.suggestValue(value);\n        }\n\n        var newValue = value + _this._suggested;\n        var suggestion = {\n          userInput: value,\n          value: _this._suggested\n        };\n\n        _this.triggerOnChange(newValue, state, {\n          suggestion: suggestion\n        });\n      } else {\n        _this._suggested = '';\n\n        _this.triggerOnChange(value, state);\n      }\n\n      if (!opened && value || opened && !value) {\n        _this.togglePopup(state);\n      }\n\n      state.data.focusedItem = undefined;\n\n      _this.applyState(state);\n    };\n\n    _this.clearButtonClick = function (event) {\n      var base = _this.base;\n      var state = base.initState();\n      var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;\n      state.syntheticEvent = event;\n      var newValue = '';\n      _this._suggested = '';\n\n      _this.triggerOnChange(newValue, state);\n\n      if (_this.state.focusedItem !== undefined) {\n        state.data.focusedItem = undefined;\n      }\n\n      if (opened) {\n        _this.togglePopup(state);\n      }\n\n      _this.applyState(state);\n    };\n\n    _this.onInputKeyDown = function (event) {\n      var keyCode = event.keyCode;\n      var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;\n\n      var state = _this.base.initState();\n\n      state.syntheticEvent = event;\n\n      var preventDefault = function preventDefault() {\n        if (opened) {\n          event.preventDefault();\n        }\n      };\n\n      if (keyCode === Keys.enter || keyCode === Keys.esc) {\n        preventDefault();\n\n        _this.applyInputValue(event.currentTarget.value, state, event.keyCode);\n      } else if (keyCode === Keys.up || keyCode === Keys.down) {\n        preventDefault();\n\n        _this.onNavigate(state, keyCode);\n      }\n    };\n\n    _this.handleBlur = function (event) {\n      if (_this.state.focused) {\n        var state = _this.base.initState();\n\n        state.data.focused = false;\n        state.events.push({\n          type: 'onBlur'\n        });\n        state.syntheticEvent = event;\n\n        _this.applyInputValue(event.currentTarget.value, state);\n      }\n    };\n\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  AutoComplete.prototype.focus = function () {\n    if (this._input) {\n      this._input.focus();\n    }\n  };\n\n  Object.defineProperty(AutoComplete.prototype, \"element\", {\n    /**\n     * @hidden\n     */\n    get: function get() {\n      return this._element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AutoComplete.prototype, \"value\", {\n    /**\n     * The value of the AutoComplete.\n     */\n    get: function get() {\n      if (this._valueDuringOnChange !== undefined) {\n        return this._valueDuringOnChange;\n      } else if (this.props.value !== undefined) {\n        return this.props.value;\n      } else if (this.state.value !== undefined) {\n        return this.state.value;\n      } else if (this.props.defaultValue !== undefined) {\n        return this.props.defaultValue;\n      }\n\n      return '';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AutoComplete.prototype, \"name\", {\n    /**\n     * Gets the `name` property of the AutoComplete.\n     */\n    get: function get() {\n      return this.props.name;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AutoComplete.prototype, \"validity\", {\n    /**\n     * Represents the validity state into which the AutoComplete is set.\n     */\n    get: function get() {\n      // The AutoComplete component is in a invalid state\n      // only if it's required and the value is null!\n      var customError = this.props.validationMessage !== undefined;\n      var isValid = !this.required || this.value !== '';\n      var valid = this.props.valid !== undefined ? this.props.valid : isValid;\n      return {\n        customError: customError,\n        valid: valid,\n        valueMissing: this.value === null\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AutoComplete.prototype, \"validityStyles\", {\n    /**\n     * @hidden\n     */\n    get: function get() {\n      return this.props.validityStyles !== undefined ? this.props.validityStyles : AutoComplete.defaultProps.validityStyles;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AutoComplete.prototype, \"required\", {\n    /**\n     * @hidden\n     */\n    get: function get() {\n      return this.props.required !== undefined ? this.props.required : AutoComplete.defaultProps.required;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  AutoComplete.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var _a = this.props.data,\n        data = _a === void 0 ? [] : _a;\n    var _b = prevProps.data,\n        prevData = _b === void 0 ? [] : _b;\n    var focusedIndex = this.focusedIndex();\n    var focusedItem = data[focusedIndex];\n    var dataChanged = prevData !== data;\n    var focusedItemChanged = focusedItem !== undefined && prevState.focusedItem !== focusedItem;\n    var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;\n    var prevOpened = prevProps.opened !== undefined ? prevProps.opened : prevState.opened;\n    var opening = !prevOpened && opened;\n\n    if (opened && (focusedItemChanged || dataChanged) || opening) {\n      this.base.scrollToItem(focusedIndex);\n    }\n\n    this.setValidity();\n  };\n  /**\n   * @hidden\n   */\n\n\n  AutoComplete.prototype.componentDidMount = function () {\n    this.base.didMount();\n    this.setValidity();\n  };\n  /**\n   * @hidden\n   */\n\n\n  AutoComplete.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        dir = _a.dir,\n        disabled = _a.disabled,\n        label = _a.label,\n        className = _a.className,\n        style = _a.style,\n        loading = _a.loading,\n        suggest = _a.suggest;\n    var isValid = !this.validityStyles || this.validity.valid;\n    var focused = this.state.focused;\n    var base = this.base;\n    var value = this.value;\n    var renderClearButton = !loading && !!value;\n\n    if (typeof suggest === 'string') {\n      this._suggested = suggest;\n    }\n\n    var autoComplete = React.createElement(\"span\", {\n      className: classNames('k-widget k-autocomplete k-header', className, {\n        'k-state-disabled': disabled,\n        'k-state-focused': focused && !disabled,\n        'k-state-invalid': !isValid\n      }),\n      ref: function ref(element) {\n        _this._element = element;\n        base.wrapper = element;\n      },\n      style: !label ? style : __assign({}, style, {\n        width: undefined\n      }),\n      dir: dir\n    }, this.renderSearchBar(renderClearButton, value || ''), loading && React.createElement(\"span\", {\n      className: \"k-icon k-i-loading\"\n    }), this.renderListContainer());\n    return label ? React.createElement(FloatingLabel, {\n      label: label,\n      value: value,\n      valid: isValid,\n      style: {\n        width: style ? style.width : undefined\n      },\n      id: this._inputId,\n      children: autoComplete\n    }) : autoComplete;\n  };\n  /**\n   * @hidden\n   */\n\n\n  AutoComplete.prototype.onNavigate = function (state, keyCode) {\n    var _this = this;\n\n    var typedText = this.value;\n    var _a = this.props,\n        _b = _a.data,\n        data = _b === void 0 ? [] : _b,\n        textField = _a.textField,\n        focusedItemIndex = _a.focusedItemIndex;\n    var focusedIndex = this.state.focusedItem !== undefined ? data.findIndex(function (i) {\n      return areSame(i, _this.state.focusedItem, textField);\n    }) : focusedItemIndex ? focusedItemIndex(data, typedText, textField) : data.indexOf(getFocusedItem(data, typedText, textField));\n    var newFocused = this.base.navigation.navigate({\n      keyCode: keyCode,\n      current: focusedIndex,\n      max: data.length - 1,\n      min: 0\n    });\n\n    if (newFocused !== undefined) {\n      this.itemFocus(newFocused, state);\n    }\n\n    this.applyState(state);\n  };\n  /**\n   * @hidden\n   */\n\n\n  AutoComplete.prototype.applyInputValue = function (value, state, eventKey) {\n    var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;\n    var _a = this.props,\n        _b = _a.data,\n        data = _b === void 0 ? [] : _b,\n        textField = _a.textField;\n    this._suggested = '';\n\n    if (opened && eventKey === Keys.enter) {\n      var newValue = getItemValue(data[this.focusedIndex(value)], textField);\n      this.triggerOnChange(newValue, state);\n    }\n\n    if (opened) {\n      this.togglePopup(state);\n    }\n\n    this.applyState(state);\n  };\n\n  AutoComplete.prototype.renderSearchBar = function (clearButton, value) {\n    var _this = this;\n\n    var base = this.base;\n    var _a = this.props,\n        placeholder = _a.placeholder,\n        tabIndex = _a.tabIndex,\n        disabled = _a.disabled,\n        readonly = _a.readonly;\n    var focused = this.state.focused;\n    var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;\n    return React.createElement(SearchBar, {\n      id: this._inputId,\n      placeholder: placeholder,\n      tabIndex: tabIndex || undefined,\n      accessKey: this.props.accessKey,\n      value: value,\n      suggestedText: this._suggested,\n      focused: focused,\n      name: this.props.name,\n      ref: function ref(searchbar) {\n        return _this._input = searchbar && searchbar.input;\n      },\n      onKeyDown: this.onInputKeyDown,\n      onChange: this.onChangeHandler,\n      onFocus: base.handleFocus,\n      onBlur: this.handleBlur,\n      disabled: disabled,\n      readOnly: readonly,\n      expanded: opened,\n      owns: base.listBoxId,\n      activedescendant: 'option-' + base.guid + '-' + this.focusedIndex(),\n      clearButton: clearButton,\n      clearButtonClick: this.clearButtonClick\n    });\n  };\n\n  AutoComplete.prototype.renderListContainer = function () {\n    var base = this.base;\n    var _a = this.props,\n        dir = _a.dir,\n        header = _a.header,\n        footer = _a.footer;\n    var popupSettings = base.getPopupSettings();\n    var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;\n    var popupWidth = popupSettings.width !== undefined ? popupSettings.width : base.popupWidth;\n    return React.createElement(ListContainer, {\n      onMouseDown: function onMouseDown(e) {\n        return e.preventDefault();\n      },\n      width: popupWidth,\n      popupSettings: {\n        animate: popupSettings.animate,\n        anchor: this.element || undefined,\n        show: opened,\n        className: classNames('k-list-container k-reset', popupSettings.className)\n      },\n      dir: dir !== undefined ? dir : this.base.dirCalculated\n    }, header, this.renderList(), footer);\n  };\n\n  AutoComplete.prototype.renderList = function () {\n    var base = this.base;\n    var popupSettings = base.getPopupSettings();\n    var _a = this.props,\n        textField = _a.textField,\n        _b = _a.data,\n        data = _b === void 0 ? [] : _b,\n        listNoDataRender = _a.listNoDataRender,\n        itemRender = _a.itemRender;\n    var value = this.value;\n    var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;\n    return React.createElement(List, {\n      id: base.listBoxId,\n      show: opened,\n      data: data.slice(),\n      focusedIndex: this.focusedIndex(),\n      value: value,\n      textField: textField,\n      valueField: textField,\n      highlightSelected: false,\n      optionsGuid: base.guid,\n      listRef: function listRef(list) {\n        return base.list = list;\n      },\n      wrapperStyle: {\n        maxHeight: popupSettings.height\n      },\n      wrapperCssClass: \"k-list-scroller\",\n      onClick: this.handleItemClick,\n      itemRender: itemRender,\n      noDataRender: listNoDataRender\n    });\n  };\n\n  AutoComplete.prototype.triggerOnChange = function (newValue, state, eventArgs) {\n    if (this.value === newValue && !eventArgs) {\n      return;\n    }\n\n    state.data.value = newValue;\n    this._valueDuringOnChange = newValue;\n    state.events.push(__assign({\n      type: 'onChange'\n    }, eventArgs || {}));\n  };\n\n  AutoComplete.prototype.applyState = function (state) {\n    this.base.applyState(state);\n    this._valueDuringOnChange = undefined;\n  };\n\n  AutoComplete.prototype.suggestValue = function (value) {\n    this._suggested = '';\n\n    if (value) {\n      var _a = this.props,\n          _b = _a.data,\n          data = _b === void 0 ? [] : _b,\n          textField = _a.textField;\n      var suggestedItem = data[itemIndexStartsWith(data, value, textField)];\n\n      if (suggestedItem) {\n        var suggestedText = getItemValue(suggestedItem, textField);\n\n        if (value.toLowerCase() !== suggestedText.toLowerCase()) {\n          this._suggested = suggestedText.substring(value.length);\n        }\n      }\n    }\n  };\n\n  AutoComplete.prototype.focusedIndex = function (value) {\n    var _this = this;\n\n    var _a = this.props,\n        _b = _a.data,\n        data = _b === void 0 ? [] : _b,\n        textField = _a.textField,\n        focusedItemIndex = _a.focusedItemIndex;\n    var inputValue = value !== undefined ? value : this.value;\n    return this.state.focusedItem !== undefined ? data.findIndex(function (i) {\n      return areSame(i, _this.state.focusedItem, textField);\n    }) : focusedItemIndex ? focusedItemIndex(data, inputValue, textField) : Math.max(0, data.indexOf(getFocusedItem(data, inputValue, textField)));\n  };\n  /**\n   * @hidden\n   */\n\n\n  AutoComplete.propTypes = __assign({}, DropDownBase.basicPropTypes, {\n    suggest: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n    placeholder: PropTypes.string,\n    value: PropTypes.string,\n    defaultValue: PropTypes.string,\n    validationMessage: PropTypes.string,\n    required: PropTypes.bool,\n    readonly: PropTypes.bool\n  });\n  /**\n   * @hidden\n   */\n\n  AutoComplete.defaultProps = __assign({}, DropDownBase.defaultProps);\n  return AutoComplete;\n}(React.Component);\n\nexport default AutoComplete;","map":null,"metadata":{},"sourceType":"module"}