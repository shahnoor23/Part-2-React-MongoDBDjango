{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DEFAULT_INLINE_STYLE = exports.DEFAULT_ELEMENT = exports.EMPTY_SET = undefined;\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports[\"default\"] = GetHTML;\n\nvar _draftJs = require('draft-js');\n\nvar _immutable = require('immutable');\n\nvar _isUnitlessNumber = require('./isUnitlessNumber');\n\nvar _isUnitlessNumber2 = _interopRequireDefault(_isUnitlessNumber);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar EMPTY_SET = exports.EMPTY_SET = (0, _immutable.OrderedSet)();\nvar DEFAULT_ELEMENT = exports.DEFAULT_ELEMENT = 'span';\nvar DEFAULT_INLINE_STYLE = exports.DEFAULT_INLINE_STYLE = _draftJs.DefaultDraftInlineStyle;\n\nfunction encodeContent(text) {\n  return text.split('&').join('&amp;').split('<').join('&lt;').split('>').join('&gt;').split('\\xA0').join('&nbsp;').split('\\n').join('<br >' + '\\n');\n}\n\nfunction encodeAttr(text) {\n  return text.split('&').join('&amp;').split('<').join('&lt;').split('>').join('&gt;').split('\"').join('&quot;');\n}\n\nvar VENDOR_PREFIX = /^(moz|ms|o|webkit)-/;\nvar NUMERIC_STRING = /^\\d+$/;\nvar UPPERCASE_PATTERN = /([A-Z])/g; // Lifted from: https://github.com/facebook/react/blob/master/src/renderers/dom/shared/CSSPropertyOperations.js\n\nfunction processStyleName(name) {\n  return name.replace(UPPERCASE_PATTERN, '-$1').toLowerCase().replace(VENDOR_PREFIX, '-$1-');\n} // Lifted from: https://github.com/facebook/react/blob/master/src/renderers/dom/shared/dangerousStyleValue.js\n\n\nfunction processStyleValue(name, value) {\n  var isNumeric = void 0;\n\n  if (typeof value === 'string') {\n    isNumeric = NUMERIC_STRING.test(value);\n  } else {\n    isNumeric = true;\n    value = String(value);\n  }\n\n  if (!isNumeric || value === '0' || _isUnitlessNumber2[\"default\"][name] === true) {\n    return value;\n  } else {\n    return value + 'px';\n  }\n}\n\nfunction getStyleText(styleObject) {\n  if (!styleObject) {\n    return '';\n  }\n\n  return Object.keys(styleObject).map(function (name) {\n    var styleName = processStyleName(name);\n    var styleValue = processStyleValue(name, styleObject[name]);\n    return styleName + ':' + styleValue;\n  }).join(';');\n}\n\nfunction getEntityContent(contentState, entityKey, content) {\n  if (entityKey) {\n    var entity = contentState.getEntity(entityKey);\n    var entityData = entity.getData();\n\n    if (entityData && entityData[\"export\"]) {\n      return entityData[\"export\"](content, entityData);\n    }\n  }\n\n  return content;\n}\n\nfunction GetHTML(configStore) {\n  return function exportHtml(editorState) {\n    var contentState = editorState.getCurrentContent();\n    var blockMap = contentState.getBlockMap();\n    var customStyleMap = configStore.get('customStyleMap') || {};\n    var customBlockRenderMap = configStore.get('blockRenderMap') || {};\n    var customStyleFn = configStore.get('customStyleFn');\n    var toHTMLList = configStore.get('toHTMLList');\n\n    _extends(customStyleMap, DEFAULT_INLINE_STYLE);\n\n    return blockMap.map(function (block) {\n      var resultText = '<div>';\n      var closeTag = '</div>';\n      var lastPosition = 0;\n      var text = block.getText();\n      var blockType = block.getType();\n      var blockRender = customBlockRenderMap.get(blockType);\n\n      if (blockRender) {\n        var element = typeof blockRender.element === 'function' ? blockRender.elementTag || 'div' : 'div';\n        resultText = '<' + (element || 'div') + ' style=\"' + getStyleText(customBlockRenderMap.get(blockType).style || {}) + '\">';\n        closeTag = '</' + (element || 'div') + '>';\n      }\n\n      var charMetaList = block.getCharacterList();\n      var charEntity = null;\n      var prevCharEntity = null;\n      var ranges = [];\n      var rangeStart = 0;\n\n      for (var i = 0, len = text.length; i < len; i++) {\n        prevCharEntity = charEntity;\n        var meta = charMetaList.get(i);\n        charEntity = meta ? meta.getEntity() : null;\n\n        if (i > 0 && charEntity !== prevCharEntity) {\n          ranges.push([prevCharEntity, getStyleRanges(text.slice(rangeStart, i), charMetaList.slice(rangeStart, i))]);\n          rangeStart = i;\n        }\n      }\n\n      ranges.push([charEntity, getStyleRanges(text.slice(rangeStart), charMetaList.slice(rangeStart))]);\n      ranges.map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            entityKey = _ref2[0],\n            stylePieces = _ref2[1];\n\n        var element = DEFAULT_ELEMENT;\n        var rawContent = stylePieces.map(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 1),\n              text = _ref4[0];\n\n          return text;\n        }).join('');\n        var content = stylePieces.map(function (_ref5) {\n          var _ref6 = _slicedToArray(_ref5, 2),\n              text = _ref6[0],\n              styleSet = _ref6[1];\n\n          var encodedContent = encodeContent(text);\n\n          if (styleSet.size) {\n            var inlineStyle = {};\n            styleSet.forEach(function (item) {\n              if (customStyleMap.hasOwnProperty(item)) {\n                var currentStyle = customStyleMap[item];\n                inlineStyle = _extends(inlineStyle, currentStyle);\n              }\n            });\n            var customedStyle = customStyleFn(styleSet);\n            inlineStyle = _extends(inlineStyle, customedStyle);\n            return '<span style=\"' + getStyleText(inlineStyle) + '\">' + encodedContent + '</span>';\n          }\n\n          return '<span>' + encodedContent + '</span>';\n        }).join('');\n\n        if (entityKey) {\n          var entity = contentState.getEntity(entityKey);\n          var entityData = entity.getData();\n\n          if (entityData && entityData[\"export\"]) {\n            resultText += entityData[\"export\"](content, entityData);\n          } else {\n            var HTMLText = '';\n            toHTMLList.forEach(function (toHTML) {\n              var text = toHTML(rawContent, entity, contentState);\n\n              if (text) {\n                HTMLText = text;\n              }\n            });\n\n            if (HTMLText) {\n              resultText += HTMLText;\n            }\n          }\n        } else {\n          resultText += content;\n        }\n      });\n      resultText += closeTag;\n      return resultText;\n    }).join('\\n');\n  };\n}\n\nfunction getStyleRanges(text, charMetaList) {\n  var charStyle = EMPTY_SET;\n  var prevCharStyle = EMPTY_SET;\n  var ranges = [];\n  var rangeStart = 0;\n\n  for (var i = 0, len = text.length; i < len; i++) {\n    prevCharStyle = charStyle;\n    var meta = charMetaList.get(i);\n    charStyle = meta ? meta.getStyle() : EMPTY_SET;\n\n    if (i > 0 && !(0, _immutable.is)(charStyle, prevCharStyle)) {\n      ranges.push([text.slice(rangeStart, i), prevCharStyle]);\n      rangeStart = i;\n    }\n  }\n\n  ranges.push([text.slice(rangeStart), charStyle]);\n  return ranges;\n}","map":null,"metadata":{},"sourceType":"script"}