{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport MonthCalendar from 'rc-calendar/es/MonthCalendar';\nimport RcDatePicker from 'rc-calendar/es/Picker';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport Icon from '../icon';\nimport { getLocaleCode } from '../_util/getLocale';\nimport warning from '../_util/warning';\nexport default function createPicker(TheCalendar) {\n  return _a = function (_React$Component) {\n    _inherits(CalenderWrapper, _React$Component);\n\n    function CalenderWrapper(props) {\n      _classCallCheck(this, CalenderWrapper);\n\n      var _this = _possibleConstructorReturn(this, (CalenderWrapper.__proto__ || Object.getPrototypeOf(CalenderWrapper)).call(this, props));\n\n      _this.renderFooter = function () {\n        var _this$props = _this.props,\n            prefixCls = _this$props.prefixCls,\n            renderExtraFooter = _this$props.renderExtraFooter;\n        return renderExtraFooter ? React.createElement('div', {\n          className: prefixCls + '-footer-extra'\n        }, renderExtraFooter.apply(undefined, arguments)) : null;\n      };\n\n      _this.clearSelection = function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        _this.handleChange(null);\n      };\n\n      _this.handleChange = function (value) {\n        var props = _this.props;\n\n        if (!('value' in props)) {\n          _this.setState({\n            value: value\n          });\n        }\n\n        props.onChange(value, value && value.format(props.format) || '');\n      };\n\n      var value = props.value || props.defaultValue;\n\n      if (value && !moment.isMoment(value)) {\n        throw new Error('The value/defaultValue of DatePicker or MonthPicker must be ' + 'a moment object after `antd@2.0`, see: https://u.ant.design/date-picker-value');\n      }\n\n      _this.state = {\n        value: value\n      };\n      return _this;\n    }\n\n    _createClass(CalenderWrapper, [{\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(nextProps) {\n        if ('value' in nextProps) {\n          this.setState({\n            value: nextProps.value\n          });\n        }\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _classNames;\n\n        var value = this.state.value;\n        var props = omit(this.props, ['onChange']);\n        var prefixCls = props.prefixCls,\n            locale = props.locale;\n        var placeholder = 'placeholder' in props ? props.placeholder : locale.lang.placeholder;\n        var disabledTime = props.showTime ? props.disabledTime : null;\n        var calendarClassName = classNames((_classNames = {}, _defineProperty(_classNames, prefixCls + '-time', props.showTime), _defineProperty(_classNames, prefixCls + '-month', MonthCalendar === TheCalendar), _classNames));\n        var pickerChangeHandler = {};\n        var calendarHandler = {};\n\n        if (props.showTime) {\n          calendarHandler = {\n            // fix https://github.com/ant-design/ant-design/issues/1902\n            onSelect: this.handleChange\n          };\n        } else {\n          pickerChangeHandler = {\n            onChange: this.handleChange\n          };\n        }\n\n        warning(!('onOK' in props), 'It should be `DatePicker[onOk]` or `MonthPicker[onOk]`, instead of `onOK`!');\n        var calendar = React.createElement(TheCalendar, _extends({}, calendarHandler, {\n          disabledDate: props.disabledDate,\n          disabledTime: disabledTime,\n          locale: locale.lang,\n          timePicker: props.timePicker,\n          defaultValue: props.defaultPickerValue || moment(),\n          dateInputPlaceholder: placeholder,\n          prefixCls: prefixCls,\n          className: calendarClassName,\n          onOk: props.onOk,\n          format: props.format,\n          showToday: props.showToday,\n          monthCellContentRender: props.monthCellContentRender,\n          renderFooter: this.renderFooter\n        })); // default width for showTime\n\n        var pickerStyle = {};\n\n        if (props.showTime) {\n          pickerStyle.width = props.style && props.style.width || 154;\n        }\n\n        var clearIcon = !props.disabled && props.allowClear && value ? React.createElement(Icon, {\n          type: 'cross-circle',\n          className: prefixCls + '-picker-clear',\n          onClick: this.clearSelection\n        }) : null;\n\n        var input = function input(_ref) {\n          var inputValue = _ref.value;\n          return React.createElement('div', null, React.createElement('input', {\n            disabled: props.disabled,\n            readOnly: true,\n            value: inputValue && inputValue.format(props.format) || '',\n            placeholder: placeholder,\n            className: props.pickerInputClass\n          }), clearIcon, React.createElement('span', {\n            className: prefixCls + '-picker-icon'\n          }));\n        };\n\n        var pickerValue = value;\n        var localeCode = getLocaleCode(this.context);\n\n        if (pickerValue && localeCode) {\n          pickerValue.locale(localeCode);\n        }\n\n        var style = _extends({}, props.style, pickerStyle);\n\n        return React.createElement('span', {\n          className: classNames(props.className, props.pickerClass),\n          style: style\n        }, React.createElement(RcDatePicker, _extends({}, props, pickerChangeHandler, {\n          calendar: calendar,\n          value: pickerValue,\n          prefixCls: prefixCls + '-picker-container',\n          style: props.popupStyle\n        }), input));\n      }\n    }]);\n\n    return CalenderWrapper;\n  }(React.Component), _a.contextTypes = {\n    antLocale: PropTypes.object\n  }, _a.defaultProps = {\n    prefixCls: 'ant-calendar',\n    allowClear: true,\n    showToday: true\n  }, _a;\n\n  var _a;\n}","map":null,"metadata":{},"sourceType":"module"}