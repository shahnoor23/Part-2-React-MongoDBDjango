{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport classnames from 'classnames';\nimport Trigger from 'rc-trigger';\nimport Tree, { TreeNode } from 'rc-tree';\nimport { loopAllChildren, flatToHierarchy, getValuePropValue, labelCompatible } from './util';\nimport toArray from 'rc-util/es/Children/toArray';\nvar BUILT_IN_PLACEMENTS = {\n  bottomLeft: {\n    points: ['tl', 'bl'],\n    offset: [0, 4],\n    overflow: {\n      adjustX: 0,\n      adjustY: 1\n    }\n  },\n  topLeft: {\n    points: ['bl', 'tl'],\n    offset: [0, -4],\n    overflow: {\n      adjustX: 0,\n      adjustY: 1\n    }\n  }\n};\n\nvar SelectTrigger = function (_Component) {\n  _inherits(SelectTrigger, _Component);\n\n  function SelectTrigger() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, SelectTrigger);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {\n      _expandedKeys: [],\n      fireOnExpand: false,\n      dropdownWidth: null\n    }, _this.onExpand = function (expandedKeys) {\n      // rerender\n      _this.setState({\n        _expandedKeys: expandedKeys,\n        fireOnExpand: true\n      }, function () {\n        // Fix https://github.com/ant-design/ant-design/issues/5689\n        if (_this.refs.trigger && _this.refs.trigger.forcePopupAlign) {\n          _this.refs.trigger.forcePopupAlign();\n        }\n      });\n    }, _this.highlightTreeNode = function (treeNode) {\n      var props = _this.props;\n      var filterVal = treeNode.props[labelCompatible(props.treeNodeFilterProp)];\n\n      if (typeof filterVal === 'string') {\n        return props.inputValue && filterVal.indexOf(props.inputValue) > -1;\n      }\n\n      return false;\n    }, _this.filterTreeNode = function (input, child) {\n      if (!input) {\n        return true;\n      }\n\n      var filterTreeNode = _this.props.filterTreeNode;\n\n      if (!filterTreeNode) {\n        return true;\n      }\n\n      if (child.props.disabled) {\n        return false;\n      }\n\n      return filterTreeNode.call(_this, input, child);\n    }, _this.savePopupElement = function (ele) {\n      _this.popupEle = ele;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  SelectTrigger.prototype.componentDidMount = function componentDidMount() {\n    this.setDropdownWidth();\n  };\n\n  SelectTrigger.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (nextProps.inputValue && nextProps.inputValue !== this.props.inputValue) {\n      // set autoExpandParent to true\n      this.setState({\n        _expandedKeys: [],\n        fireOnExpand: false\n      });\n    }\n  };\n\n  SelectTrigger.prototype.componentDidUpdate = function componentDidUpdate() {\n    this.setDropdownWidth();\n  };\n\n  SelectTrigger.prototype.setDropdownWidth = function setDropdownWidth() {\n    var width = ReactDOM.findDOMNode(this).offsetWidth;\n\n    if (width !== this.state.dropdownWidth) {\n      this.setState({\n        dropdownWidth: width\n      });\n    }\n  };\n\n  SelectTrigger.prototype.getPopupEleRefs = function getPopupEleRefs() {\n    return this.popupEle && this.popupEle.refs;\n  };\n\n  SelectTrigger.prototype.getPopupDOMNode = function getPopupDOMNode() {\n    return this.refs.trigger.getPopupDomNode();\n  };\n\n  SelectTrigger.prototype.getDropdownTransitionName = function getDropdownTransitionName() {\n    var props = this.props;\n    var transitionName = props.transitionName;\n\n    if (!transitionName && props.animation) {\n      transitionName = this.getDropdownPrefixCls() + '-' + props.animation;\n    }\n\n    return transitionName;\n  };\n\n  SelectTrigger.prototype.getDropdownPrefixCls = function getDropdownPrefixCls() {\n    return this.props.prefixCls + '-dropdown';\n  };\n\n  SelectTrigger.prototype.processTreeNode = function processTreeNode(treeNodes) {\n    var _this2 = this;\n\n    var filterPoss = [];\n    this._expandedKeys = [];\n    loopAllChildren(treeNodes, function (child, index, pos) {\n      if (_this2.filterTreeNode(_this2.props.inputValue, child)) {\n        filterPoss.push(pos);\n\n        _this2._expandedKeys.push(child.key);\n      }\n    }); // Include the filtered nodes's ancestral nodes.\n\n    var processedPoss = [];\n    filterPoss.forEach(function (pos) {\n      var arr = pos.split('-');\n      arr.reduce(function (pre, cur) {\n        var res = pre + '-' + cur;\n\n        if (processedPoss.indexOf(res) < 0) {\n          processedPoss.push(res);\n        }\n\n        return res;\n      });\n    });\n    var filterNodesPositions = [];\n    loopAllChildren(treeNodes, function (child, index, pos) {\n      if (processedPoss.indexOf(pos) > -1) {\n        filterNodesPositions.push({\n          node: child,\n          pos: pos\n        });\n      }\n    });\n    var hierarchyNodes = flatToHierarchy(filterNodesPositions);\n\n    var recursive = function recursive(children) {\n      return children.map(function (child) {\n        if (child.children) {\n          return React.cloneElement(child.node, {}, recursive(child.children));\n        }\n\n        return child.node;\n      });\n    };\n\n    return recursive(hierarchyNodes);\n  };\n\n  SelectTrigger.prototype.renderTree = function renderTree(keys, halfCheckedKeys, newTreeNodes, multiple) {\n    var props = this.props;\n    var trProps = {\n      multiple: multiple,\n      prefixCls: props.prefixCls + '-tree',\n      showIcon: props.treeIcon,\n      showLine: props.treeLine,\n      defaultExpandAll: props.treeDefaultExpandAll,\n      defaultExpandedKeys: props.treeDefaultExpandedKeys,\n      filterTreeNode: this.highlightTreeNode\n    };\n\n    if (props.treeCheckable) {\n      trProps.selectable = false;\n      trProps.checkable = props.treeCheckable;\n      trProps.onCheck = props.onSelect;\n      trProps.checkStrictly = props.treeCheckStrictly;\n\n      if (props.inputValue) {\n        // enable checkStrictly when search tree.\n        trProps.checkStrictly = true;\n      } else {\n        trProps._treeNodesStates = props._treeNodesStates;\n      }\n\n      if (trProps.treeCheckStrictly && halfCheckedKeys.length) {\n        trProps.checkedKeys = {\n          checked: keys,\n          halfChecked: halfCheckedKeys\n        };\n      } else {\n        trProps.checkedKeys = keys;\n      }\n    } else {\n      trProps.selectedKeys = keys;\n      trProps.onSelect = props.onSelect;\n    } // expand keys\n\n\n    if (!trProps.defaultExpandAll && !trProps.defaultExpandedKeys && !props.loadData) {\n      trProps.expandedKeys = keys;\n    }\n\n    trProps.autoExpandParent = true;\n    trProps.onExpand = this.onExpand;\n\n    if (this._expandedKeys && this._expandedKeys.length) {\n      trProps.expandedKeys = this._expandedKeys;\n    }\n\n    if (this.state.fireOnExpand) {\n      trProps.expandedKeys = this.state._expandedKeys;\n      trProps.autoExpandParent = false;\n    } // async loadData\n\n\n    if (props.loadData) {\n      trProps.loadData = props.loadData;\n    }\n\n    return React.createElement(Tree, _extends({\n      ref: this.savePopupElement\n    }, trProps), newTreeNodes);\n  };\n\n  SelectTrigger.prototype.render = function render() {\n    var _popupClassName;\n\n    var props = this.props;\n    var multiple = props.multiple;\n    var dropdownPrefixCls = this.getDropdownPrefixCls();\n    var popupClassName = (_popupClassName = {}, _popupClassName[props.dropdownClassName] = !!props.dropdownClassName, _popupClassName[dropdownPrefixCls + '--' + (multiple ? 'multiple' : 'single')] = 1, _popupClassName);\n    var visible = props.visible;\n    var search = multiple || props.combobox || !props.showSearch ? null : React.createElement('span', {\n      className: dropdownPrefixCls + '-search'\n    }, props.inputElement);\n\n    var recursive = function recursive(children) {\n      // Note: if use `React.Children.map`, the node's key will be modified.\n      return toArray(children).map(function handler(child) {\n        // eslint-disable-line\n        if (!child) {\n          return null;\n        }\n\n        if (child && child.props.children) {\n          // null or String has no Prop\n          return React.createElement(TreeNode, _extends({}, child.props, {\n            key: child.key\n          }), recursive(child.props.children));\n        }\n\n        return React.createElement(TreeNode, _extends({}, child.props, {\n          key: child.key\n        }));\n      });\n    }; // const s = Date.now();\n\n\n    var treeNodes = void 0;\n\n    if (props._cachetreeData && this.treeNodes) {\n      treeNodes = this.treeNodes;\n    } else {\n      treeNodes = recursive(props.treeData || props.treeNodes);\n      this.treeNodes = treeNodes;\n    } // console.log(Date.now()-s);\n\n\n    if (props.inputValue) {\n      treeNodes = this.processTreeNode(treeNodes);\n    }\n\n    var keys = [];\n    var halfCheckedKeys = [];\n    loopAllChildren(treeNodes, function (child) {\n      if (props.value.some(function (item) {\n        return item.value === getValuePropValue(child);\n      })) {\n        keys.push(child.key);\n      }\n\n      if (props.halfCheckedValues && props.halfCheckedValues.some(function (item) {\n        return item.value === getValuePropValue(child);\n      })) {\n        halfCheckedKeys.push(child.key);\n      }\n    });\n    var notFoundContent = void 0;\n\n    if (!treeNodes.length) {\n      if (props.notFoundContent) {\n        notFoundContent = React.createElement('span', {\n          className: props.prefixCls + '-not-found'\n        }, props.notFoundContent);\n      } else if (!search) {\n        visible = false;\n      }\n    }\n\n    var popupElement = React.createElement('div', null, search, notFoundContent || this.renderTree(keys, halfCheckedKeys, treeNodes, multiple));\n\n    var popupStyle = _extends({}, props.dropdownStyle);\n\n    var widthProp = props.dropdownMatchSelectWidth ? 'width' : 'minWidth';\n\n    if (this.state.dropdownWidth) {\n      popupStyle[widthProp] = this.state.dropdownWidth + 'px';\n    }\n\n    return React.createElement(Trigger, {\n      action: props.disabled ? [] : ['click'],\n      ref: 'trigger',\n      popupPlacement: 'bottomLeft',\n      builtinPlacements: BUILT_IN_PLACEMENTS,\n      popupAlign: props.dropdownPopupAlign,\n      prefixCls: dropdownPrefixCls,\n      popupTransitionName: this.getDropdownTransitionName(),\n      onPopupVisibleChange: props.onDropdownVisibleChange,\n      popup: popupElement,\n      popupVisible: visible,\n      getPopupContainer: props.getPopupContainer,\n      popupClassName: classnames(popupClassName),\n      popupStyle: popupStyle\n    }, this.props.children);\n  };\n\n  return SelectTrigger;\n}(Component);\n\nSelectTrigger.propTypes = {\n  dropdownMatchSelectWidth: PropTypes.bool,\n  dropdownPopupAlign: PropTypes.object,\n  visible: PropTypes.bool,\n  filterTreeNode: PropTypes.any,\n  treeNodes: PropTypes.any,\n  inputValue: PropTypes.string,\n  prefixCls: PropTypes.string,\n  popupClassName: PropTypes.string,\n  children: PropTypes.any\n};\nexport default SelectTrigger;","map":null,"metadata":{},"sourceType":"module"}