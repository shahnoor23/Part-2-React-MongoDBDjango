{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _common = require(\"./common\");\n\nvar _lodash = require(\"lodash\");\n\nvar _ = _interopRequireWildcard(_lodash);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar MultiSelect = function (_React$Component) {\n  _inherits(MultiSelect, _React$Component);\n\n  function MultiSelect(props) {\n    _classCallCheck(this, MultiSelect);\n\n    var _this = _possibleConstructorReturn(this, (MultiSelect.__proto__ || Object.getPrototypeOf(MultiSelect)).call(this, props));\n\n    _this.toggleDown = function (event) {\n      var toggleDown = _this.state.toggleDown;\n      var top = (0, _common.getPositionTop)(event.currentTarget);\n      event.currentTarget.offsetHeight && (top += event.currentTarget.offsetHeight);\n      var left = (0, _common.getPositionLeft)(event.currentTarget);\n      var clientWidth = document.body.clientWidth;\n\n      if (left > clientWidth / 2) {\n        left = clientWidth - left;\n      }\n\n      _this.stopPropagation(event);\n\n      _this.setState({\n        toggleDown: !toggleDown,\n        top: top,\n        left: left\n      });\n    };\n\n    _this.toggleUp = function () {\n      _this.setState({\n        toggleDown: false\n      });\n    };\n\n    _this.stopPropagation = function (event) {\n      event.stopPropagation();\n      event.nativeEvent.stopImmediatePropagation();\n    };\n\n    _this.getSelectLis = function () {\n      var _this$props = _this.props,\n          dataSourceConfig = _this$props.dataSourceConfig,\n          dataSource = _this$props.dataSource;\n      var _this$state = _this.state,\n          selectedValue = _this$state.selectedValue,\n          searchText = _this$state.searchText;\n      var that = _this;\n      var liElements = [];\n\n      if (_this.checkConfigValid() && dataSource && dataSource instanceof Array) {\n        var label = dataSourceConfig.label,\n            text = dataSourceConfig.text;\n\n        for (var i = 0; i < dataSource.length; i++) {\n          var obj = dataSource[i];\n\n          if (!obj || !obj[label]) {\n            continue;\n          }\n\n          var li = _this.generateLiElement.call(that, obj, label, text, selectedValue, searchText);\n\n          li && liElements.push(li);\n        }\n      }\n\n      return liElements;\n    };\n\n    _this.checkConfigValid = function () {\n      var validConfig = false;\n      var dataSourceConfig = _this.props.dataSourceConfig;\n\n      if (dataSourceConfig && dataSourceConfig instanceof Object) {\n        var label = dataSourceConfig.label;\n\n        if (label !== undefined && label !== null && (typeof label === 'number' || typeof label === 'string')) {\n          validConfig = true;\n        }\n      }\n\n      return validConfig;\n    };\n\n    _this.generateLiElement = function (node, label, text, selectedValue, searchText) {\n      var that = _this;\n      var element = null;\n\n      if (node.children && node.children.length > 0) {\n        var lis = [];\n        var length = node.children.length;\n\n        for (var i = 0; i < length; i++) {\n          var li = _this.generateLiElement.call(that, node.children[i], label, text, selectedValue, searchText);\n\n          li && lis.push(li);\n        }\n\n        var optionChecked = that.checkOptionsAllChecked(selectedValue, node.children);\n\n        if (lis.length > 0) {\n          element = _react2.default.createElement(\"li\", null, _react2.default.createElement(\"div\", null, _react2.default.createElement(\"input\", {\n            type: \"checkbox\",\n            id: node[label],\n            checked: optionChecked,\n            \"data-key\": node[label],\n            onChange: that.onChangeOption\n          }), _react2.default.createElement(\"label\", {\n            htmlFor: node[label]\n          }, node[text]), _react2.default.createElement(\"ul\", null, lis)));\n        }\n      } else if (node && node[label] && that.filter(searchText, node[text])) {\n        var _optionChecked = that.checkOptionsAllChecked(selectedValue, Array.of(node));\n\n        element = _react2.default.createElement(\"li\", null, _react2.default.createElement(\"input\", {\n          type: \"checkbox\",\n          id: node[label],\n          checked: _optionChecked,\n          \"data-key\": node[label],\n          onChange: that.onChangeOption\n        }), _react2.default.createElement(\"label\", {\n          htmlFor: node[label]\n        }, node[text]));\n      }\n\n      return element;\n    };\n\n    _this.onChangeOption = function (event) {\n      var optionChecked = event.target.checked;\n      var selectedValue = _this.state.selectedValue;\n      var _this$props2 = _this.props,\n          dataSourceConfig = _this$props2.dataSourceConfig,\n          dataSource = _this$props2.dataSource,\n          onChange = _this$props2.onChange;\n\n      if (_this.checkConfigValid()) {\n        var label = dataSourceConfig.label;\n        var result = [].concat(_toConsumableArray(selectedValue));\n        var checkedLabel = event.target.getAttribute('data-key');\n        var checkedNode = (0, _common.findNode)(dataSource, checkedLabel, label);\n        var checkedChildrenNodes = (0, _common.getAllNoChildrenNodes)(Array.of(checkedNode));\n\n        var checkedIds = _.chain(checkedChildrenNodes).filter(function (child) {\n          return child.hasOwnProperty(label);\n        }).map(label).value();\n\n        if (optionChecked) {\n          result = _.union(result, checkedIds);\n        } else {\n          result = _.difference(result, checkedIds);\n        }\n\n        _this.setState({\n          selectedValue: result,\n          allChecked: _this.checkOptionsAllChecked(result, dataSource)\n        }, onChange && onChange(result));\n      }\n    };\n\n    _this.checkOptionsAllChecked = function (selectedValue, dataSource) {\n      var allSelected = false;\n      var dataSourceConfig = _this.props.dataSourceConfig;\n\n      if (_this.checkConfigValid()) {\n        var label = dataSourceConfig.label;\n        var allNodes = (0, _common.getAllNoChildrenNodes)(dataSource);\n\n        var allNodeLabels = _.chain(allNodes).filter(function (node) {\n          return node.hasOwnProperty(dataSourceConfig.label);\n        }).map(label).value();\n\n        var result = _.union(selectedValue, allNodeLabels);\n\n        if (selectedValue.length === result.length) {\n          allSelected = true;\n        }\n      }\n\n      return allSelected;\n    };\n\n    _this.onChangeAllOption = function (event) {\n      var optionChecked = event.target.checked;\n      var _this$props3 = _this.props,\n          dataSourceConfig = _this$props3.dataSourceConfig,\n          dataSource = _this$props3.dataSource,\n          onChange = _this$props3.onChange;\n\n      if (_this.checkConfigValid()) {\n        var label = dataSourceConfig.label;\n        var result = [];\n        var checkedChildrenNodes = (0, _common.getAllNoChildrenNodes)(dataSource);\n\n        var checkedIds = _.chain(checkedChildrenNodes).filter(function (child) {\n          return child.hasOwnProperty(label);\n        }).map(label).value();\n\n        if (optionChecked) {\n          result = _.union(result, checkedIds);\n        }\n\n        _this.setState({\n          selectedValue: result,\n          allChecked: _this.checkOptionsAllChecked(result, dataSource)\n        }, onChange && onChange(result));\n      }\n    };\n\n    _this.onClickClearOptions = function (event) {\n      _this.stopPropagation(event);\n\n      var _this$props4 = _this.props,\n          dataSource = _this$props4.dataSource,\n          onChange = _this$props4.onChange;\n\n      _this.setState({\n        selectedValue: [],\n        allChecked: _this.checkOptionsAllChecked([], dataSource)\n      }, onChange && onChange([]));\n    };\n\n    _this.onChangeSearchText = function (event) {\n      _this.setState({\n        searchText: event.target.value\n      });\n    };\n\n    _this.filter = function (searchText, text) {\n      return searchText === '' || text.indexOf(searchText) !== -1;\n    };\n\n    _this.getShowLabelText = function () {\n      var _this$props5 = _this.props,\n          buttonText = _this$props5.buttonText,\n          showTextNumber = _this$props5.showTextNumber,\n          dataSource = _this$props5.dataSource,\n          dataSourceConfig = _this$props5.dataSourceConfig;\n      var _this$state2 = _this.state,\n          selectedValue = _this$state2.selectedValue,\n          allChecked = _this$state2.allChecked;\n      var labelText = buttonText || '选项';\n      var showNumber = showTextNumber || 1;\n\n      if (allChecked) {\n        labelText += ' 已全选';\n      } else if (showNumber && selectedValue.length > 0 && selectedValue.length > showNumber) {\n        labelText += \" \" + selectedValue.length + \"\\u4E2A\";\n      } else if (showNumber && selectedValue.length > 0 && selectedValue.length <= showNumber) {\n        var label = dataSourceConfig.label,\n            text = dataSourceConfig.text;\n        var allOptionNodes = (0, _common.getAllNoChildrenNodes)(dataSource);\n        var selectedText = allOptionNodes.reduce(function (root, node) {\n          if (selectedValue.findIndex(function (checkedValue) {\n            return node[label] && checkedValue.toString() === node[label].toString();\n          }) !== -1) {\n            root.push(node[text]);\n          }\n\n          return root;\n        }, []);\n        labelText += \" \" + selectedText.toString();\n      }\n\n      return labelText;\n    };\n\n    var initValue = _this.props.initValue;\n    var initSelected = initValue || [];\n    _this.state = {\n      top: 0,\n      left: 0,\n      selectedValue: initSelected,\n      toggleDown: false,\n      searchText: '',\n      allChecked: false\n    };\n    _this.toggleUp = _this.toggleUp.bind(_this);\n    _this.toggleDown = _this.toggleDown.bind(_this);\n    _this.stopPropagation = _this.stopPropagation.bind(_this);\n    _this.onChangeOption = _this.onChangeOption.bind(_this);\n    _this.inputDebounce = _.debounce(function (event) {}, 1000);\n    _this.onChangeSearchText = _this.onChangeSearchText.bind(_this);\n    return _this;\n  }\n\n  _createClass(MultiSelect, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener('click', this.toggleUp, false);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener('click', this.toggleUp, false);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props = this.props,\n          hasSelectAll = _props.hasSelectAll,\n          hasSearch = _props.hasSearch;\n      var _state = this.state,\n          toggleDown = _state.toggleDown,\n          selectedValue = _state.selectedValue,\n          top = _state.top,\n          left = _state.left,\n          searchText = _state.searchText,\n          allChecked = _state.allChecked;\n      return _react2.default.createElement(\"div\", {\n        className: \"criteria-extended\"\n      }, _react2.default.createElement(\"div\", {\n        className: \"criteria-list\"\n      }, _react2.default.createElement(\"button\", {\n        type: \"button\",\n        className: \"criteria-selector aui-button aui-button-subtle drop-arrow\",\n        style: {\n          backgroundColor: 'rgba(212, 212, 212, 0.5)',\n          color: '#333',\n          borderColor: '#adadad'\n        },\n        onClick: this.toggleDown\n      }, _react2.default.createElement(\"div\", {\n        className: \"criteria-wrap\"\n      }, _react2.default.createElement(\"div\", {\n        className: \"searcherValue\"\n      }, _react2.default.createElement(\"span\", {\n        className: \"fieldValue\"\n      }, this.getShowLabelText())))), _react2.default.createElement(\"a\", {\n        href: \"javascript:void(0)\",\n        className: \"remove-select\",\n        title: \"remove selected value\",\n        tabIndex: \"-1\",\n        style: {\n          display: 'inline'\n        },\n        onClick: this.onClickClearOptions\n      }), _react2.default.createElement(\"div\", {\n        className: \"rm-dropdown-menu \" + (toggleDown ? 'open' : ''),\n        style: Object.assign({}, {\n          top: top\n        }),\n        onClick: this.stopPropagation\n      }, _react2.default.createElement(\"div\", {\n        className: \"dropdown-content\"\n      }, _react2.default.createElement(\"div\", {\n        className: \"search-operation \" + (hasSearch ? 'open' : '')\n      }, _react2.default.createElement(\"input\", {\n        type: \"text\",\n        id: \"searchText\",\n        value: searchText,\n        onChange: this.onChangeSearchText\n      })), _react2.default.createElement(\"div\", {\n        className: \"allCheck-operation \" + (hasSelectAll ? 'open' : '')\n      }, _react2.default.createElement(\"input\", {\n        type: \"checkbox\",\n        id: \"allCheckBox\",\n        checked: allChecked,\n        onChange: this.onChangeAllOption\n      }), _react2.default.createElement(\"label\", {\n        htmlFor: \"allCheckBox\"\n      }, \"\\u5168\\u9009\"))), _react2.default.createElement(\"ul\", {\n        className: \"dropdown-operation\"\n      }, this.getSelectLis()))));\n    }\n  }]);\n\n  return MultiSelect;\n}(_react2.default.Component);\n\nMultiSelect.defaultProps = {\n  dataSource: [],\n  dataSourceConfig: {\n    label: 'id',\n    text: 'name'\n  },\n  showTextNumber: 1,\n  buttonText: \"选项\",\n  hasSelectAll: true,\n  hasSearch: false\n};\nMultiSelect.propTypes = {\n  dataSource: _react2.default.PropTypes.array,\n  dataSourceConfig: _react2.default.PropTypes.object,\n  initValue: _react2.default.PropTypes.array,\n  onChange: _react2.default.PropTypes.func,\n  buttonText: _react2.default.PropTypes.string,\n  showTextNumber: _react2.default.PropTypes.number,\n  hasSelectAll: _react2.default.PropTypes.bool,\n  hasSearch: _react2.default.PropTypes.bool\n};\nexports.default = MultiSelect;","map":null,"metadata":{},"sourceType":"script"}