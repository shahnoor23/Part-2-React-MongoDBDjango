{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport ClearButton from './ClearButton';\n/**\n * @hidden\n */\n\nvar SearchBar =\n/** @class */\nfunction (_super) {\n  __extends(SearchBar, _super);\n\n  function SearchBar() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(SearchBar.prototype, \"input\", {\n    /**\n     * @hidden\n     */\n    get: function get() {\n      return this._input;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SearchBar.prototype.componentDidUpdate = function (prevProps) {\n    var prevValue = prevProps.value;\n    var prevSuggestedText = prevProps.suggestedText;\n    var _a = this.props,\n        value = _a.value,\n        suggestedText = _a.suggestedText,\n        focused = _a.focused;\n    var input = this.input;\n    var valueChanged = prevValue !== value || suggestedText !== prevSuggestedText;\n    var deleting = valueChanged && prevValue.startsWith(value) && !(prevSuggestedText && suggestedText && prevSuggestedText.endsWith(suggestedText));\n\n    if (focused && input && document.activeElement !== input) {\n      input.focus();\n    }\n\n    if (suggestedText && valueChanged && !deleting && input) {\n      input.setSelectionRange(value.length - suggestedText.length, value.length);\n    }\n  };\n\n  SearchBar.prototype.render = function () {\n    var _this = this;\n\n    return [React.createElement(\"span\", {\n      className: \"k-searchbar\",\n      key: \"searchbar\"\n    }, React.createElement(\"input\", {\n      autoComplete: \"off\",\n      id: this.props.id,\n      type: \"text\",\n      size: this.props.size,\n      placeholder: this.props.placeholder,\n      className: \"k-input\",\n      tabIndex: this.props.tabIndex,\n      accessKey: this.props.accessKey,\n      role: \"listbox\",\n      name: this.props.name,\n      value: this.props.value,\n      onChange: this.props.onChange,\n      ref: function ref(input) {\n        return _this._input = input;\n      },\n      onKeyDown: this.props.onKeyDown,\n      onFocus: this.props.onFocus,\n      onBlur: this.props.onBlur,\n      \"aria-disabled\": this.props.disabled || undefined,\n      disabled: this.props.disabled || undefined,\n      readOnly: this.props.readOnly || undefined,\n      \"aria-haspopup\": \"listbox\",\n      \"aria-expanded\": this.props.expanded || false,\n      \"aria-owns\": this.props.owns,\n      \"aria-activedescendant\": this.props.activedescendant,\n      \"aria-describedby\": this.props.describedby\n    })), this.props.clearButton && React.createElement(ClearButton, {\n      onClick: this.props.clearButtonClick,\n      key: \"clearbutton\"\n    })];\n  };\n\n  return SearchBar;\n}(React.Component);\n\nexport default SearchBar;","map":null,"metadata":{},"sourceType":"module"}