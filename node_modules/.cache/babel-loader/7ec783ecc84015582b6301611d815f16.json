{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { cloneElement } from 'react';\nimport RcDropdown from 'rc-dropdown';\nimport classNames from 'classnames';\nimport warning from '../_util/warning';\n\nvar Dropdown = function (_React$Component) {\n  _inherits(Dropdown, _React$Component);\n\n  function Dropdown() {\n    _classCallCheck(this, Dropdown);\n\n    return _possibleConstructorReturn(this, (Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).apply(this, arguments));\n  }\n\n  _createClass(Dropdown, [{\n    key: 'getTransitionName',\n    value: function getTransitionName() {\n      var _props$placement = this.props.placement,\n          placement = _props$placement === undefined ? '' : _props$placement;\n\n      if (placement.indexOf('top') >= 0) {\n        return 'slide-down';\n      }\n\n      return 'slide-up';\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var overlay = this.props.overlay;\n      var overlayProps = overlay.props;\n      warning(!overlayProps.mode || overlayProps.mode === 'vertical', 'mode=\"' + overlayProps.mode + '\" is not supported for Dropdown\\'s Menu.');\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          prefixCls = _props.prefixCls,\n          overlay = _props.overlay,\n          trigger = _props.trigger,\n          disabled = _props.disabled;\n      var dropdownTrigger = cloneElement(children, {\n        className: classNames(children.props.className, prefixCls + '-trigger'),\n        disabled: disabled\n      }); // menu cannot be selectable in dropdown defaultly\n\n      var overlayProps = overlay && overlay.props;\n      var selectable = overlayProps && 'selectable' in overlayProps ? overlayProps.selectable : false;\n      var fixedModeOverlay = cloneElement(overlay, {\n        mode: 'vertical',\n        selectable: selectable\n      });\n      return React.createElement(RcDropdown, _extends({}, this.props, {\n        transitionName: this.getTransitionName(),\n        trigger: disabled ? [] : trigger,\n        overlay: fixedModeOverlay\n      }), dropdownTrigger);\n    }\n  }]);\n\n  return Dropdown;\n}(React.Component);\n\nexport default Dropdown;\nDropdown.defaultProps = {\n  prefixCls: 'ant-dropdown',\n  mouseEnterDelay: 0.15,\n  mouseLeaveDelay: 0.1,\n  placement: 'bottomLeft'\n};","map":null,"metadata":{},"sourceType":"module"}