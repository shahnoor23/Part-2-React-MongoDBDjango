{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport KeyCode from 'rc-util/es/KeyCode';\nimport Animate from 'rc-animate';\nimport LazyRenderBox from './LazyRenderBox';\nimport getScrollBarSize from 'rc-util/lib/getScrollBarSize';\nimport assign from 'object-assign';\nvar uuid = 0;\nvar openCount = 0;\n\nfunction noop() {}\n\nfunction getScroll(w, top) {\n  var ret = w['page' + (top ? 'Y' : 'X') + 'Offset'];\n  var method = 'scroll' + (top ? 'Top' : 'Left');\n\n  if (typeof ret !== 'number') {\n    var d = w.document;\n    ret = d.documentElement[method];\n\n    if (typeof ret !== 'number') {\n      ret = d.body[method];\n    }\n  }\n\n  return ret;\n}\n\nfunction setTransformOrigin(node, value) {\n  var style = node.style;\n  ['Webkit', 'Moz', 'Ms', 'ms'].forEach(function (prefix) {\n    style[prefix + 'TransformOrigin'] = value;\n  });\n  style['transformOrigin'] = value;\n}\n\nfunction offset(el) {\n  var rect = el.getBoundingClientRect();\n  var pos = {\n    left: rect.left,\n    top: rect.top\n  };\n  var doc = el.ownerDocument;\n  var w = doc.defaultView || doc.parentWindow;\n  pos.left += getScroll(w);\n  pos.top += getScroll(w, true);\n  return pos;\n}\n\nvar Dialog = function (_React$Component) {\n  _inherits(Dialog, _React$Component);\n\n  function Dialog() {\n    _classCallCheck(this, Dialog);\n\n    var _this = _possibleConstructorReturn(this, (Dialog.__proto__ || Object.getPrototypeOf(Dialog)).apply(this, arguments));\n\n    _this.onAnimateLeave = function () {\n      if (_this.refs.wrap) {\n        _this.refs.wrap.style.display = 'none';\n      }\n\n      _this.inTransition = false;\n\n      _this.removeScrollingEffect();\n\n      _this.props.afterClose();\n    };\n\n    _this.onMaskClick = function (e) {\n      if (Date.now() - _this.openTime < 300) {\n        return;\n      }\n\n      if (e.target === e.currentTarget) {\n        _this.close(e);\n      }\n    };\n\n    _this.onKeyDown = function (e) {\n      var props = _this.props;\n\n      if (props.keyboard && e.keyCode === KeyCode.ESC) {\n        _this.close(e);\n      }\n\n      if (props.visible) {\n        if (e.keyCode === KeyCode.TAB) {\n          var activeElement = document.activeElement;\n          var dialogRoot = _this.refs.wrap;\n          var sentinel = _this.refs.sentinel;\n\n          if (e.shiftKey) {\n            if (activeElement === dialogRoot) {\n              sentinel.focus();\n            }\n          } else if (activeElement === _this.refs.sentinel) {\n            dialogRoot.focus();\n          }\n        }\n      }\n    };\n\n    _this.getDialogElement = function () {\n      var props = _this.props;\n      var closable = props.closable;\n      var prefixCls = props.prefixCls;\n      var dest = {};\n\n      if (props.width !== undefined) {\n        dest.width = props.width;\n      }\n\n      if (props.height !== undefined) {\n        dest.height = props.height;\n      }\n\n      var footer = void 0;\n\n      if (props.footer) {\n        footer = React.createElement(\"div\", {\n          className: prefixCls + '-footer',\n          ref: \"footer\"\n        }, props.footer);\n      }\n\n      var header = void 0;\n\n      if (props.title) {\n        header = React.createElement(\"div\", {\n          className: prefixCls + '-header',\n          ref: \"header\"\n        }, React.createElement(\"div\", {\n          className: prefixCls + '-title',\n          id: _this.titleId\n        }, props.title));\n      }\n\n      var closer = void 0;\n\n      if (closable) {\n        closer = React.createElement(\"button\", {\n          onClick: _this.close,\n          \"aria-label\": \"Close\",\n          className: prefixCls + '-close'\n        }, React.createElement(\"span\", {\n          className: prefixCls + '-close-x'\n        }));\n      }\n\n      var style = assign({}, props.style, dest);\n\n      var transitionName = _this.getTransitionName();\n\n      var dialogElement = React.createElement(LazyRenderBox, {\n        key: \"dialog-element\",\n        role: \"document\",\n        ref: \"dialog\",\n        style: style,\n        className: prefixCls + ' ' + (props.className || ''),\n        visible: props.visible\n      }, React.createElement(\"div\", {\n        className: prefixCls + '-content'\n      }, closer, header, React.createElement(\"div\", _extends({\n        className: prefixCls + '-body',\n        style: props.bodyStyle,\n        ref: \"body\"\n      }, props.bodyProps), props.children), footer), React.createElement(\"div\", {\n        tabIndex: 0,\n        ref: \"sentinel\",\n        style: {\n          width: 0,\n          height: 0,\n          overflow: 'hidden'\n        }\n      }, \"sentinel\"));\n      return React.createElement(Animate, {\n        key: \"dialog\",\n        showProp: \"visible\",\n        onLeave: _this.onAnimateLeave,\n        transitionName: transitionName,\n        component: \"\",\n        transitionAppear: true\n      }, dialogElement);\n    };\n\n    _this.getZIndexStyle = function () {\n      var style = {};\n      var props = _this.props;\n\n      if (props.zIndex !== undefined) {\n        style.zIndex = props.zIndex;\n      }\n\n      return style;\n    };\n\n    _this.getWrapStyle = function () {\n      return assign({}, _this.getZIndexStyle(), _this.props.wrapStyle);\n    };\n\n    _this.getMaskStyle = function () {\n      return assign({}, _this.getZIndexStyle(), _this.props.maskStyle);\n    };\n\n    _this.getMaskElement = function () {\n      var props = _this.props;\n      var maskElement = void 0;\n\n      if (props.mask) {\n        var maskTransition = _this.getMaskTransitionName();\n\n        maskElement = React.createElement(LazyRenderBox, _extends({\n          style: _this.getMaskStyle(),\n          key: \"mask\",\n          className: props.prefixCls + '-mask',\n          hiddenClassName: props.prefixCls + '-mask-hidden',\n          visible: props.visible\n        }, props.maskProps));\n\n        if (maskTransition) {\n          maskElement = React.createElement(Animate, {\n            key: \"mask\",\n            showProp: \"visible\",\n            transitionAppear: true,\n            component: \"\",\n            transitionName: maskTransition\n          }, maskElement);\n        }\n      }\n\n      return maskElement;\n    };\n\n    _this.getMaskTransitionName = function () {\n      var props = _this.props;\n      var transitionName = props.maskTransitionName;\n      var animation = props.maskAnimation;\n\n      if (!transitionName && animation) {\n        transitionName = props.prefixCls + '-' + animation;\n      }\n\n      return transitionName;\n    };\n\n    _this.getTransitionName = function () {\n      var props = _this.props;\n      var transitionName = props.transitionName;\n      var animation = props.animation;\n\n      if (!transitionName && animation) {\n        transitionName = props.prefixCls + '-' + animation;\n      }\n\n      return transitionName;\n    };\n\n    _this.getElement = function (part) {\n      return _this.refs[part];\n    };\n\n    _this.setScrollbar = function () {\n      if (_this.bodyIsOverflowing && _this.scrollbarWidth !== undefined) {\n        document.body.style.paddingRight = _this.scrollbarWidth + 'px';\n      }\n    };\n\n    _this.addScrollingEffect = function () {\n      openCount++;\n\n      if (openCount !== 1) {\n        return;\n      }\n\n      _this.checkScrollbar();\n\n      _this.setScrollbar();\n\n      document.body.style.overflow = 'hidden';\n    };\n\n    _this.removeScrollingEffect = function () {\n      openCount--;\n\n      if (openCount !== 0) {\n        return;\n      }\n\n      document.body.style.overflow = '';\n\n      _this.resetScrollbar();\n    };\n\n    _this.close = function (e) {\n      _this.props.onClose(e);\n    };\n\n    _this.checkScrollbar = function () {\n      var fullWindowWidth = window.innerWidth;\n\n      if (!fullWindowWidth) {\n        var documentElementRect = document.documentElement.getBoundingClientRect();\n        fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left);\n      }\n\n      _this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth;\n\n      if (_this.bodyIsOverflowing) {\n        _this.scrollbarWidth = getScrollBarSize();\n      }\n    };\n\n    _this.resetScrollbar = function () {\n      document.body.style.paddingRight = '';\n    };\n\n    _this.adjustDialog = function () {\n      if (_this.refs.wrap && _this.scrollbarWidth !== undefined) {\n        var modalIsOverflowing = _this.refs.wrap.scrollHeight > document.documentElement.clientHeight;\n        _this.refs.wrap.style.paddingLeft = (!_this.bodyIsOverflowing && modalIsOverflowing ? _this.scrollbarWidth : '') + 'px';\n        _this.refs.wrap.style.paddingRight = (_this.bodyIsOverflowing && !modalIsOverflowing ? _this.scrollbarWidth : '') + 'px';\n      }\n    };\n\n    _this.resetAdjustments = function () {\n      if (_this.refs.wrap) {\n        _this.refs.wrap.style.paddingLeft = _this.refs.wrap.style.paddingLeft = '';\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Dialog, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this.inTransition = false;\n      this.titleId = 'rcDialogTitle' + uuid++;\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.componentDidUpdate({});\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var props = this.props;\n      var mousePosition = this.props.mousePosition;\n\n      if (props.visible) {\n        if (!prevProps.visible) {\n          this.openTime = Date.now();\n          this.lastOutSideFocusNode = document.activeElement;\n          this.addScrollingEffect();\n          this.refs.wrap.focus();\n          var dialogNode = ReactDOM.findDOMNode(this.refs.dialog);\n\n          if (mousePosition) {\n            var elOffset = offset(dialogNode);\n            setTransformOrigin(dialogNode, mousePosition.x - elOffset.left + 'px ' + (mousePosition.y - elOffset.top) + 'px');\n          } else {\n            setTransformOrigin(dialogNode, '');\n          }\n        }\n      } else if (prevProps.visible) {\n        this.inTransition = true;\n\n        if (props.mask && this.lastOutSideFocusNode) {\n          try {\n            this.lastOutSideFocusNode.focus();\n          } catch (e) {\n            this.lastOutSideFocusNode = null;\n          }\n\n          this.lastOutSideFocusNode = null;\n        }\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.props.visible || this.inTransition) {\n        this.removeScrollingEffect();\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var props = this.props;\n      var prefixCls = props.prefixCls,\n          maskClosable = props.maskClosable;\n      var style = this.getWrapStyle();\n\n      if (props.visible) {\n        style.display = null;\n      }\n\n      return React.createElement(\"div\", null, this.getMaskElement(), React.createElement(\"div\", _extends({\n        tabIndex: -1,\n        onKeyDown: this.onKeyDown,\n        className: prefixCls + '-wrap ' + (props.wrapClassName || ''),\n        ref: \"wrap\",\n        onClick: maskClosable ? this.onMaskClick : undefined,\n        role: \"dialog\",\n        \"aria-labelledby\": props.title ? this.titleId : null,\n        style: style\n      }, props.wrapProps), this.getDialogElement()));\n    }\n  }]);\n\n  return Dialog;\n}(React.Component);\n\nexport default Dialog;\nDialog.defaultProps = {\n  afterClose: noop,\n  className: '',\n  mask: true,\n  visible: false,\n  keyboard: true,\n  closable: true,\n  maskClosable: true,\n  prefixCls: 'rc-dialog',\n  onClose: noop\n};","map":null,"metadata":{},"sourceType":"module"}