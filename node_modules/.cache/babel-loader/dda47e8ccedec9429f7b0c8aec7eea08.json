{"ast":null,"code":"import _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Animate from 'rc-animate';\nimport Icon from '../icon';\nimport classNames from 'classnames';\n\nfunction noop() {}\n\nvar Alert = function (_React$Component) {\n  _inherits(Alert, _React$Component);\n\n  function Alert(props) {\n    _classCallCheck(this, Alert);\n\n    var _this = _possibleConstructorReturn(this, (Alert.__proto__ || Object.getPrototypeOf(Alert)).call(this, props));\n\n    _this.handleClose = function (e) {\n      e.preventDefault();\n      var dom = ReactDOM.findDOMNode(_this);\n      dom.style.height = dom.offsetHeight + 'px'; // Magic code\n      // 重复一次后才能正确设置 height\n\n      dom.style.height = dom.offsetHeight + 'px';\n\n      _this.setState({\n        closing: false\n      });\n\n      (_this.props.onClose || noop)(e);\n    };\n\n    _this.animationEnd = function () {\n      _this.setState({\n        closed: true,\n        closing: true\n      });\n    };\n\n    _this.state = {\n      closing: true,\n      closed: false\n    };\n    return _this;\n  }\n\n  _createClass(Alert, [{\n    key: 'render',\n    value: function render() {\n      var _classNames;\n\n      var _props = this.props,\n          closable = _props.closable,\n          description = _props.description,\n          type = _props.type,\n          _props$prefixCls = _props.prefixCls,\n          prefixCls = _props$prefixCls === undefined ? 'ant-alert' : _props$prefixCls,\n          message = _props.message,\n          closeText = _props.closeText,\n          showIcon = _props.showIcon,\n          banner = _props.banner,\n          _props$className = _props.className,\n          className = _props$className === undefined ? '' : _props$className,\n          style = _props.style; // banner模式默认有 Icon\n\n      showIcon = banner && showIcon === undefined ? true : showIcon; // banner模式默认为警告\n\n      type = banner && type === undefined ? 'warning' : type || 'info';\n      var iconType = '';\n\n      switch (type) {\n        case 'success':\n          iconType = 'check-circle';\n          break;\n\n        case 'info':\n          iconType = 'info-circle';\n          break;\n\n        case 'error':\n          iconType = 'cross-circle';\n          break;\n\n        case 'warning':\n          iconType = 'exclamation-circle';\n          break;\n\n        default:\n          iconType = 'default';\n      } // use outline icon in alert with description\n\n\n      if (!!description) {\n        iconType += '-o';\n      }\n\n      var alertCls = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, prefixCls + '-' + type, true), _defineProperty(_classNames, prefixCls + '-close', !this.state.closing), _defineProperty(_classNames, prefixCls + '-with-description', !!description), _defineProperty(_classNames, prefixCls + '-no-icon', !showIcon), _defineProperty(_classNames, prefixCls + '-banner', !!banner), _classNames), className); // closeable when closeText is assigned\n\n      if (closeText) {\n        closable = true;\n      }\n\n      var closeIcon = closable ? React.createElement('a', {\n        onClick: this.handleClose,\n        className: prefixCls + '-close-icon'\n      }, closeText || React.createElement(Icon, {\n        type: 'cross'\n      })) : null;\n      return this.state.closed ? null : React.createElement(Animate, {\n        component: '',\n        showProp: 'data-show',\n        transitionName: prefixCls + '-slide-up',\n        onEnd: this.animationEnd\n      }, React.createElement('div', {\n        'data-show': this.state.closing,\n        className: alertCls,\n        style: style\n      }, showIcon ? React.createElement(Icon, {\n        className: prefixCls + '-icon',\n        type: iconType\n      }) : null, React.createElement('span', {\n        className: prefixCls + '-message'\n      }, message), React.createElement('span', {\n        className: prefixCls + '-description'\n      }, description), closeIcon));\n    }\n  }]);\n\n  return Alert;\n}(React.Component);\n\nexport default Alert;","map":null,"metadata":{},"sourceType":"module"}