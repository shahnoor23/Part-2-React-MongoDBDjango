{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './strategies';\n\nfunction valueType(props, propName, componentName) {\n  var labelInValueShape = PropTypes.shape({\n    value: PropTypes.string.isRequired,\n    label: PropTypes.node\n  });\n\n  if (props.labelInValue) {\n    var validate = PropTypes.oneOfType([PropTypes.arrayOf(labelInValueShape), labelInValueShape]);\n    var error = validate.apply(undefined, arguments);\n\n    if (error) {\n      return new Error('Invalid prop `' + propName + '` supplied to `' + componentName + '`, ' + ('when `labelInValue` is `true`, `' + propName + '` should in ') + 'shape of `{ value: string, label?: string }`.');\n    }\n  } else if (props.treeCheckable && props.treeCheckStrictly) {\n    var _validate = PropTypes.oneOfType([PropTypes.arrayOf(labelInValueShape), labelInValueShape]);\n\n    var _error = _validate.apply(undefined, arguments);\n\n    if (_error) {\n      return new Error('Invalid prop `' + propName + '` supplied to `' + componentName + '`, ' + 'when `treeCheckable` and `treeCheckStrictly` are `true`, ' + ('`' + propName + '` should in shape of `{ value: string, label?: string }`.'));\n    }\n  } else if (props.multiple && props[propName] === '') {\n    return new Error('Invalid prop `' + propName + '` of type `string` supplied to `' + componentName + '`, ' + 'expected `array` when `multiple` is `true`.');\n  } else {\n    var _validate2 = PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]);\n\n    return _validate2.apply(undefined, arguments);\n  }\n}\n\nexport var SelectPropTypes = {\n  className: PropTypes.string,\n  prefixCls: PropTypes.string,\n  multiple: PropTypes.bool,\n  filterTreeNode: PropTypes.any,\n  showSearch: PropTypes.bool,\n  disabled: PropTypes.bool,\n  showArrow: PropTypes.bool,\n  allowClear: PropTypes.bool,\n  defaultOpen: PropTypes.bool,\n  open: PropTypes.bool,\n  transitionName: PropTypes.string,\n  animation: PropTypes.string,\n  choiceTransitionName: PropTypes.string,\n  onClick: PropTypes.func,\n  onChange: PropTypes.func,\n  onSelect: PropTypes.func,\n  onDeselect: PropTypes.func,\n  onSearch: PropTypes.func,\n  searchPlaceholder: PropTypes.string,\n  placeholder: PropTypes.any,\n  inputValue: PropTypes.any,\n  value: valueType,\n  defaultValue: valueType,\n  label: PropTypes.node,\n  defaultLabel: PropTypes.any,\n  labelInValue: PropTypes.bool,\n  dropdownStyle: PropTypes.object,\n  drodownPopupAlign: PropTypes.object,\n  onDropdownVisibleChange: PropTypes.func,\n  maxTagTextLength: PropTypes.number,\n  showCheckedStrategy: PropTypes.oneOf([SHOW_ALL, SHOW_PARENT, SHOW_CHILD]),\n  treeCheckStrictly: PropTypes.bool,\n  treeIcon: PropTypes.bool,\n  treeLine: PropTypes.bool,\n  treeDefaultExpandAll: PropTypes.bool,\n  treeCheckable: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n  treeNodeLabelProp: PropTypes.string,\n  treeNodeFilterProp: PropTypes.string,\n  treeData: PropTypes.array,\n  treeDataSimpleMode: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  loadData: PropTypes.func\n};","map":null,"metadata":{},"sourceType":"module"}